
Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013c8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001568  08001568  00002568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015ac  080015ac  00003084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080015ac  080015ac  000025ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015b4  080015b4  00003084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015b4  080015b4  000025b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015b8  080015b8  000025b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080015bc  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003084  2**0
                  CONTENTS
 10 .bss          00000170  20000084  20000084  00003084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001f4  200001f4  00003084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00003084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001714  00000000  00000000  000030b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000667  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000188  00000000  00000000  00004e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010e  00000000  00000000  00004fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016b50  00000000  00000000  000050c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001a50  00000000  00000000  0001bc16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00078491  00000000  00000000  0001d666  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00095af7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000cbc  00000000  00000000  00095b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  000967f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001550 	.word	0x08001550

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08001550 	.word	0x08001550

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <finished_transmission>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif


void finished_transmission(uint32_t bytes_sent) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// This function will be called after a transmission is complete

//	volatile uint32_t test = 0;
	// make a very simple delay
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
 800028c:	e002      	b.n	8000294 <finished_transmission+0x14>
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	3301      	adds	r3, #1
 8000292:	60fb      	str	r3, [r7, #12]
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	4a05      	ldr	r2, [pc, #20]	@ (80002ac <finished_transmission+0x2c>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d9f8      	bls.n	800028e <finished_transmission+0xe>
		// waste time !
	}
}
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	0008fffe 	.word	0x0008fffe

080002b0 <OnRxComplete>:

void OnRxComplete(char* str, uint32_t len) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
	// Example: echo the received string back
	SerialOutputString((uint8_t *)str, &USART1_PORT);
 80002ba:	4907      	ldr	r1, [pc, #28]	@ (80002d8 <OnRxComplete+0x28>)
 80002bc:	6878      	ldr	r0, [r7, #4]
 80002be:	f000 f906 	bl	80004ce <SerialOutputString>

	// Optional: print debug info over semihosting / debugger
	printf("Received: %.*s\n", (int)len, str);
 80002c2:	683b      	ldr	r3, [r7, #0]
 80002c4:	687a      	ldr	r2, [r7, #4]
 80002c6:	4619      	mov	r1, r3
 80002c8:	4804      	ldr	r0, [pc, #16]	@ (80002dc <OnRxComplete+0x2c>)
 80002ca:	f000 fad7 	bl	800087c <iprintf>


	// You can also add parsing here if you're using command-based input
	// e.g., if (strncmp(str, "LED ON", len) == 0) { ... }
}
 80002ce:	bf00      	nop
 80002d0:	3708      	adds	r7, #8
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	20000000 	.word	0x20000000
 80002dc:	08001568 	.word	0x08001568

080002e0 <main>:

int main(void) {
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
//	uint8_t *string_to_send = "This is a string !\r\n";

	//void (*completion_function)(uint32_t) = &finished_transmission;

	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
 80002e4:	4a06      	ldr	r2, [pc, #24]	@ (8000300 <main+0x20>)
 80002e6:	4907      	ldr	r1, [pc, #28]	@ (8000304 <main+0x24>)
 80002e8:	2004      	movs	r0, #4
 80002ea:	f000 f859 	bl	80003a0 <SerialInitialise>

	// Set the callback for receiving data
	SerialSetRxCallback(OnRxComplete);
 80002ee:	4806      	ldr	r0, [pc, #24]	@ (8000308 <main+0x28>)
 80002f0:	f000 f90e 	bl	8000510 <SerialSetRxCallback>

	// Enable receiving interrupt and set the terminating character '@'
	SerialEnableRxInterrupt(USART1, '@');
 80002f4:	2140      	movs	r1, #64	@ 0x40
 80002f6:	4805      	ldr	r0, [pc, #20]	@ (800030c <main+0x2c>)
 80002f8:	f000 f91a 	bl	8000530 <SerialEnableRxInterrupt>

	/* Loop forever */
	for(;;) {
 80002fc:	bf00      	nop
 80002fe:	e7fd      	b.n	80002fc <main+0x1c>
 8000300:	08000281 	.word	0x08000281
 8000304:	20000000 	.word	0x20000000
 8000308:	080002b1 	.word	0x080002b1
 800030c:	40013800 	.word	0x40013800

08000310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	4603      	mov	r3, r0
 8000318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800031a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031e:	2b00      	cmp	r3, #0
 8000320:	db0b      	blt.n	800033a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f003 021f 	and.w	r2, r3, #31
 8000328:	4907      	ldr	r1, [pc, #28]	@ (8000348 <__NVIC_EnableIRQ+0x38>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	095b      	lsrs	r3, r3, #5
 8000330:	2001      	movs	r0, #1
 8000332:	fa00 f202 	lsl.w	r2, r0, r2
 8000336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800033a:	bf00      	nop
 800033c:	370c      	adds	r7, #12
 800033e:	46bd      	mov	sp, r7
 8000340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000e100 	.word	0xe000e100

0800034c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800034c:	b480      	push	{r7}
 800034e:	b083      	sub	sp, #12
 8000350:	af00      	add	r7, sp, #0
 8000352:	4603      	mov	r3, r0
 8000354:	6039      	str	r1, [r7, #0]
 8000356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800035c:	2b00      	cmp	r3, #0
 800035e:	db0a      	blt.n	8000376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000360:	683b      	ldr	r3, [r7, #0]
 8000362:	b2da      	uxtb	r2, r3
 8000364:	490c      	ldr	r1, [pc, #48]	@ (8000398 <__NVIC_SetPriority+0x4c>)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	0112      	lsls	r2, r2, #4
 800036c:	b2d2      	uxtb	r2, r2
 800036e:	440b      	add	r3, r1
 8000370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000374:	e00a      	b.n	800038c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	b2da      	uxtb	r2, r3
 800037a:	4908      	ldr	r1, [pc, #32]	@ (800039c <__NVIC_SetPriority+0x50>)
 800037c:	79fb      	ldrb	r3, [r7, #7]
 800037e:	f003 030f 	and.w	r3, r3, #15
 8000382:	3b04      	subs	r3, #4
 8000384:	0112      	lsls	r2, r2, #4
 8000386:	b2d2      	uxtb	r2, r2
 8000388:	440b      	add	r3, r1
 800038a:	761a      	strb	r2, [r3, #24]
}
 800038c:	bf00      	nop
 800038e:	370c      	adds	r7, #12
 8000390:	46bd      	mov	sp, r7
 8000392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000396:	4770      	bx	lr
 8000398:	e000e100 	.word	0xe000e100
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <SerialInitialise>:
static char rx_buffer[RX_BUFFER_SIZE];
static uint32_t rx_index = 0;
static char rx_terminator = '\n';
static SerialRxCallback user_rx_cb = NULL;

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80003a0:	b480      	push	{r7}
 80003a2:	b087      	sub	sp, #28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	687a      	ldr	r2, [r7, #4]
 80003b0:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003b2:	4b39      	ldr	r3, [pc, #228]	@ (8000498 <SerialInitialise+0xf8>)
 80003b4:	69db      	ldr	r3, [r3, #28]
 80003b6:	4a38      	ldr	r2, [pc, #224]	@ (8000498 <SerialInitialise+0xf8>)
 80003b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003bc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003be:	4b36      	ldr	r3, [pc, #216]	@ (8000498 <SerialInitialise+0xf8>)
 80003c0:	699b      	ldr	r3, [r3, #24]
 80003c2:	4a35      	ldr	r2, [pc, #212]	@ (8000498 <SerialInitialise+0xf8>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	691a      	ldr	r2, [r3, #16]
 80003ce:	4b32      	ldr	r3, [pc, #200]	@ (8000498 <SerialInitialise+0xf8>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4931      	ldr	r1, [pc, #196]	@ (8000498 <SerialInitialise+0xf8>)
 80003d4:	4313      	orrs	r3, r2
 80003d6:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	68ba      	ldr	r2, [r7, #8]
 80003de:	6952      	ldr	r2, [r2, #20]
 80003e0:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	68ba      	ldr	r2, [r7, #8]
 80003e8:	6992      	ldr	r2, [r2, #24]
 80003ea:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	69d9      	ldr	r1, [r3, #28]
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	6a1a      	ldr	r2, [r3, #32]
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	430a      	orrs	r2, r1
 80003fc:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	6a19      	ldr	r1, [r3, #32]
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	685b      	ldr	r3, [r3, #4]
 8000406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	685b      	ldr	r3, [r3, #4]
 800040c:	430a      	orrs	r2, r1
 800040e:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000410:	68bb      	ldr	r3, [r7, #8]
 8000412:	68da      	ldr	r2, [r3, #12]
 8000414:	4b20      	ldr	r3, [pc, #128]	@ (8000498 <SerialInitialise+0xf8>)
 8000416:	69db      	ldr	r3, [r3, #28]
 8000418:	491f      	ldr	r1, [pc, #124]	@ (8000498 <SerialInitialise+0xf8>)
 800041a:	4313      	orrs	r3, r2
 800041c:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800041e:	68bb      	ldr	r3, [r7, #8]
 8000420:	689a      	ldr	r2, [r3, #8]
 8000422:	4b1d      	ldr	r3, [pc, #116]	@ (8000498 <SerialInitialise+0xf8>)
 8000424:	699b      	ldr	r3, [r3, #24]
 8000426:	491c      	ldr	r1, [pc, #112]	@ (8000498 <SerialInitialise+0xf8>)
 8000428:	4313      	orrs	r3, r2
 800042a:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	330c      	adds	r3, #12
 8000432:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000434:	68fb      	ldr	r3, [r7, #12]
 8000436:	2b04      	cmp	r3, #4
 8000438:	d820      	bhi.n	800047c <SerialInitialise+0xdc>
 800043a:	a201      	add	r2, pc, #4	@ (adr r2, 8000440 <SerialInitialise+0xa0>)
 800043c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000440:	08000455 	.word	0x08000455
 8000444:	0800045d 	.word	0x0800045d
 8000448:	08000465 	.word	0x08000465
 800044c:	0800046d 	.word	0x0800046d
 8000450:	08000475 	.word	0x08000475
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000454:	697b      	ldr	r3, [r7, #20]
 8000456:	2246      	movs	r2, #70	@ 0x46
 8000458:	801a      	strh	r2, [r3, #0]
		break;
 800045a:	e00f      	b.n	800047c <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800045c:	697b      	ldr	r3, [r7, #20]
 800045e:	2246      	movs	r2, #70	@ 0x46
 8000460:	801a      	strh	r2, [r3, #0]
		break;
 8000462:	e00b      	b.n	800047c <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	2246      	movs	r2, #70	@ 0x46
 8000468:	801a      	strh	r2, [r3, #0]
		break;
 800046a:	e007      	b.n	800047c <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	2246      	movs	r2, #70	@ 0x46
 8000470:	801a      	strh	r2, [r3, #0]
		break;
 8000472:	e003      	b.n	800047c <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	2246      	movs	r2, #70	@ 0x46
 8000478:	801a      	strh	r2, [r3, #0]
		break;
 800047a:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f042 020d 	orr.w	r2, r2, #13
 800048a:	601a      	str	r2, [r3, #0]
}
 800048c:	bf00      	nop
 800048e:	371c      	adds	r7, #28
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000

0800049c <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	6039      	str	r1, [r7, #0]
 80004a6:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80004a8:	bf00      	nop
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f8      	beq.n	80004aa <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	79fa      	ldrb	r2, [r7, #7]
 80004be:	b292      	uxth	r2, r2
 80004c0:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b084      	sub	sp, #16
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80004dc:	e00b      	b.n	80004f6 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	6839      	ldr	r1, [r7, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ffd9 	bl	800049c <SerialOutputChar>
		counter++;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3301      	adds	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
		pt++;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d1ef      	bne.n	80004de <SerialOutputString+0x10>
	}

	serial_port->completion_function(counter);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000502:	68f8      	ldr	r0, [r7, #12]
 8000504:	4798      	blx	r3
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <SerialSetRxCallback>:

    // Null-terminate the string
    buffer[index] = '\0';
}

void SerialSetRxCallback(SerialRxCallback callback) {
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    user_rx_cb = callback;
 8000518:	4a04      	ldr	r2, [pc, #16]	@ (800052c <SerialSetRxCallback+0x1c>)
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6013      	str	r3, [r2, #0]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	200000a0 	.word	0x200000a0

08000530 <SerialEnableRxInterrupt>:

void SerialEnableRxInterrupt(USART_TypeDef *USARTx, char terminatingChar) {
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
    // Enable the USART1 Receive Interrupt
    USARTx->CR1 |= USART_CR1_RXNEIE;  // Enable RXNE interrupt
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f043 0220 	orr.w	r2, r3, #32
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	601a      	str	r2, [r3, #0]

    // Configure NVIC to enable the USART1 IRQ (interrupt vector for USART1)
    NVIC_EnableIRQ(USART1_IRQn);
 8000548:	2025      	movs	r0, #37	@ 0x25
 800054a:	f7ff fee1 	bl	8000310 <__NVIC_EnableIRQ>
    NVIC_SetPriority(USART1_IRQn, 1);  // Set priority of USART1 IRQ (optional)
 800054e:	2101      	movs	r1, #1
 8000550:	2025      	movs	r0, #37	@ 0x25
 8000552:	f7ff fefb 	bl	800034c <__NVIC_SetPriority>
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800055e:	b580      	push	{r7, lr}
 8000560:	b086      	sub	sp, #24
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
 800056e:	e00a      	b.n	8000586 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000570:	f3af 8000 	nop.w
 8000574:	4601      	mov	r1, r0
 8000576:	68bb      	ldr	r3, [r7, #8]
 8000578:	1c5a      	adds	r2, r3, #1
 800057a:	60ba      	str	r2, [r7, #8]
 800057c:	b2ca      	uxtb	r2, r1
 800057e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000580:	697b      	ldr	r3, [r7, #20]
 8000582:	3301      	adds	r3, #1
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	697a      	ldr	r2, [r7, #20]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	429a      	cmp	r2, r3
 800058c:	dbf0      	blt.n	8000570 <_read+0x12>
  }

  return len;
 800058e:	687b      	ldr	r3, [r7, #4]
}
 8000590:	4618      	mov	r0, r3
 8000592:	3718      	adds	r7, #24
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}

08000598 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
 80005a8:	e009      	b.n	80005be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	1c5a      	adds	r2, r3, #1
 80005ae:	60ba      	str	r2, [r7, #8]
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	3301      	adds	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	697a      	ldr	r2, [r7, #20]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	429a      	cmp	r2, r3
 80005c4:	dbf1      	blt.n	80005aa <_write+0x12>
  }
  return len;
 80005c6:	687b      	ldr	r3, [r7, #4]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <_close>:

int _close(int file)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80005dc:	4618      	mov	r0, r3
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr

080005e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005f8:	605a      	str	r2, [r3, #4]
  return 0;
 80005fa:	2300      	movs	r3, #0
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	370c      	adds	r7, #12
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr

08000608 <_isatty>:

int _isatty(int file)
{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000610:	2301      	movs	r3, #1
}
 8000612:	4618      	mov	r0, r3
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	60b9      	str	r1, [r7, #8]
 8000628:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800062a:	2300      	movs	r3, #0
}
 800062c:	4618      	mov	r0, r3
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000636:	4770      	bx	lr

08000638 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b086      	sub	sp, #24
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000640:	4a14      	ldr	r2, [pc, #80]	@ (8000694 <_sbrk+0x5c>)
 8000642:	4b15      	ldr	r3, [pc, #84]	@ (8000698 <_sbrk+0x60>)
 8000644:	1ad3      	subs	r3, r2, r3
 8000646:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800064c:	4b13      	ldr	r3, [pc, #76]	@ (800069c <_sbrk+0x64>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d102      	bne.n	800065a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <_sbrk+0x64>)
 8000656:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <_sbrk+0x68>)
 8000658:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <_sbrk+0x64>)
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4413      	add	r3, r2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	429a      	cmp	r2, r3
 8000666:	d207      	bcs.n	8000678 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000668:	f000 f922 	bl	80008b0 <__errno>
 800066c:	4603      	mov	r3, r0
 800066e:	220c      	movs	r2, #12
 8000670:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000672:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000676:	e009      	b.n	800068c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000678:	4b08      	ldr	r3, [pc, #32]	@ (800069c <_sbrk+0x64>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800067e:	4b07      	ldr	r3, [pc, #28]	@ (800069c <_sbrk+0x64>)
 8000680:	681a      	ldr	r2, [r3, #0]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	4413      	add	r3, r2
 8000686:	4a05      	ldr	r2, [pc, #20]	@ (800069c <_sbrk+0x64>)
 8000688:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800068a:	68fb      	ldr	r3, [r7, #12]
}
 800068c:	4618      	mov	r0, r3
 800068e:	3718      	adds	r7, #24
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000a000 	.word	0x2000a000
 8000698:	00000400 	.word	0x00000400
 800069c:	200000a4 	.word	0x200000a4
 80006a0:	200001f8 	.word	0x200001f8

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	@ (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	@ (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	@ (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	@ (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	@ (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	@ (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d2:	f000 f8f3 	bl	80008bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fe03 	bl	80002e0 <main>

080006da <LoopForever>:

LoopForever:
  b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80006e8:	080015bc 	.word	0x080015bc
  ldr r2, =_sbss
 80006ec:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80006f0:	200001f4 	.word	0x200001f4

080006f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC1_2_IRQHandler>
	...

080006f8 <std>:
 80006f8:	2300      	movs	r3, #0
 80006fa:	b510      	push	{r4, lr}
 80006fc:	4604      	mov	r4, r0
 80006fe:	e9c0 3300 	strd	r3, r3, [r0]
 8000702:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000706:	6083      	str	r3, [r0, #8]
 8000708:	8181      	strh	r1, [r0, #12]
 800070a:	6643      	str	r3, [r0, #100]	@ 0x64
 800070c:	81c2      	strh	r2, [r0, #14]
 800070e:	6183      	str	r3, [r0, #24]
 8000710:	4619      	mov	r1, r3
 8000712:	2208      	movs	r2, #8
 8000714:	305c      	adds	r0, #92	@ 0x5c
 8000716:	f000 f8c3 	bl	80008a0 <memset>
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <std+0x58>)
 800071c:	6263      	str	r3, [r4, #36]	@ 0x24
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <std+0x5c>)
 8000720:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <std+0x60>)
 8000724:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <std+0x64>)
 8000728:	6323      	str	r3, [r4, #48]	@ 0x30
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <std+0x68>)
 800072c:	6224      	str	r4, [r4, #32]
 800072e:	429c      	cmp	r4, r3
 8000730:	d006      	beq.n	8000740 <std+0x48>
 8000732:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000736:	4294      	cmp	r4, r2
 8000738:	d002      	beq.n	8000740 <std+0x48>
 800073a:	33d0      	adds	r3, #208	@ 0xd0
 800073c:	429c      	cmp	r4, r3
 800073e:	d105      	bne.n	800074c <std+0x54>
 8000740:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000748:	f000 b8dc 	b.w	8000904 <__retarget_lock_init_recursive>
 800074c:	bd10      	pop	{r4, pc}
 800074e:	bf00      	nop
 8000750:	08001159 	.word	0x08001159
 8000754:	0800117b 	.word	0x0800117b
 8000758:	080011b3 	.word	0x080011b3
 800075c:	080011d7 	.word	0x080011d7
 8000760:	200000a8 	.word	0x200000a8

08000764 <stdio_exit_handler>:
 8000764:	4a02      	ldr	r2, [pc, #8]	@ (8000770 <stdio_exit_handler+0xc>)
 8000766:	4903      	ldr	r1, [pc, #12]	@ (8000774 <stdio_exit_handler+0x10>)
 8000768:	4803      	ldr	r0, [pc, #12]	@ (8000778 <stdio_exit_handler+0x14>)
 800076a:	f000 b869 	b.w	8000840 <_fwalk_sglue>
 800076e:	bf00      	nop
 8000770:	20000028 	.word	0x20000028
 8000774:	080010f1 	.word	0x080010f1
 8000778:	20000038 	.word	0x20000038

0800077c <cleanup_stdio>:
 800077c:	6841      	ldr	r1, [r0, #4]
 800077e:	4b0c      	ldr	r3, [pc, #48]	@ (80007b0 <cleanup_stdio+0x34>)
 8000780:	4299      	cmp	r1, r3
 8000782:	b510      	push	{r4, lr}
 8000784:	4604      	mov	r4, r0
 8000786:	d001      	beq.n	800078c <cleanup_stdio+0x10>
 8000788:	f000 fcb2 	bl	80010f0 <_fflush_r>
 800078c:	68a1      	ldr	r1, [r4, #8]
 800078e:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <cleanup_stdio+0x38>)
 8000790:	4299      	cmp	r1, r3
 8000792:	d002      	beq.n	800079a <cleanup_stdio+0x1e>
 8000794:	4620      	mov	r0, r4
 8000796:	f000 fcab 	bl	80010f0 <_fflush_r>
 800079a:	68e1      	ldr	r1, [r4, #12]
 800079c:	4b06      	ldr	r3, [pc, #24]	@ (80007b8 <cleanup_stdio+0x3c>)
 800079e:	4299      	cmp	r1, r3
 80007a0:	d004      	beq.n	80007ac <cleanup_stdio+0x30>
 80007a2:	4620      	mov	r0, r4
 80007a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a8:	f000 bca2 	b.w	80010f0 <_fflush_r>
 80007ac:	bd10      	pop	{r4, pc}
 80007ae:	bf00      	nop
 80007b0:	200000a8 	.word	0x200000a8
 80007b4:	20000110 	.word	0x20000110
 80007b8:	20000178 	.word	0x20000178

080007bc <global_stdio_init.part.0>:
 80007bc:	b510      	push	{r4, lr}
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <global_stdio_init.part.0+0x30>)
 80007c0:	4c0b      	ldr	r4, [pc, #44]	@ (80007f0 <global_stdio_init.part.0+0x34>)
 80007c2:	4a0c      	ldr	r2, [pc, #48]	@ (80007f4 <global_stdio_init.part.0+0x38>)
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	4620      	mov	r0, r4
 80007c8:	2200      	movs	r2, #0
 80007ca:	2104      	movs	r1, #4
 80007cc:	f7ff ff94 	bl	80006f8 <std>
 80007d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007d4:	2201      	movs	r2, #1
 80007d6:	2109      	movs	r1, #9
 80007d8:	f7ff ff8e 	bl	80006f8 <std>
 80007dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007e0:	2202      	movs	r2, #2
 80007e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e6:	2112      	movs	r1, #18
 80007e8:	f7ff bf86 	b.w	80006f8 <std>
 80007ec:	200001e0 	.word	0x200001e0
 80007f0:	200000a8 	.word	0x200000a8
 80007f4:	08000765 	.word	0x08000765

080007f8 <__sfp_lock_acquire>:
 80007f8:	4801      	ldr	r0, [pc, #4]	@ (8000800 <__sfp_lock_acquire+0x8>)
 80007fa:	f000 b884 	b.w	8000906 <__retarget_lock_acquire_recursive>
 80007fe:	bf00      	nop
 8000800:	200001e5 	.word	0x200001e5

08000804 <__sfp_lock_release>:
 8000804:	4801      	ldr	r0, [pc, #4]	@ (800080c <__sfp_lock_release+0x8>)
 8000806:	f000 b87f 	b.w	8000908 <__retarget_lock_release_recursive>
 800080a:	bf00      	nop
 800080c:	200001e5 	.word	0x200001e5

08000810 <__sinit>:
 8000810:	b510      	push	{r4, lr}
 8000812:	4604      	mov	r4, r0
 8000814:	f7ff fff0 	bl	80007f8 <__sfp_lock_acquire>
 8000818:	6a23      	ldr	r3, [r4, #32]
 800081a:	b11b      	cbz	r3, 8000824 <__sinit+0x14>
 800081c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000820:	f7ff bff0 	b.w	8000804 <__sfp_lock_release>
 8000824:	4b04      	ldr	r3, [pc, #16]	@ (8000838 <__sinit+0x28>)
 8000826:	6223      	str	r3, [r4, #32]
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <__sinit+0x2c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f5      	bne.n	800081c <__sinit+0xc>
 8000830:	f7ff ffc4 	bl	80007bc <global_stdio_init.part.0>
 8000834:	e7f2      	b.n	800081c <__sinit+0xc>
 8000836:	bf00      	nop
 8000838:	0800077d 	.word	0x0800077d
 800083c:	200001e0 	.word	0x200001e0

08000840 <_fwalk_sglue>:
 8000840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000844:	4607      	mov	r7, r0
 8000846:	4688      	mov	r8, r1
 8000848:	4614      	mov	r4, r2
 800084a:	2600      	movs	r6, #0
 800084c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000850:	f1b9 0901 	subs.w	r9, r9, #1
 8000854:	d505      	bpl.n	8000862 <_fwalk_sglue+0x22>
 8000856:	6824      	ldr	r4, [r4, #0]
 8000858:	2c00      	cmp	r4, #0
 800085a:	d1f7      	bne.n	800084c <_fwalk_sglue+0xc>
 800085c:	4630      	mov	r0, r6
 800085e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000862:	89ab      	ldrh	r3, [r5, #12]
 8000864:	2b01      	cmp	r3, #1
 8000866:	d907      	bls.n	8000878 <_fwalk_sglue+0x38>
 8000868:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800086c:	3301      	adds	r3, #1
 800086e:	d003      	beq.n	8000878 <_fwalk_sglue+0x38>
 8000870:	4629      	mov	r1, r5
 8000872:	4638      	mov	r0, r7
 8000874:	47c0      	blx	r8
 8000876:	4306      	orrs	r6, r0
 8000878:	3568      	adds	r5, #104	@ 0x68
 800087a:	e7e9      	b.n	8000850 <_fwalk_sglue+0x10>

0800087c <iprintf>:
 800087c:	b40f      	push	{r0, r1, r2, r3}
 800087e:	b507      	push	{r0, r1, r2, lr}
 8000880:	4906      	ldr	r1, [pc, #24]	@ (800089c <iprintf+0x20>)
 8000882:	ab04      	add	r3, sp, #16
 8000884:	6808      	ldr	r0, [r1, #0]
 8000886:	f853 2b04 	ldr.w	r2, [r3], #4
 800088a:	6881      	ldr	r1, [r0, #8]
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	f000 f865 	bl	800095c <_vfiprintf_r>
 8000892:	b003      	add	sp, #12
 8000894:	f85d eb04 	ldr.w	lr, [sp], #4
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr
 800089c:	20000034 	.word	0x20000034

080008a0 <memset>:
 80008a0:	4402      	add	r2, r0
 80008a2:	4603      	mov	r3, r0
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d100      	bne.n	80008aa <memset+0xa>
 80008a8:	4770      	bx	lr
 80008aa:	f803 1b01 	strb.w	r1, [r3], #1
 80008ae:	e7f9      	b.n	80008a4 <memset+0x4>

080008b0 <__errno>:
 80008b0:	4b01      	ldr	r3, [pc, #4]	@ (80008b8 <__errno+0x8>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000034 	.word	0x20000034

080008bc <__libc_init_array>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	4d0d      	ldr	r5, [pc, #52]	@ (80008f4 <__libc_init_array+0x38>)
 80008c0:	4c0d      	ldr	r4, [pc, #52]	@ (80008f8 <__libc_init_array+0x3c>)
 80008c2:	1b64      	subs	r4, r4, r5
 80008c4:	10a4      	asrs	r4, r4, #2
 80008c6:	2600      	movs	r6, #0
 80008c8:	42a6      	cmp	r6, r4
 80008ca:	d109      	bne.n	80008e0 <__libc_init_array+0x24>
 80008cc:	4d0b      	ldr	r5, [pc, #44]	@ (80008fc <__libc_init_array+0x40>)
 80008ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000900 <__libc_init_array+0x44>)
 80008d0:	f000 fe3e 	bl	8001550 <_init>
 80008d4:	1b64      	subs	r4, r4, r5
 80008d6:	10a4      	asrs	r4, r4, #2
 80008d8:	2600      	movs	r6, #0
 80008da:	42a6      	cmp	r6, r4
 80008dc:	d105      	bne.n	80008ea <__libc_init_array+0x2e>
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80008e4:	4798      	blx	r3
 80008e6:	3601      	adds	r6, #1
 80008e8:	e7ee      	b.n	80008c8 <__libc_init_array+0xc>
 80008ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80008ee:	4798      	blx	r3
 80008f0:	3601      	adds	r6, #1
 80008f2:	e7f2      	b.n	80008da <__libc_init_array+0x1e>
 80008f4:	080015b4 	.word	0x080015b4
 80008f8:	080015b4 	.word	0x080015b4
 80008fc:	080015b4 	.word	0x080015b4
 8000900:	080015b8 	.word	0x080015b8

08000904 <__retarget_lock_init_recursive>:
 8000904:	4770      	bx	lr

08000906 <__retarget_lock_acquire_recursive>:
 8000906:	4770      	bx	lr

08000908 <__retarget_lock_release_recursive>:
 8000908:	4770      	bx	lr

0800090a <__sfputc_r>:
 800090a:	6893      	ldr	r3, [r2, #8]
 800090c:	3b01      	subs	r3, #1
 800090e:	2b00      	cmp	r3, #0
 8000910:	b410      	push	{r4}
 8000912:	6093      	str	r3, [r2, #8]
 8000914:	da08      	bge.n	8000928 <__sfputc_r+0x1e>
 8000916:	6994      	ldr	r4, [r2, #24]
 8000918:	42a3      	cmp	r3, r4
 800091a:	db01      	blt.n	8000920 <__sfputc_r+0x16>
 800091c:	290a      	cmp	r1, #10
 800091e:	d103      	bne.n	8000928 <__sfputc_r+0x1e>
 8000920:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000924:	f000 bc5b 	b.w	80011de <__swbuf_r>
 8000928:	6813      	ldr	r3, [r2, #0]
 800092a:	1c58      	adds	r0, r3, #1
 800092c:	6010      	str	r0, [r2, #0]
 800092e:	7019      	strb	r1, [r3, #0]
 8000930:	4608      	mov	r0, r1
 8000932:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000936:	4770      	bx	lr

08000938 <__sfputs_r>:
 8000938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093a:	4606      	mov	r6, r0
 800093c:	460f      	mov	r7, r1
 800093e:	4614      	mov	r4, r2
 8000940:	18d5      	adds	r5, r2, r3
 8000942:	42ac      	cmp	r4, r5
 8000944:	d101      	bne.n	800094a <__sfputs_r+0x12>
 8000946:	2000      	movs	r0, #0
 8000948:	e007      	b.n	800095a <__sfputs_r+0x22>
 800094a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800094e:	463a      	mov	r2, r7
 8000950:	4630      	mov	r0, r6
 8000952:	f7ff ffda 	bl	800090a <__sfputc_r>
 8000956:	1c43      	adds	r3, r0, #1
 8000958:	d1f3      	bne.n	8000942 <__sfputs_r+0xa>
 800095a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800095c <_vfiprintf_r>:
 800095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000960:	460d      	mov	r5, r1
 8000962:	b09d      	sub	sp, #116	@ 0x74
 8000964:	4614      	mov	r4, r2
 8000966:	4698      	mov	r8, r3
 8000968:	4606      	mov	r6, r0
 800096a:	b118      	cbz	r0, 8000974 <_vfiprintf_r+0x18>
 800096c:	6a03      	ldr	r3, [r0, #32]
 800096e:	b90b      	cbnz	r3, 8000974 <_vfiprintf_r+0x18>
 8000970:	f7ff ff4e 	bl	8000810 <__sinit>
 8000974:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000976:	07d9      	lsls	r1, r3, #31
 8000978:	d405      	bmi.n	8000986 <_vfiprintf_r+0x2a>
 800097a:	89ab      	ldrh	r3, [r5, #12]
 800097c:	059a      	lsls	r2, r3, #22
 800097e:	d402      	bmi.n	8000986 <_vfiprintf_r+0x2a>
 8000980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000982:	f7ff ffc0 	bl	8000906 <__retarget_lock_acquire_recursive>
 8000986:	89ab      	ldrh	r3, [r5, #12]
 8000988:	071b      	lsls	r3, r3, #28
 800098a:	d501      	bpl.n	8000990 <_vfiprintf_r+0x34>
 800098c:	692b      	ldr	r3, [r5, #16]
 800098e:	b99b      	cbnz	r3, 80009b8 <_vfiprintf_r+0x5c>
 8000990:	4629      	mov	r1, r5
 8000992:	4630      	mov	r0, r6
 8000994:	f000 fc62 	bl	800125c <__swsetup_r>
 8000998:	b170      	cbz	r0, 80009b8 <_vfiprintf_r+0x5c>
 800099a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800099c:	07dc      	lsls	r4, r3, #31
 800099e:	d504      	bpl.n	80009aa <_vfiprintf_r+0x4e>
 80009a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009a4:	b01d      	add	sp, #116	@ 0x74
 80009a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009aa:	89ab      	ldrh	r3, [r5, #12]
 80009ac:	0598      	lsls	r0, r3, #22
 80009ae:	d4f7      	bmi.n	80009a0 <_vfiprintf_r+0x44>
 80009b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80009b2:	f7ff ffa9 	bl	8000908 <__retarget_lock_release_recursive>
 80009b6:	e7f3      	b.n	80009a0 <_vfiprintf_r+0x44>
 80009b8:	2300      	movs	r3, #0
 80009ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80009bc:	2320      	movs	r3, #32
 80009be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80009c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80009c6:	2330      	movs	r3, #48	@ 0x30
 80009c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000b78 <_vfiprintf_r+0x21c>
 80009cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80009d0:	f04f 0901 	mov.w	r9, #1
 80009d4:	4623      	mov	r3, r4
 80009d6:	469a      	mov	sl, r3
 80009d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009dc:	b10a      	cbz	r2, 80009e2 <_vfiprintf_r+0x86>
 80009de:	2a25      	cmp	r2, #37	@ 0x25
 80009e0:	d1f9      	bne.n	80009d6 <_vfiprintf_r+0x7a>
 80009e2:	ebba 0b04 	subs.w	fp, sl, r4
 80009e6:	d00b      	beq.n	8000a00 <_vfiprintf_r+0xa4>
 80009e8:	465b      	mov	r3, fp
 80009ea:	4622      	mov	r2, r4
 80009ec:	4629      	mov	r1, r5
 80009ee:	4630      	mov	r0, r6
 80009f0:	f7ff ffa2 	bl	8000938 <__sfputs_r>
 80009f4:	3001      	adds	r0, #1
 80009f6:	f000 80a7 	beq.w	8000b48 <_vfiprintf_r+0x1ec>
 80009fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80009fc:	445a      	add	r2, fp
 80009fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8000a00:	f89a 3000 	ldrb.w	r3, [sl]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	f000 809f 	beq.w	8000b48 <_vfiprintf_r+0x1ec>
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a10:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a14:	f10a 0a01 	add.w	sl, sl, #1
 8000a18:	9304      	str	r3, [sp, #16]
 8000a1a:	9307      	str	r3, [sp, #28]
 8000a1c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a20:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a22:	4654      	mov	r4, sl
 8000a24:	2205      	movs	r2, #5
 8000a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a2a:	4853      	ldr	r0, [pc, #332]	@ (8000b78 <_vfiprintf_r+0x21c>)
 8000a2c:	f7ff fbd8 	bl	80001e0 <memchr>
 8000a30:	9a04      	ldr	r2, [sp, #16]
 8000a32:	b9d8      	cbnz	r0, 8000a6c <_vfiprintf_r+0x110>
 8000a34:	06d1      	lsls	r1, r2, #27
 8000a36:	bf44      	itt	mi
 8000a38:	2320      	movmi	r3, #32
 8000a3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a3e:	0713      	lsls	r3, r2, #28
 8000a40:	bf44      	itt	mi
 8000a42:	232b      	movmi	r3, #43	@ 0x2b
 8000a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a48:	f89a 3000 	ldrb.w	r3, [sl]
 8000a4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a4e:	d015      	beq.n	8000a7c <_vfiprintf_r+0x120>
 8000a50:	9a07      	ldr	r2, [sp, #28]
 8000a52:	4654      	mov	r4, sl
 8000a54:	2000      	movs	r0, #0
 8000a56:	f04f 0c0a 	mov.w	ip, #10
 8000a5a:	4621      	mov	r1, r4
 8000a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a60:	3b30      	subs	r3, #48	@ 0x30
 8000a62:	2b09      	cmp	r3, #9
 8000a64:	d94b      	bls.n	8000afe <_vfiprintf_r+0x1a2>
 8000a66:	b1b0      	cbz	r0, 8000a96 <_vfiprintf_r+0x13a>
 8000a68:	9207      	str	r2, [sp, #28]
 8000a6a:	e014      	b.n	8000a96 <_vfiprintf_r+0x13a>
 8000a6c:	eba0 0308 	sub.w	r3, r0, r8
 8000a70:	fa09 f303 	lsl.w	r3, r9, r3
 8000a74:	4313      	orrs	r3, r2
 8000a76:	9304      	str	r3, [sp, #16]
 8000a78:	46a2      	mov	sl, r4
 8000a7a:	e7d2      	b.n	8000a22 <_vfiprintf_r+0xc6>
 8000a7c:	9b03      	ldr	r3, [sp, #12]
 8000a7e:	1d19      	adds	r1, r3, #4
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	9103      	str	r1, [sp, #12]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bfbb      	ittet	lt
 8000a88:	425b      	neglt	r3, r3
 8000a8a:	f042 0202 	orrlt.w	r2, r2, #2
 8000a8e:	9307      	strge	r3, [sp, #28]
 8000a90:	9307      	strlt	r3, [sp, #28]
 8000a92:	bfb8      	it	lt
 8000a94:	9204      	strlt	r2, [sp, #16]
 8000a96:	7823      	ldrb	r3, [r4, #0]
 8000a98:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a9a:	d10a      	bne.n	8000ab2 <_vfiprintf_r+0x156>
 8000a9c:	7863      	ldrb	r3, [r4, #1]
 8000a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000aa0:	d132      	bne.n	8000b08 <_vfiprintf_r+0x1ac>
 8000aa2:	9b03      	ldr	r3, [sp, #12]
 8000aa4:	1d1a      	adds	r2, r3, #4
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	9203      	str	r2, [sp, #12]
 8000aaa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000aae:	3402      	adds	r4, #2
 8000ab0:	9305      	str	r3, [sp, #20]
 8000ab2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000b88 <_vfiprintf_r+0x22c>
 8000ab6:	7821      	ldrb	r1, [r4, #0]
 8000ab8:	2203      	movs	r2, #3
 8000aba:	4650      	mov	r0, sl
 8000abc:	f7ff fb90 	bl	80001e0 <memchr>
 8000ac0:	b138      	cbz	r0, 8000ad2 <_vfiprintf_r+0x176>
 8000ac2:	9b04      	ldr	r3, [sp, #16]
 8000ac4:	eba0 000a 	sub.w	r0, r0, sl
 8000ac8:	2240      	movs	r2, #64	@ 0x40
 8000aca:	4082      	lsls	r2, r0
 8000acc:	4313      	orrs	r3, r2
 8000ace:	3401      	adds	r4, #1
 8000ad0:	9304      	str	r3, [sp, #16]
 8000ad2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ad6:	4829      	ldr	r0, [pc, #164]	@ (8000b7c <_vfiprintf_r+0x220>)
 8000ad8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000adc:	2206      	movs	r2, #6
 8000ade:	f7ff fb7f 	bl	80001e0 <memchr>
 8000ae2:	2800      	cmp	r0, #0
 8000ae4:	d03f      	beq.n	8000b66 <_vfiprintf_r+0x20a>
 8000ae6:	4b26      	ldr	r3, [pc, #152]	@ (8000b80 <_vfiprintf_r+0x224>)
 8000ae8:	bb1b      	cbnz	r3, 8000b32 <_vfiprintf_r+0x1d6>
 8000aea:	9b03      	ldr	r3, [sp, #12]
 8000aec:	3307      	adds	r3, #7
 8000aee:	f023 0307 	bic.w	r3, r3, #7
 8000af2:	3308      	adds	r3, #8
 8000af4:	9303      	str	r3, [sp, #12]
 8000af6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000af8:	443b      	add	r3, r7
 8000afa:	9309      	str	r3, [sp, #36]	@ 0x24
 8000afc:	e76a      	b.n	80009d4 <_vfiprintf_r+0x78>
 8000afe:	fb0c 3202 	mla	r2, ip, r2, r3
 8000b02:	460c      	mov	r4, r1
 8000b04:	2001      	movs	r0, #1
 8000b06:	e7a8      	b.n	8000a5a <_vfiprintf_r+0xfe>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	3401      	adds	r4, #1
 8000b0c:	9305      	str	r3, [sp, #20]
 8000b0e:	4619      	mov	r1, r3
 8000b10:	f04f 0c0a 	mov.w	ip, #10
 8000b14:	4620      	mov	r0, r4
 8000b16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b1a:	3a30      	subs	r2, #48	@ 0x30
 8000b1c:	2a09      	cmp	r2, #9
 8000b1e:	d903      	bls.n	8000b28 <_vfiprintf_r+0x1cc>
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0c6      	beq.n	8000ab2 <_vfiprintf_r+0x156>
 8000b24:	9105      	str	r1, [sp, #20]
 8000b26:	e7c4      	b.n	8000ab2 <_vfiprintf_r+0x156>
 8000b28:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e7f0      	b.n	8000b14 <_vfiprintf_r+0x1b8>
 8000b32:	ab03      	add	r3, sp, #12
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	462a      	mov	r2, r5
 8000b38:	4b12      	ldr	r3, [pc, #72]	@ (8000b84 <_vfiprintf_r+0x228>)
 8000b3a:	a904      	add	r1, sp, #16
 8000b3c:	4630      	mov	r0, r6
 8000b3e:	f3af 8000 	nop.w
 8000b42:	4607      	mov	r7, r0
 8000b44:	1c78      	adds	r0, r7, #1
 8000b46:	d1d6      	bne.n	8000af6 <_vfiprintf_r+0x19a>
 8000b48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b4a:	07d9      	lsls	r1, r3, #31
 8000b4c:	d405      	bmi.n	8000b5a <_vfiprintf_r+0x1fe>
 8000b4e:	89ab      	ldrh	r3, [r5, #12]
 8000b50:	059a      	lsls	r2, r3, #22
 8000b52:	d402      	bmi.n	8000b5a <_vfiprintf_r+0x1fe>
 8000b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b56:	f7ff fed7 	bl	8000908 <__retarget_lock_release_recursive>
 8000b5a:	89ab      	ldrh	r3, [r5, #12]
 8000b5c:	065b      	lsls	r3, r3, #25
 8000b5e:	f53f af1f 	bmi.w	80009a0 <_vfiprintf_r+0x44>
 8000b62:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b64:	e71e      	b.n	80009a4 <_vfiprintf_r+0x48>
 8000b66:	ab03      	add	r3, sp, #12
 8000b68:	9300      	str	r3, [sp, #0]
 8000b6a:	462a      	mov	r2, r5
 8000b6c:	4b05      	ldr	r3, [pc, #20]	@ (8000b84 <_vfiprintf_r+0x228>)
 8000b6e:	a904      	add	r1, sp, #16
 8000b70:	4630      	mov	r0, r6
 8000b72:	f000 f91b 	bl	8000dac <_printf_i>
 8000b76:	e7e4      	b.n	8000b42 <_vfiprintf_r+0x1e6>
 8000b78:	08001578 	.word	0x08001578
 8000b7c:	08001582 	.word	0x08001582
 8000b80:	00000000 	.word	0x00000000
 8000b84:	08000939 	.word	0x08000939
 8000b88:	0800157e 	.word	0x0800157e

08000b8c <sbrk_aligned>:
 8000b8c:	b570      	push	{r4, r5, r6, lr}
 8000b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8000bcc <sbrk_aligned+0x40>)
 8000b90:	460c      	mov	r4, r1
 8000b92:	6831      	ldr	r1, [r6, #0]
 8000b94:	4605      	mov	r5, r0
 8000b96:	b911      	cbnz	r1, 8000b9e <sbrk_aligned+0x12>
 8000b98:	f000 fc4c 	bl	8001434 <_sbrk_r>
 8000b9c:	6030      	str	r0, [r6, #0]
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	4628      	mov	r0, r5
 8000ba2:	f000 fc47 	bl	8001434 <_sbrk_r>
 8000ba6:	1c43      	adds	r3, r0, #1
 8000ba8:	d103      	bne.n	8000bb2 <sbrk_aligned+0x26>
 8000baa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000bae:	4620      	mov	r0, r4
 8000bb0:	bd70      	pop	{r4, r5, r6, pc}
 8000bb2:	1cc4      	adds	r4, r0, #3
 8000bb4:	f024 0403 	bic.w	r4, r4, #3
 8000bb8:	42a0      	cmp	r0, r4
 8000bba:	d0f8      	beq.n	8000bae <sbrk_aligned+0x22>
 8000bbc:	1a21      	subs	r1, r4, r0
 8000bbe:	4628      	mov	r0, r5
 8000bc0:	f000 fc38 	bl	8001434 <_sbrk_r>
 8000bc4:	3001      	adds	r0, #1
 8000bc6:	d1f2      	bne.n	8000bae <sbrk_aligned+0x22>
 8000bc8:	e7ef      	b.n	8000baa <sbrk_aligned+0x1e>
 8000bca:	bf00      	nop
 8000bcc:	200001e8 	.word	0x200001e8

08000bd0 <_malloc_r>:
 8000bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bd4:	1ccd      	adds	r5, r1, #3
 8000bd6:	f025 0503 	bic.w	r5, r5, #3
 8000bda:	3508      	adds	r5, #8
 8000bdc:	2d0c      	cmp	r5, #12
 8000bde:	bf38      	it	cc
 8000be0:	250c      	movcc	r5, #12
 8000be2:	2d00      	cmp	r5, #0
 8000be4:	4606      	mov	r6, r0
 8000be6:	db01      	blt.n	8000bec <_malloc_r+0x1c>
 8000be8:	42a9      	cmp	r1, r5
 8000bea:	d904      	bls.n	8000bf6 <_malloc_r+0x26>
 8000bec:	230c      	movs	r3, #12
 8000bee:	6033      	str	r3, [r6, #0]
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000ccc <_malloc_r+0xfc>
 8000bfa:	f000 faa1 	bl	8001140 <__malloc_lock>
 8000bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8000c02:	461c      	mov	r4, r3
 8000c04:	bb44      	cbnz	r4, 8000c58 <_malloc_r+0x88>
 8000c06:	4629      	mov	r1, r5
 8000c08:	4630      	mov	r0, r6
 8000c0a:	f7ff ffbf 	bl	8000b8c <sbrk_aligned>
 8000c0e:	1c43      	adds	r3, r0, #1
 8000c10:	4604      	mov	r4, r0
 8000c12:	d158      	bne.n	8000cc6 <_malloc_r+0xf6>
 8000c14:	f8d8 4000 	ldr.w	r4, [r8]
 8000c18:	4627      	mov	r7, r4
 8000c1a:	2f00      	cmp	r7, #0
 8000c1c:	d143      	bne.n	8000ca6 <_malloc_r+0xd6>
 8000c1e:	2c00      	cmp	r4, #0
 8000c20:	d04b      	beq.n	8000cba <_malloc_r+0xea>
 8000c22:	6823      	ldr	r3, [r4, #0]
 8000c24:	4639      	mov	r1, r7
 8000c26:	4630      	mov	r0, r6
 8000c28:	eb04 0903 	add.w	r9, r4, r3
 8000c2c:	f000 fc02 	bl	8001434 <_sbrk_r>
 8000c30:	4581      	cmp	r9, r0
 8000c32:	d142      	bne.n	8000cba <_malloc_r+0xea>
 8000c34:	6821      	ldr	r1, [r4, #0]
 8000c36:	1a6d      	subs	r5, r5, r1
 8000c38:	4629      	mov	r1, r5
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	f7ff ffa6 	bl	8000b8c <sbrk_aligned>
 8000c40:	3001      	adds	r0, #1
 8000c42:	d03a      	beq.n	8000cba <_malloc_r+0xea>
 8000c44:	6823      	ldr	r3, [r4, #0]
 8000c46:	442b      	add	r3, r5
 8000c48:	6023      	str	r3, [r4, #0]
 8000c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c4e:	685a      	ldr	r2, [r3, #4]
 8000c50:	bb62      	cbnz	r2, 8000cac <_malloc_r+0xdc>
 8000c52:	f8c8 7000 	str.w	r7, [r8]
 8000c56:	e00f      	b.n	8000c78 <_malloc_r+0xa8>
 8000c58:	6822      	ldr	r2, [r4, #0]
 8000c5a:	1b52      	subs	r2, r2, r5
 8000c5c:	d420      	bmi.n	8000ca0 <_malloc_r+0xd0>
 8000c5e:	2a0b      	cmp	r2, #11
 8000c60:	d917      	bls.n	8000c92 <_malloc_r+0xc2>
 8000c62:	1961      	adds	r1, r4, r5
 8000c64:	42a3      	cmp	r3, r4
 8000c66:	6025      	str	r5, [r4, #0]
 8000c68:	bf18      	it	ne
 8000c6a:	6059      	strne	r1, [r3, #4]
 8000c6c:	6863      	ldr	r3, [r4, #4]
 8000c6e:	bf08      	it	eq
 8000c70:	f8c8 1000 	streq.w	r1, [r8]
 8000c74:	5162      	str	r2, [r4, r5]
 8000c76:	604b      	str	r3, [r1, #4]
 8000c78:	4630      	mov	r0, r6
 8000c7a:	f000 fa67 	bl	800114c <__malloc_unlock>
 8000c7e:	f104 000b 	add.w	r0, r4, #11
 8000c82:	1d23      	adds	r3, r4, #4
 8000c84:	f020 0007 	bic.w	r0, r0, #7
 8000c88:	1ac2      	subs	r2, r0, r3
 8000c8a:	bf1c      	itt	ne
 8000c8c:	1a1b      	subne	r3, r3, r0
 8000c8e:	50a3      	strne	r3, [r4, r2]
 8000c90:	e7af      	b.n	8000bf2 <_malloc_r+0x22>
 8000c92:	6862      	ldr	r2, [r4, #4]
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	bf0c      	ite	eq
 8000c98:	f8c8 2000 	streq.w	r2, [r8]
 8000c9c:	605a      	strne	r2, [r3, #4]
 8000c9e:	e7eb      	b.n	8000c78 <_malloc_r+0xa8>
 8000ca0:	4623      	mov	r3, r4
 8000ca2:	6864      	ldr	r4, [r4, #4]
 8000ca4:	e7ae      	b.n	8000c04 <_malloc_r+0x34>
 8000ca6:	463c      	mov	r4, r7
 8000ca8:	687f      	ldr	r7, [r7, #4]
 8000caa:	e7b6      	b.n	8000c1a <_malloc_r+0x4a>
 8000cac:	461a      	mov	r2, r3
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	42a3      	cmp	r3, r4
 8000cb2:	d1fb      	bne.n	8000cac <_malloc_r+0xdc>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	6053      	str	r3, [r2, #4]
 8000cb8:	e7de      	b.n	8000c78 <_malloc_r+0xa8>
 8000cba:	230c      	movs	r3, #12
 8000cbc:	6033      	str	r3, [r6, #0]
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	f000 fa44 	bl	800114c <__malloc_unlock>
 8000cc4:	e794      	b.n	8000bf0 <_malloc_r+0x20>
 8000cc6:	6005      	str	r5, [r0, #0]
 8000cc8:	e7d6      	b.n	8000c78 <_malloc_r+0xa8>
 8000cca:	bf00      	nop
 8000ccc:	200001ec 	.word	0x200001ec

08000cd0 <_printf_common>:
 8000cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd4:	4616      	mov	r6, r2
 8000cd6:	4698      	mov	r8, r3
 8000cd8:	688a      	ldr	r2, [r1, #8]
 8000cda:	690b      	ldr	r3, [r1, #16]
 8000cdc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	bfb8      	it	lt
 8000ce4:	4613      	movlt	r3, r2
 8000ce6:	6033      	str	r3, [r6, #0]
 8000ce8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000cec:	4607      	mov	r7, r0
 8000cee:	460c      	mov	r4, r1
 8000cf0:	b10a      	cbz	r2, 8000cf6 <_printf_common+0x26>
 8000cf2:	3301      	adds	r3, #1
 8000cf4:	6033      	str	r3, [r6, #0]
 8000cf6:	6823      	ldr	r3, [r4, #0]
 8000cf8:	0699      	lsls	r1, r3, #26
 8000cfa:	bf42      	ittt	mi
 8000cfc:	6833      	ldrmi	r3, [r6, #0]
 8000cfe:	3302      	addmi	r3, #2
 8000d00:	6033      	strmi	r3, [r6, #0]
 8000d02:	6825      	ldr	r5, [r4, #0]
 8000d04:	f015 0506 	ands.w	r5, r5, #6
 8000d08:	d106      	bne.n	8000d18 <_printf_common+0x48>
 8000d0a:	f104 0a19 	add.w	sl, r4, #25
 8000d0e:	68e3      	ldr	r3, [r4, #12]
 8000d10:	6832      	ldr	r2, [r6, #0]
 8000d12:	1a9b      	subs	r3, r3, r2
 8000d14:	42ab      	cmp	r3, r5
 8000d16:	dc26      	bgt.n	8000d66 <_printf_common+0x96>
 8000d18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000d1c:	6822      	ldr	r2, [r4, #0]
 8000d1e:	3b00      	subs	r3, #0
 8000d20:	bf18      	it	ne
 8000d22:	2301      	movne	r3, #1
 8000d24:	0692      	lsls	r2, r2, #26
 8000d26:	d42b      	bmi.n	8000d80 <_printf_common+0xb0>
 8000d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d2c:	4641      	mov	r1, r8
 8000d2e:	4638      	mov	r0, r7
 8000d30:	47c8      	blx	r9
 8000d32:	3001      	adds	r0, #1
 8000d34:	d01e      	beq.n	8000d74 <_printf_common+0xa4>
 8000d36:	6823      	ldr	r3, [r4, #0]
 8000d38:	6922      	ldr	r2, [r4, #16]
 8000d3a:	f003 0306 	and.w	r3, r3, #6
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf02      	ittt	eq
 8000d42:	68e5      	ldreq	r5, [r4, #12]
 8000d44:	6833      	ldreq	r3, [r6, #0]
 8000d46:	1aed      	subeq	r5, r5, r3
 8000d48:	68a3      	ldr	r3, [r4, #8]
 8000d4a:	bf0c      	ite	eq
 8000d4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d50:	2500      	movne	r5, #0
 8000d52:	4293      	cmp	r3, r2
 8000d54:	bfc4      	itt	gt
 8000d56:	1a9b      	subgt	r3, r3, r2
 8000d58:	18ed      	addgt	r5, r5, r3
 8000d5a:	2600      	movs	r6, #0
 8000d5c:	341a      	adds	r4, #26
 8000d5e:	42b5      	cmp	r5, r6
 8000d60:	d11a      	bne.n	8000d98 <_printf_common+0xc8>
 8000d62:	2000      	movs	r0, #0
 8000d64:	e008      	b.n	8000d78 <_printf_common+0xa8>
 8000d66:	2301      	movs	r3, #1
 8000d68:	4652      	mov	r2, sl
 8000d6a:	4641      	mov	r1, r8
 8000d6c:	4638      	mov	r0, r7
 8000d6e:	47c8      	blx	r9
 8000d70:	3001      	adds	r0, #1
 8000d72:	d103      	bne.n	8000d7c <_printf_common+0xac>
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7c:	3501      	adds	r5, #1
 8000d7e:	e7c6      	b.n	8000d0e <_printf_common+0x3e>
 8000d80:	18e1      	adds	r1, r4, r3
 8000d82:	1c5a      	adds	r2, r3, #1
 8000d84:	2030      	movs	r0, #48	@ 0x30
 8000d86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d8a:	4422      	add	r2, r4
 8000d8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d94:	3302      	adds	r3, #2
 8000d96:	e7c7      	b.n	8000d28 <_printf_common+0x58>
 8000d98:	2301      	movs	r3, #1
 8000d9a:	4622      	mov	r2, r4
 8000d9c:	4641      	mov	r1, r8
 8000d9e:	4638      	mov	r0, r7
 8000da0:	47c8      	blx	r9
 8000da2:	3001      	adds	r0, #1
 8000da4:	d0e6      	beq.n	8000d74 <_printf_common+0xa4>
 8000da6:	3601      	adds	r6, #1
 8000da8:	e7d9      	b.n	8000d5e <_printf_common+0x8e>
	...

08000dac <_printf_i>:
 8000dac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000db0:	7e0f      	ldrb	r7, [r1, #24]
 8000db2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000db4:	2f78      	cmp	r7, #120	@ 0x78
 8000db6:	4691      	mov	r9, r2
 8000db8:	4680      	mov	r8, r0
 8000dba:	460c      	mov	r4, r1
 8000dbc:	469a      	mov	sl, r3
 8000dbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000dc2:	d807      	bhi.n	8000dd4 <_printf_i+0x28>
 8000dc4:	2f62      	cmp	r7, #98	@ 0x62
 8000dc6:	d80a      	bhi.n	8000dde <_printf_i+0x32>
 8000dc8:	2f00      	cmp	r7, #0
 8000dca:	f000 80d1 	beq.w	8000f70 <_printf_i+0x1c4>
 8000dce:	2f58      	cmp	r7, #88	@ 0x58
 8000dd0:	f000 80b8 	beq.w	8000f44 <_printf_i+0x198>
 8000dd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000dd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000ddc:	e03a      	b.n	8000e54 <_printf_i+0xa8>
 8000dde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000de2:	2b15      	cmp	r3, #21
 8000de4:	d8f6      	bhi.n	8000dd4 <_printf_i+0x28>
 8000de6:	a101      	add	r1, pc, #4	@ (adr r1, 8000dec <_printf_i+0x40>)
 8000de8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dec:	08000e45 	.word	0x08000e45
 8000df0:	08000e59 	.word	0x08000e59
 8000df4:	08000dd5 	.word	0x08000dd5
 8000df8:	08000dd5 	.word	0x08000dd5
 8000dfc:	08000dd5 	.word	0x08000dd5
 8000e00:	08000dd5 	.word	0x08000dd5
 8000e04:	08000e59 	.word	0x08000e59
 8000e08:	08000dd5 	.word	0x08000dd5
 8000e0c:	08000dd5 	.word	0x08000dd5
 8000e10:	08000dd5 	.word	0x08000dd5
 8000e14:	08000dd5 	.word	0x08000dd5
 8000e18:	08000f57 	.word	0x08000f57
 8000e1c:	08000e83 	.word	0x08000e83
 8000e20:	08000f11 	.word	0x08000f11
 8000e24:	08000dd5 	.word	0x08000dd5
 8000e28:	08000dd5 	.word	0x08000dd5
 8000e2c:	08000f79 	.word	0x08000f79
 8000e30:	08000dd5 	.word	0x08000dd5
 8000e34:	08000e83 	.word	0x08000e83
 8000e38:	08000dd5 	.word	0x08000dd5
 8000e3c:	08000dd5 	.word	0x08000dd5
 8000e40:	08000f19 	.word	0x08000f19
 8000e44:	6833      	ldr	r3, [r6, #0]
 8000e46:	1d1a      	adds	r2, r3, #4
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	6032      	str	r2, [r6, #0]
 8000e4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e50:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e54:	2301      	movs	r3, #1
 8000e56:	e09c      	b.n	8000f92 <_printf_i+0x1e6>
 8000e58:	6833      	ldr	r3, [r6, #0]
 8000e5a:	6820      	ldr	r0, [r4, #0]
 8000e5c:	1d19      	adds	r1, r3, #4
 8000e5e:	6031      	str	r1, [r6, #0]
 8000e60:	0606      	lsls	r6, r0, #24
 8000e62:	d501      	bpl.n	8000e68 <_printf_i+0xbc>
 8000e64:	681d      	ldr	r5, [r3, #0]
 8000e66:	e003      	b.n	8000e70 <_printf_i+0xc4>
 8000e68:	0645      	lsls	r5, r0, #25
 8000e6a:	d5fb      	bpl.n	8000e64 <_printf_i+0xb8>
 8000e6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e70:	2d00      	cmp	r5, #0
 8000e72:	da03      	bge.n	8000e7c <_printf_i+0xd0>
 8000e74:	232d      	movs	r3, #45	@ 0x2d
 8000e76:	426d      	negs	r5, r5
 8000e78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e7c:	4858      	ldr	r0, [pc, #352]	@ (8000fe0 <_printf_i+0x234>)
 8000e7e:	230a      	movs	r3, #10
 8000e80:	e011      	b.n	8000ea6 <_printf_i+0xfa>
 8000e82:	6821      	ldr	r1, [r4, #0]
 8000e84:	6833      	ldr	r3, [r6, #0]
 8000e86:	0608      	lsls	r0, r1, #24
 8000e88:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e8c:	d402      	bmi.n	8000e94 <_printf_i+0xe8>
 8000e8e:	0649      	lsls	r1, r1, #25
 8000e90:	bf48      	it	mi
 8000e92:	b2ad      	uxthmi	r5, r5
 8000e94:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e96:	4852      	ldr	r0, [pc, #328]	@ (8000fe0 <_printf_i+0x234>)
 8000e98:	6033      	str	r3, [r6, #0]
 8000e9a:	bf14      	ite	ne
 8000e9c:	230a      	movne	r3, #10
 8000e9e:	2308      	moveq	r3, #8
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000ea6:	6866      	ldr	r6, [r4, #4]
 8000ea8:	60a6      	str	r6, [r4, #8]
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	db05      	blt.n	8000eba <_printf_i+0x10e>
 8000eae:	6821      	ldr	r1, [r4, #0]
 8000eb0:	432e      	orrs	r6, r5
 8000eb2:	f021 0104 	bic.w	r1, r1, #4
 8000eb6:	6021      	str	r1, [r4, #0]
 8000eb8:	d04b      	beq.n	8000f52 <_printf_i+0x1a6>
 8000eba:	4616      	mov	r6, r2
 8000ebc:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ec0:	fb03 5711 	mls	r7, r3, r1, r5
 8000ec4:	5dc7      	ldrb	r7, [r0, r7]
 8000ec6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000eca:	462f      	mov	r7, r5
 8000ecc:	42bb      	cmp	r3, r7
 8000ece:	460d      	mov	r5, r1
 8000ed0:	d9f4      	bls.n	8000ebc <_printf_i+0x110>
 8000ed2:	2b08      	cmp	r3, #8
 8000ed4:	d10b      	bne.n	8000eee <_printf_i+0x142>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	07df      	lsls	r7, r3, #31
 8000eda:	d508      	bpl.n	8000eee <_printf_i+0x142>
 8000edc:	6923      	ldr	r3, [r4, #16]
 8000ede:	6861      	ldr	r1, [r4, #4]
 8000ee0:	4299      	cmp	r1, r3
 8000ee2:	bfde      	ittt	le
 8000ee4:	2330      	movle	r3, #48	@ 0x30
 8000ee6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000eea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000eee:	1b92      	subs	r2, r2, r6
 8000ef0:	6122      	str	r2, [r4, #16]
 8000ef2:	f8cd a000 	str.w	sl, [sp]
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	aa03      	add	r2, sp, #12
 8000efa:	4621      	mov	r1, r4
 8000efc:	4640      	mov	r0, r8
 8000efe:	f7ff fee7 	bl	8000cd0 <_printf_common>
 8000f02:	3001      	adds	r0, #1
 8000f04:	d14a      	bne.n	8000f9c <_printf_i+0x1f0>
 8000f06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f0a:	b004      	add	sp, #16
 8000f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	f043 0320 	orr.w	r3, r3, #32
 8000f16:	6023      	str	r3, [r4, #0]
 8000f18:	4832      	ldr	r0, [pc, #200]	@ (8000fe4 <_printf_i+0x238>)
 8000f1a:	2778      	movs	r7, #120	@ 0x78
 8000f1c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f20:	6823      	ldr	r3, [r4, #0]
 8000f22:	6831      	ldr	r1, [r6, #0]
 8000f24:	061f      	lsls	r7, r3, #24
 8000f26:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f2a:	d402      	bmi.n	8000f32 <_printf_i+0x186>
 8000f2c:	065f      	lsls	r7, r3, #25
 8000f2e:	bf48      	it	mi
 8000f30:	b2ad      	uxthmi	r5, r5
 8000f32:	6031      	str	r1, [r6, #0]
 8000f34:	07d9      	lsls	r1, r3, #31
 8000f36:	bf44      	itt	mi
 8000f38:	f043 0320 	orrmi.w	r3, r3, #32
 8000f3c:	6023      	strmi	r3, [r4, #0]
 8000f3e:	b11d      	cbz	r5, 8000f48 <_printf_i+0x19c>
 8000f40:	2310      	movs	r3, #16
 8000f42:	e7ad      	b.n	8000ea0 <_printf_i+0xf4>
 8000f44:	4826      	ldr	r0, [pc, #152]	@ (8000fe0 <_printf_i+0x234>)
 8000f46:	e7e9      	b.n	8000f1c <_printf_i+0x170>
 8000f48:	6823      	ldr	r3, [r4, #0]
 8000f4a:	f023 0320 	bic.w	r3, r3, #32
 8000f4e:	6023      	str	r3, [r4, #0]
 8000f50:	e7f6      	b.n	8000f40 <_printf_i+0x194>
 8000f52:	4616      	mov	r6, r2
 8000f54:	e7bd      	b.n	8000ed2 <_printf_i+0x126>
 8000f56:	6833      	ldr	r3, [r6, #0]
 8000f58:	6825      	ldr	r5, [r4, #0]
 8000f5a:	6961      	ldr	r1, [r4, #20]
 8000f5c:	1d18      	adds	r0, r3, #4
 8000f5e:	6030      	str	r0, [r6, #0]
 8000f60:	062e      	lsls	r6, r5, #24
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	d501      	bpl.n	8000f6a <_printf_i+0x1be>
 8000f66:	6019      	str	r1, [r3, #0]
 8000f68:	e002      	b.n	8000f70 <_printf_i+0x1c4>
 8000f6a:	0668      	lsls	r0, r5, #25
 8000f6c:	d5fb      	bpl.n	8000f66 <_printf_i+0x1ba>
 8000f6e:	8019      	strh	r1, [r3, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	6123      	str	r3, [r4, #16]
 8000f74:	4616      	mov	r6, r2
 8000f76:	e7bc      	b.n	8000ef2 <_printf_i+0x146>
 8000f78:	6833      	ldr	r3, [r6, #0]
 8000f7a:	1d1a      	adds	r2, r3, #4
 8000f7c:	6032      	str	r2, [r6, #0]
 8000f7e:	681e      	ldr	r6, [r3, #0]
 8000f80:	6862      	ldr	r2, [r4, #4]
 8000f82:	2100      	movs	r1, #0
 8000f84:	4630      	mov	r0, r6
 8000f86:	f7ff f92b 	bl	80001e0 <memchr>
 8000f8a:	b108      	cbz	r0, 8000f90 <_printf_i+0x1e4>
 8000f8c:	1b80      	subs	r0, r0, r6
 8000f8e:	6060      	str	r0, [r4, #4]
 8000f90:	6863      	ldr	r3, [r4, #4]
 8000f92:	6123      	str	r3, [r4, #16]
 8000f94:	2300      	movs	r3, #0
 8000f96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f9a:	e7aa      	b.n	8000ef2 <_printf_i+0x146>
 8000f9c:	6923      	ldr	r3, [r4, #16]
 8000f9e:	4632      	mov	r2, r6
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	47d0      	blx	sl
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d0ad      	beq.n	8000f06 <_printf_i+0x15a>
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	079b      	lsls	r3, r3, #30
 8000fae:	d413      	bmi.n	8000fd8 <_printf_i+0x22c>
 8000fb0:	68e0      	ldr	r0, [r4, #12]
 8000fb2:	9b03      	ldr	r3, [sp, #12]
 8000fb4:	4298      	cmp	r0, r3
 8000fb6:	bfb8      	it	lt
 8000fb8:	4618      	movlt	r0, r3
 8000fba:	e7a6      	b.n	8000f0a <_printf_i+0x15e>
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	4632      	mov	r2, r6
 8000fc0:	4649      	mov	r1, r9
 8000fc2:	4640      	mov	r0, r8
 8000fc4:	47d0      	blx	sl
 8000fc6:	3001      	adds	r0, #1
 8000fc8:	d09d      	beq.n	8000f06 <_printf_i+0x15a>
 8000fca:	3501      	adds	r5, #1
 8000fcc:	68e3      	ldr	r3, [r4, #12]
 8000fce:	9903      	ldr	r1, [sp, #12]
 8000fd0:	1a5b      	subs	r3, r3, r1
 8000fd2:	42ab      	cmp	r3, r5
 8000fd4:	dcf2      	bgt.n	8000fbc <_printf_i+0x210>
 8000fd6:	e7eb      	b.n	8000fb0 <_printf_i+0x204>
 8000fd8:	2500      	movs	r5, #0
 8000fda:	f104 0619 	add.w	r6, r4, #25
 8000fde:	e7f5      	b.n	8000fcc <_printf_i+0x220>
 8000fe0:	08001589 	.word	0x08001589
 8000fe4:	0800159a 	.word	0x0800159a

08000fe8 <__sflush_r>:
 8000fe8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff0:	0716      	lsls	r6, r2, #28
 8000ff2:	4605      	mov	r5, r0
 8000ff4:	460c      	mov	r4, r1
 8000ff6:	d454      	bmi.n	80010a2 <__sflush_r+0xba>
 8000ff8:	684b      	ldr	r3, [r1, #4]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	dc02      	bgt.n	8001004 <__sflush_r+0x1c>
 8000ffe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd48      	ble.n	8001096 <__sflush_r+0xae>
 8001004:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001006:	2e00      	cmp	r6, #0
 8001008:	d045      	beq.n	8001096 <__sflush_r+0xae>
 800100a:	2300      	movs	r3, #0
 800100c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001010:	682f      	ldr	r7, [r5, #0]
 8001012:	6a21      	ldr	r1, [r4, #32]
 8001014:	602b      	str	r3, [r5, #0]
 8001016:	d030      	beq.n	800107a <__sflush_r+0x92>
 8001018:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800101a:	89a3      	ldrh	r3, [r4, #12]
 800101c:	0759      	lsls	r1, r3, #29
 800101e:	d505      	bpl.n	800102c <__sflush_r+0x44>
 8001020:	6863      	ldr	r3, [r4, #4]
 8001022:	1ad2      	subs	r2, r2, r3
 8001024:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001026:	b10b      	cbz	r3, 800102c <__sflush_r+0x44>
 8001028:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800102a:	1ad2      	subs	r2, r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001030:	6a21      	ldr	r1, [r4, #32]
 8001032:	4628      	mov	r0, r5
 8001034:	47b0      	blx	r6
 8001036:	1c43      	adds	r3, r0, #1
 8001038:	89a3      	ldrh	r3, [r4, #12]
 800103a:	d106      	bne.n	800104a <__sflush_r+0x62>
 800103c:	6829      	ldr	r1, [r5, #0]
 800103e:	291d      	cmp	r1, #29
 8001040:	d82b      	bhi.n	800109a <__sflush_r+0xb2>
 8001042:	4a2a      	ldr	r2, [pc, #168]	@ (80010ec <__sflush_r+0x104>)
 8001044:	40ca      	lsrs	r2, r1
 8001046:	07d6      	lsls	r6, r2, #31
 8001048:	d527      	bpl.n	800109a <__sflush_r+0xb2>
 800104a:	2200      	movs	r2, #0
 800104c:	6062      	str	r2, [r4, #4]
 800104e:	04d9      	lsls	r1, r3, #19
 8001050:	6922      	ldr	r2, [r4, #16]
 8001052:	6022      	str	r2, [r4, #0]
 8001054:	d504      	bpl.n	8001060 <__sflush_r+0x78>
 8001056:	1c42      	adds	r2, r0, #1
 8001058:	d101      	bne.n	800105e <__sflush_r+0x76>
 800105a:	682b      	ldr	r3, [r5, #0]
 800105c:	b903      	cbnz	r3, 8001060 <__sflush_r+0x78>
 800105e:	6560      	str	r0, [r4, #84]	@ 0x54
 8001060:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001062:	602f      	str	r7, [r5, #0]
 8001064:	b1b9      	cbz	r1, 8001096 <__sflush_r+0xae>
 8001066:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800106a:	4299      	cmp	r1, r3
 800106c:	d002      	beq.n	8001074 <__sflush_r+0x8c>
 800106e:	4628      	mov	r0, r5
 8001070:	f000 fa24 	bl	80014bc <_free_r>
 8001074:	2300      	movs	r3, #0
 8001076:	6363      	str	r3, [r4, #52]	@ 0x34
 8001078:	e00d      	b.n	8001096 <__sflush_r+0xae>
 800107a:	2301      	movs	r3, #1
 800107c:	4628      	mov	r0, r5
 800107e:	47b0      	blx	r6
 8001080:	4602      	mov	r2, r0
 8001082:	1c50      	adds	r0, r2, #1
 8001084:	d1c9      	bne.n	800101a <__sflush_r+0x32>
 8001086:	682b      	ldr	r3, [r5, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d0c6      	beq.n	800101a <__sflush_r+0x32>
 800108c:	2b1d      	cmp	r3, #29
 800108e:	d001      	beq.n	8001094 <__sflush_r+0xac>
 8001090:	2b16      	cmp	r3, #22
 8001092:	d11e      	bne.n	80010d2 <__sflush_r+0xea>
 8001094:	602f      	str	r7, [r5, #0]
 8001096:	2000      	movs	r0, #0
 8001098:	e022      	b.n	80010e0 <__sflush_r+0xf8>
 800109a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800109e:	b21b      	sxth	r3, r3
 80010a0:	e01b      	b.n	80010da <__sflush_r+0xf2>
 80010a2:	690f      	ldr	r7, [r1, #16]
 80010a4:	2f00      	cmp	r7, #0
 80010a6:	d0f6      	beq.n	8001096 <__sflush_r+0xae>
 80010a8:	0793      	lsls	r3, r2, #30
 80010aa:	680e      	ldr	r6, [r1, #0]
 80010ac:	bf08      	it	eq
 80010ae:	694b      	ldreq	r3, [r1, #20]
 80010b0:	600f      	str	r7, [r1, #0]
 80010b2:	bf18      	it	ne
 80010b4:	2300      	movne	r3, #0
 80010b6:	eba6 0807 	sub.w	r8, r6, r7
 80010ba:	608b      	str	r3, [r1, #8]
 80010bc:	f1b8 0f00 	cmp.w	r8, #0
 80010c0:	dde9      	ble.n	8001096 <__sflush_r+0xae>
 80010c2:	6a21      	ldr	r1, [r4, #32]
 80010c4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80010c6:	4643      	mov	r3, r8
 80010c8:	463a      	mov	r2, r7
 80010ca:	4628      	mov	r0, r5
 80010cc:	47b0      	blx	r6
 80010ce:	2800      	cmp	r0, #0
 80010d0:	dc08      	bgt.n	80010e4 <__sflush_r+0xfc>
 80010d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80010d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010da:	81a3      	strh	r3, [r4, #12]
 80010dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010e4:	4407      	add	r7, r0
 80010e6:	eba8 0800 	sub.w	r8, r8, r0
 80010ea:	e7e7      	b.n	80010bc <__sflush_r+0xd4>
 80010ec:	20400001 	.word	0x20400001

080010f0 <_fflush_r>:
 80010f0:	b538      	push	{r3, r4, r5, lr}
 80010f2:	690b      	ldr	r3, [r1, #16]
 80010f4:	4605      	mov	r5, r0
 80010f6:	460c      	mov	r4, r1
 80010f8:	b913      	cbnz	r3, 8001100 <_fflush_r+0x10>
 80010fa:	2500      	movs	r5, #0
 80010fc:	4628      	mov	r0, r5
 80010fe:	bd38      	pop	{r3, r4, r5, pc}
 8001100:	b118      	cbz	r0, 800110a <_fflush_r+0x1a>
 8001102:	6a03      	ldr	r3, [r0, #32]
 8001104:	b90b      	cbnz	r3, 800110a <_fflush_r+0x1a>
 8001106:	f7ff fb83 	bl	8000810 <__sinit>
 800110a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d0f3      	beq.n	80010fa <_fflush_r+0xa>
 8001112:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001114:	07d0      	lsls	r0, r2, #31
 8001116:	d404      	bmi.n	8001122 <_fflush_r+0x32>
 8001118:	0599      	lsls	r1, r3, #22
 800111a:	d402      	bmi.n	8001122 <_fflush_r+0x32>
 800111c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800111e:	f7ff fbf2 	bl	8000906 <__retarget_lock_acquire_recursive>
 8001122:	4628      	mov	r0, r5
 8001124:	4621      	mov	r1, r4
 8001126:	f7ff ff5f 	bl	8000fe8 <__sflush_r>
 800112a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800112c:	07da      	lsls	r2, r3, #31
 800112e:	4605      	mov	r5, r0
 8001130:	d4e4      	bmi.n	80010fc <_fflush_r+0xc>
 8001132:	89a3      	ldrh	r3, [r4, #12]
 8001134:	059b      	lsls	r3, r3, #22
 8001136:	d4e1      	bmi.n	80010fc <_fflush_r+0xc>
 8001138:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800113a:	f7ff fbe5 	bl	8000908 <__retarget_lock_release_recursive>
 800113e:	e7dd      	b.n	80010fc <_fflush_r+0xc>

08001140 <__malloc_lock>:
 8001140:	4801      	ldr	r0, [pc, #4]	@ (8001148 <__malloc_lock+0x8>)
 8001142:	f7ff bbe0 	b.w	8000906 <__retarget_lock_acquire_recursive>
 8001146:	bf00      	nop
 8001148:	200001e4 	.word	0x200001e4

0800114c <__malloc_unlock>:
 800114c:	4801      	ldr	r0, [pc, #4]	@ (8001154 <__malloc_unlock+0x8>)
 800114e:	f7ff bbdb 	b.w	8000908 <__retarget_lock_release_recursive>
 8001152:	bf00      	nop
 8001154:	200001e4 	.word	0x200001e4

08001158 <__sread>:
 8001158:	b510      	push	{r4, lr}
 800115a:	460c      	mov	r4, r1
 800115c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001160:	f000 f956 	bl	8001410 <_read_r>
 8001164:	2800      	cmp	r0, #0
 8001166:	bfab      	itete	ge
 8001168:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800116a:	89a3      	ldrhlt	r3, [r4, #12]
 800116c:	181b      	addge	r3, r3, r0
 800116e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001172:	bfac      	ite	ge
 8001174:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001176:	81a3      	strhlt	r3, [r4, #12]
 8001178:	bd10      	pop	{r4, pc}

0800117a <__swrite>:
 800117a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800117e:	461f      	mov	r7, r3
 8001180:	898b      	ldrh	r3, [r1, #12]
 8001182:	05db      	lsls	r3, r3, #23
 8001184:	4605      	mov	r5, r0
 8001186:	460c      	mov	r4, r1
 8001188:	4616      	mov	r6, r2
 800118a:	d505      	bpl.n	8001198 <__swrite+0x1e>
 800118c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001190:	2302      	movs	r3, #2
 8001192:	2200      	movs	r2, #0
 8001194:	f000 f92a 	bl	80013ec <_lseek_r>
 8001198:	89a3      	ldrh	r3, [r4, #12]
 800119a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800119e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80011a2:	81a3      	strh	r3, [r4, #12]
 80011a4:	4632      	mov	r2, r6
 80011a6:	463b      	mov	r3, r7
 80011a8:	4628      	mov	r0, r5
 80011aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80011ae:	f000 b951 	b.w	8001454 <_write_r>

080011b2 <__sseek>:
 80011b2:	b510      	push	{r4, lr}
 80011b4:	460c      	mov	r4, r1
 80011b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011ba:	f000 f917 	bl	80013ec <_lseek_r>
 80011be:	1c43      	adds	r3, r0, #1
 80011c0:	89a3      	ldrh	r3, [r4, #12]
 80011c2:	bf15      	itete	ne
 80011c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80011c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80011ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80011ce:	81a3      	strheq	r3, [r4, #12]
 80011d0:	bf18      	it	ne
 80011d2:	81a3      	strhne	r3, [r4, #12]
 80011d4:	bd10      	pop	{r4, pc}

080011d6 <__sclose>:
 80011d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011da:	f000 b94d 	b.w	8001478 <_close_r>

080011de <__swbuf_r>:
 80011de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011e0:	460e      	mov	r6, r1
 80011e2:	4614      	mov	r4, r2
 80011e4:	4605      	mov	r5, r0
 80011e6:	b118      	cbz	r0, 80011f0 <__swbuf_r+0x12>
 80011e8:	6a03      	ldr	r3, [r0, #32]
 80011ea:	b90b      	cbnz	r3, 80011f0 <__swbuf_r+0x12>
 80011ec:	f7ff fb10 	bl	8000810 <__sinit>
 80011f0:	69a3      	ldr	r3, [r4, #24]
 80011f2:	60a3      	str	r3, [r4, #8]
 80011f4:	89a3      	ldrh	r3, [r4, #12]
 80011f6:	071a      	lsls	r2, r3, #28
 80011f8:	d501      	bpl.n	80011fe <__swbuf_r+0x20>
 80011fa:	6923      	ldr	r3, [r4, #16]
 80011fc:	b943      	cbnz	r3, 8001210 <__swbuf_r+0x32>
 80011fe:	4621      	mov	r1, r4
 8001200:	4628      	mov	r0, r5
 8001202:	f000 f82b 	bl	800125c <__swsetup_r>
 8001206:	b118      	cbz	r0, 8001210 <__swbuf_r+0x32>
 8001208:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800120c:	4638      	mov	r0, r7
 800120e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001210:	6823      	ldr	r3, [r4, #0]
 8001212:	6922      	ldr	r2, [r4, #16]
 8001214:	1a98      	subs	r0, r3, r2
 8001216:	6963      	ldr	r3, [r4, #20]
 8001218:	b2f6      	uxtb	r6, r6
 800121a:	4283      	cmp	r3, r0
 800121c:	4637      	mov	r7, r6
 800121e:	dc05      	bgt.n	800122c <__swbuf_r+0x4e>
 8001220:	4621      	mov	r1, r4
 8001222:	4628      	mov	r0, r5
 8001224:	f7ff ff64 	bl	80010f0 <_fflush_r>
 8001228:	2800      	cmp	r0, #0
 800122a:	d1ed      	bne.n	8001208 <__swbuf_r+0x2a>
 800122c:	68a3      	ldr	r3, [r4, #8]
 800122e:	3b01      	subs	r3, #1
 8001230:	60a3      	str	r3, [r4, #8]
 8001232:	6823      	ldr	r3, [r4, #0]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	6022      	str	r2, [r4, #0]
 8001238:	701e      	strb	r6, [r3, #0]
 800123a:	6962      	ldr	r2, [r4, #20]
 800123c:	1c43      	adds	r3, r0, #1
 800123e:	429a      	cmp	r2, r3
 8001240:	d004      	beq.n	800124c <__swbuf_r+0x6e>
 8001242:	89a3      	ldrh	r3, [r4, #12]
 8001244:	07db      	lsls	r3, r3, #31
 8001246:	d5e1      	bpl.n	800120c <__swbuf_r+0x2e>
 8001248:	2e0a      	cmp	r6, #10
 800124a:	d1df      	bne.n	800120c <__swbuf_r+0x2e>
 800124c:	4621      	mov	r1, r4
 800124e:	4628      	mov	r0, r5
 8001250:	f7ff ff4e 	bl	80010f0 <_fflush_r>
 8001254:	2800      	cmp	r0, #0
 8001256:	d0d9      	beq.n	800120c <__swbuf_r+0x2e>
 8001258:	e7d6      	b.n	8001208 <__swbuf_r+0x2a>
	...

0800125c <__swsetup_r>:
 800125c:	b538      	push	{r3, r4, r5, lr}
 800125e:	4b29      	ldr	r3, [pc, #164]	@ (8001304 <__swsetup_r+0xa8>)
 8001260:	4605      	mov	r5, r0
 8001262:	6818      	ldr	r0, [r3, #0]
 8001264:	460c      	mov	r4, r1
 8001266:	b118      	cbz	r0, 8001270 <__swsetup_r+0x14>
 8001268:	6a03      	ldr	r3, [r0, #32]
 800126a:	b90b      	cbnz	r3, 8001270 <__swsetup_r+0x14>
 800126c:	f7ff fad0 	bl	8000810 <__sinit>
 8001270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001274:	0719      	lsls	r1, r3, #28
 8001276:	d422      	bmi.n	80012be <__swsetup_r+0x62>
 8001278:	06da      	lsls	r2, r3, #27
 800127a:	d407      	bmi.n	800128c <__swsetup_r+0x30>
 800127c:	2209      	movs	r2, #9
 800127e:	602a      	str	r2, [r5, #0]
 8001280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001284:	81a3      	strh	r3, [r4, #12]
 8001286:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800128a:	e033      	b.n	80012f4 <__swsetup_r+0x98>
 800128c:	0758      	lsls	r0, r3, #29
 800128e:	d512      	bpl.n	80012b6 <__swsetup_r+0x5a>
 8001290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001292:	b141      	cbz	r1, 80012a6 <__swsetup_r+0x4a>
 8001294:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001298:	4299      	cmp	r1, r3
 800129a:	d002      	beq.n	80012a2 <__swsetup_r+0x46>
 800129c:	4628      	mov	r0, r5
 800129e:	f000 f90d 	bl	80014bc <_free_r>
 80012a2:	2300      	movs	r3, #0
 80012a4:	6363      	str	r3, [r4, #52]	@ 0x34
 80012a6:	89a3      	ldrh	r3, [r4, #12]
 80012a8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80012ac:	81a3      	strh	r3, [r4, #12]
 80012ae:	2300      	movs	r3, #0
 80012b0:	6063      	str	r3, [r4, #4]
 80012b2:	6923      	ldr	r3, [r4, #16]
 80012b4:	6023      	str	r3, [r4, #0]
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	f043 0308 	orr.w	r3, r3, #8
 80012bc:	81a3      	strh	r3, [r4, #12]
 80012be:	6923      	ldr	r3, [r4, #16]
 80012c0:	b94b      	cbnz	r3, 80012d6 <__swsetup_r+0x7a>
 80012c2:	89a3      	ldrh	r3, [r4, #12]
 80012c4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80012c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80012cc:	d003      	beq.n	80012d6 <__swsetup_r+0x7a>
 80012ce:	4621      	mov	r1, r4
 80012d0:	4628      	mov	r0, r5
 80012d2:	f000 f83f 	bl	8001354 <__smakebuf_r>
 80012d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012da:	f013 0201 	ands.w	r2, r3, #1
 80012de:	d00a      	beq.n	80012f6 <__swsetup_r+0x9a>
 80012e0:	2200      	movs	r2, #0
 80012e2:	60a2      	str	r2, [r4, #8]
 80012e4:	6962      	ldr	r2, [r4, #20]
 80012e6:	4252      	negs	r2, r2
 80012e8:	61a2      	str	r2, [r4, #24]
 80012ea:	6922      	ldr	r2, [r4, #16]
 80012ec:	b942      	cbnz	r2, 8001300 <__swsetup_r+0xa4>
 80012ee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80012f2:	d1c5      	bne.n	8001280 <__swsetup_r+0x24>
 80012f4:	bd38      	pop	{r3, r4, r5, pc}
 80012f6:	0799      	lsls	r1, r3, #30
 80012f8:	bf58      	it	pl
 80012fa:	6962      	ldrpl	r2, [r4, #20]
 80012fc:	60a2      	str	r2, [r4, #8]
 80012fe:	e7f4      	b.n	80012ea <__swsetup_r+0x8e>
 8001300:	2000      	movs	r0, #0
 8001302:	e7f7      	b.n	80012f4 <__swsetup_r+0x98>
 8001304:	20000034 	.word	0x20000034

08001308 <__swhatbuf_r>:
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	460c      	mov	r4, r1
 800130c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001310:	2900      	cmp	r1, #0
 8001312:	b096      	sub	sp, #88	@ 0x58
 8001314:	4615      	mov	r5, r2
 8001316:	461e      	mov	r6, r3
 8001318:	da0d      	bge.n	8001336 <__swhatbuf_r+0x2e>
 800131a:	89a3      	ldrh	r3, [r4, #12]
 800131c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001320:	f04f 0100 	mov.w	r1, #0
 8001324:	bf14      	ite	ne
 8001326:	2340      	movne	r3, #64	@ 0x40
 8001328:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800132c:	2000      	movs	r0, #0
 800132e:	6031      	str	r1, [r6, #0]
 8001330:	602b      	str	r3, [r5, #0]
 8001332:	b016      	add	sp, #88	@ 0x58
 8001334:	bd70      	pop	{r4, r5, r6, pc}
 8001336:	466a      	mov	r2, sp
 8001338:	f000 f8ae 	bl	8001498 <_fstat_r>
 800133c:	2800      	cmp	r0, #0
 800133e:	dbec      	blt.n	800131a <__swhatbuf_r+0x12>
 8001340:	9901      	ldr	r1, [sp, #4]
 8001342:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001346:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800134a:	4259      	negs	r1, r3
 800134c:	4159      	adcs	r1, r3
 800134e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001352:	e7eb      	b.n	800132c <__swhatbuf_r+0x24>

08001354 <__smakebuf_r>:
 8001354:	898b      	ldrh	r3, [r1, #12]
 8001356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001358:	079d      	lsls	r5, r3, #30
 800135a:	4606      	mov	r6, r0
 800135c:	460c      	mov	r4, r1
 800135e:	d507      	bpl.n	8001370 <__smakebuf_r+0x1c>
 8001360:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	6123      	str	r3, [r4, #16]
 8001368:	2301      	movs	r3, #1
 800136a:	6163      	str	r3, [r4, #20]
 800136c:	b003      	add	sp, #12
 800136e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001370:	ab01      	add	r3, sp, #4
 8001372:	466a      	mov	r2, sp
 8001374:	f7ff ffc8 	bl	8001308 <__swhatbuf_r>
 8001378:	9f00      	ldr	r7, [sp, #0]
 800137a:	4605      	mov	r5, r0
 800137c:	4639      	mov	r1, r7
 800137e:	4630      	mov	r0, r6
 8001380:	f7ff fc26 	bl	8000bd0 <_malloc_r>
 8001384:	b948      	cbnz	r0, 800139a <__smakebuf_r+0x46>
 8001386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800138a:	059a      	lsls	r2, r3, #22
 800138c:	d4ee      	bmi.n	800136c <__smakebuf_r+0x18>
 800138e:	f023 0303 	bic.w	r3, r3, #3
 8001392:	f043 0302 	orr.w	r3, r3, #2
 8001396:	81a3      	strh	r3, [r4, #12]
 8001398:	e7e2      	b.n	8001360 <__smakebuf_r+0xc>
 800139a:	89a3      	ldrh	r3, [r4, #12]
 800139c:	6020      	str	r0, [r4, #0]
 800139e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013a2:	81a3      	strh	r3, [r4, #12]
 80013a4:	9b01      	ldr	r3, [sp, #4]
 80013a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80013aa:	b15b      	cbz	r3, 80013c4 <__smakebuf_r+0x70>
 80013ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013b0:	4630      	mov	r0, r6
 80013b2:	f000 f80b 	bl	80013cc <_isatty_r>
 80013b6:	b128      	cbz	r0, 80013c4 <__smakebuf_r+0x70>
 80013b8:	89a3      	ldrh	r3, [r4, #12]
 80013ba:	f023 0303 	bic.w	r3, r3, #3
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	81a3      	strh	r3, [r4, #12]
 80013c4:	89a3      	ldrh	r3, [r4, #12]
 80013c6:	431d      	orrs	r5, r3
 80013c8:	81a5      	strh	r5, [r4, #12]
 80013ca:	e7cf      	b.n	800136c <__smakebuf_r+0x18>

080013cc <_isatty_r>:
 80013cc:	b538      	push	{r3, r4, r5, lr}
 80013ce:	4d06      	ldr	r5, [pc, #24]	@ (80013e8 <_isatty_r+0x1c>)
 80013d0:	2300      	movs	r3, #0
 80013d2:	4604      	mov	r4, r0
 80013d4:	4608      	mov	r0, r1
 80013d6:	602b      	str	r3, [r5, #0]
 80013d8:	f7ff f916 	bl	8000608 <_isatty>
 80013dc:	1c43      	adds	r3, r0, #1
 80013de:	d102      	bne.n	80013e6 <_isatty_r+0x1a>
 80013e0:	682b      	ldr	r3, [r5, #0]
 80013e2:	b103      	cbz	r3, 80013e6 <_isatty_r+0x1a>
 80013e4:	6023      	str	r3, [r4, #0]
 80013e6:	bd38      	pop	{r3, r4, r5, pc}
 80013e8:	200001f0 	.word	0x200001f0

080013ec <_lseek_r>:
 80013ec:	b538      	push	{r3, r4, r5, lr}
 80013ee:	4d07      	ldr	r5, [pc, #28]	@ (800140c <_lseek_r+0x20>)
 80013f0:	4604      	mov	r4, r0
 80013f2:	4608      	mov	r0, r1
 80013f4:	4611      	mov	r1, r2
 80013f6:	2200      	movs	r2, #0
 80013f8:	602a      	str	r2, [r5, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	f7ff f90f 	bl	800061e <_lseek>
 8001400:	1c43      	adds	r3, r0, #1
 8001402:	d102      	bne.n	800140a <_lseek_r+0x1e>
 8001404:	682b      	ldr	r3, [r5, #0]
 8001406:	b103      	cbz	r3, 800140a <_lseek_r+0x1e>
 8001408:	6023      	str	r3, [r4, #0]
 800140a:	bd38      	pop	{r3, r4, r5, pc}
 800140c:	200001f0 	.word	0x200001f0

08001410 <_read_r>:
 8001410:	b538      	push	{r3, r4, r5, lr}
 8001412:	4d07      	ldr	r5, [pc, #28]	@ (8001430 <_read_r+0x20>)
 8001414:	4604      	mov	r4, r0
 8001416:	4608      	mov	r0, r1
 8001418:	4611      	mov	r1, r2
 800141a:	2200      	movs	r2, #0
 800141c:	602a      	str	r2, [r5, #0]
 800141e:	461a      	mov	r2, r3
 8001420:	f7ff f89d 	bl	800055e <_read>
 8001424:	1c43      	adds	r3, r0, #1
 8001426:	d102      	bne.n	800142e <_read_r+0x1e>
 8001428:	682b      	ldr	r3, [r5, #0]
 800142a:	b103      	cbz	r3, 800142e <_read_r+0x1e>
 800142c:	6023      	str	r3, [r4, #0]
 800142e:	bd38      	pop	{r3, r4, r5, pc}
 8001430:	200001f0 	.word	0x200001f0

08001434 <_sbrk_r>:
 8001434:	b538      	push	{r3, r4, r5, lr}
 8001436:	4d06      	ldr	r5, [pc, #24]	@ (8001450 <_sbrk_r+0x1c>)
 8001438:	2300      	movs	r3, #0
 800143a:	4604      	mov	r4, r0
 800143c:	4608      	mov	r0, r1
 800143e:	602b      	str	r3, [r5, #0]
 8001440:	f7ff f8fa 	bl	8000638 <_sbrk>
 8001444:	1c43      	adds	r3, r0, #1
 8001446:	d102      	bne.n	800144e <_sbrk_r+0x1a>
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	b103      	cbz	r3, 800144e <_sbrk_r+0x1a>
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	bd38      	pop	{r3, r4, r5, pc}
 8001450:	200001f0 	.word	0x200001f0

08001454 <_write_r>:
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4d07      	ldr	r5, [pc, #28]	@ (8001474 <_write_r+0x20>)
 8001458:	4604      	mov	r4, r0
 800145a:	4608      	mov	r0, r1
 800145c:	4611      	mov	r1, r2
 800145e:	2200      	movs	r2, #0
 8001460:	602a      	str	r2, [r5, #0]
 8001462:	461a      	mov	r2, r3
 8001464:	f7ff f898 	bl	8000598 <_write>
 8001468:	1c43      	adds	r3, r0, #1
 800146a:	d102      	bne.n	8001472 <_write_r+0x1e>
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	b103      	cbz	r3, 8001472 <_write_r+0x1e>
 8001470:	6023      	str	r3, [r4, #0]
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	200001f0 	.word	0x200001f0

08001478 <_close_r>:
 8001478:	b538      	push	{r3, r4, r5, lr}
 800147a:	4d06      	ldr	r5, [pc, #24]	@ (8001494 <_close_r+0x1c>)
 800147c:	2300      	movs	r3, #0
 800147e:	4604      	mov	r4, r0
 8001480:	4608      	mov	r0, r1
 8001482:	602b      	str	r3, [r5, #0]
 8001484:	f7ff f8a4 	bl	80005d0 <_close>
 8001488:	1c43      	adds	r3, r0, #1
 800148a:	d102      	bne.n	8001492 <_close_r+0x1a>
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	b103      	cbz	r3, 8001492 <_close_r+0x1a>
 8001490:	6023      	str	r3, [r4, #0]
 8001492:	bd38      	pop	{r3, r4, r5, pc}
 8001494:	200001f0 	.word	0x200001f0

08001498 <_fstat_r>:
 8001498:	b538      	push	{r3, r4, r5, lr}
 800149a:	4d07      	ldr	r5, [pc, #28]	@ (80014b8 <_fstat_r+0x20>)
 800149c:	2300      	movs	r3, #0
 800149e:	4604      	mov	r4, r0
 80014a0:	4608      	mov	r0, r1
 80014a2:	4611      	mov	r1, r2
 80014a4:	602b      	str	r3, [r5, #0]
 80014a6:	f7ff f89f 	bl	80005e8 <_fstat>
 80014aa:	1c43      	adds	r3, r0, #1
 80014ac:	d102      	bne.n	80014b4 <_fstat_r+0x1c>
 80014ae:	682b      	ldr	r3, [r5, #0]
 80014b0:	b103      	cbz	r3, 80014b4 <_fstat_r+0x1c>
 80014b2:	6023      	str	r3, [r4, #0]
 80014b4:	bd38      	pop	{r3, r4, r5, pc}
 80014b6:	bf00      	nop
 80014b8:	200001f0 	.word	0x200001f0

080014bc <_free_r>:
 80014bc:	b538      	push	{r3, r4, r5, lr}
 80014be:	4605      	mov	r5, r0
 80014c0:	2900      	cmp	r1, #0
 80014c2:	d041      	beq.n	8001548 <_free_r+0x8c>
 80014c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80014c8:	1f0c      	subs	r4, r1, #4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	bfb8      	it	lt
 80014ce:	18e4      	addlt	r4, r4, r3
 80014d0:	f7ff fe36 	bl	8001140 <__malloc_lock>
 80014d4:	4a1d      	ldr	r2, [pc, #116]	@ (800154c <_free_r+0x90>)
 80014d6:	6813      	ldr	r3, [r2, #0]
 80014d8:	b933      	cbnz	r3, 80014e8 <_free_r+0x2c>
 80014da:	6063      	str	r3, [r4, #4]
 80014dc:	6014      	str	r4, [r2, #0]
 80014de:	4628      	mov	r0, r5
 80014e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014e4:	f7ff be32 	b.w	800114c <__malloc_unlock>
 80014e8:	42a3      	cmp	r3, r4
 80014ea:	d908      	bls.n	80014fe <_free_r+0x42>
 80014ec:	6820      	ldr	r0, [r4, #0]
 80014ee:	1821      	adds	r1, r4, r0
 80014f0:	428b      	cmp	r3, r1
 80014f2:	bf01      	itttt	eq
 80014f4:	6819      	ldreq	r1, [r3, #0]
 80014f6:	685b      	ldreq	r3, [r3, #4]
 80014f8:	1809      	addeq	r1, r1, r0
 80014fa:	6021      	streq	r1, [r4, #0]
 80014fc:	e7ed      	b.n	80014da <_free_r+0x1e>
 80014fe:	461a      	mov	r2, r3
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	b10b      	cbz	r3, 8001508 <_free_r+0x4c>
 8001504:	42a3      	cmp	r3, r4
 8001506:	d9fa      	bls.n	80014fe <_free_r+0x42>
 8001508:	6811      	ldr	r1, [r2, #0]
 800150a:	1850      	adds	r0, r2, r1
 800150c:	42a0      	cmp	r0, r4
 800150e:	d10b      	bne.n	8001528 <_free_r+0x6c>
 8001510:	6820      	ldr	r0, [r4, #0]
 8001512:	4401      	add	r1, r0
 8001514:	1850      	adds	r0, r2, r1
 8001516:	4283      	cmp	r3, r0
 8001518:	6011      	str	r1, [r2, #0]
 800151a:	d1e0      	bne.n	80014de <_free_r+0x22>
 800151c:	6818      	ldr	r0, [r3, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	6053      	str	r3, [r2, #4]
 8001522:	4408      	add	r0, r1
 8001524:	6010      	str	r0, [r2, #0]
 8001526:	e7da      	b.n	80014de <_free_r+0x22>
 8001528:	d902      	bls.n	8001530 <_free_r+0x74>
 800152a:	230c      	movs	r3, #12
 800152c:	602b      	str	r3, [r5, #0]
 800152e:	e7d6      	b.n	80014de <_free_r+0x22>
 8001530:	6820      	ldr	r0, [r4, #0]
 8001532:	1821      	adds	r1, r4, r0
 8001534:	428b      	cmp	r3, r1
 8001536:	bf04      	itt	eq
 8001538:	6819      	ldreq	r1, [r3, #0]
 800153a:	685b      	ldreq	r3, [r3, #4]
 800153c:	6063      	str	r3, [r4, #4]
 800153e:	bf04      	itt	eq
 8001540:	1809      	addeq	r1, r1, r0
 8001542:	6021      	streq	r1, [r4, #0]
 8001544:	6054      	str	r4, [r2, #4]
 8001546:	e7ca      	b.n	80014de <_free_r+0x22>
 8001548:	bd38      	pop	{r3, r4, r5, pc}
 800154a:	bf00      	nop
 800154c:	200001ec 	.word	0x200001ec

08001550 <_init>:
 8001550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001552:	bf00      	nop
 8001554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001556:	bc08      	pop	{r3}
 8001558:	469e      	mov	lr, r3
 800155a:	4770      	bx	lr

0800155c <_fini>:
 800155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155e:	bf00      	nop
 8001560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001562:	bc08      	pop	{r3}
 8001564:	469e      	mov	lr, r3
 8001566:	4770      	bx	lr
