
Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002d0  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000464  08000464  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000464  08000464  00002028  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000464  08000464  00002028  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000464  08000464  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000464  08000464  00001464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000468  08000468  00001468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  0800046c  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002028  2**0
                  CONTENTS
 10 .bss          0000001c  20000028  20000028  00002028  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00002028  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000d04  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000396  00000000  00000000  00002d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a0  00000000  00000000  000030f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000006a  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000d83  00000000  00000000  00003202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c41  00000000  00000000  00003f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007631f  00000000  00000000  00004bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0007aee5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000194  00000000  00000000  0007af28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0007b0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000028 	.word	0x20000028
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800044c 	.word	0x0800044c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000002c 	.word	0x2000002c
 80001d0:	0800044c 	.word	0x0800044c

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <main>:

void enableInterrupts();


int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000268:	2200      	movs	r2, #0
 800026a:	4904      	ldr	r1, [pc, #16]	@ (800027c <main+0x18>)
 800026c:	2004      	movs	r0, #4
 800026e:	f000 f81f 	bl	80002b0 <SerialInitialise>
	enableInterrupts();
 8000272:	f000 f805 	bl	8000280 <enableInterrupts>

	for(;;){}
 8000276:	bf00      	nop
 8000278:	e7fd      	b.n	8000276 <main+0x12>
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <enableInterrupts>:
}

void enableInterrupts()
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000284:	b672      	cpsid	i
}
 8000286:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 8000288:	4b08      	ldr	r3, [pc, #32]	@ (80002ac <enableInterrupts+0x2c>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a07      	ldr	r2, [pc, #28]	@ (80002ac <enableInterrupts+0x2c>)
 800028e:	f043 0320 	orr.w	r3, r3, #32
 8000292:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 8000294:	2101      	movs	r1, #1
 8000296:	2025      	movs	r0, #37	@ 0x25
 8000298:	f7ff ffba 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 800029c:	2025      	movs	r0, #37	@ 0x25
 800029e:	f7ff ff99 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002a2:	b662      	cpsie	i
}
 80002a4:	bf00      	nop

	__enable_irq();
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40013800 	.word	0x40013800

080002b0 <SerialInitialise>:
		};

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80002b0:	b480      	push	{r7}
 80002b2:	b087      	sub	sp, #28
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	687a      	ldr	r2, [r7, #4]
 80002c0:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80002c2:	4b3a      	ldr	r3, [pc, #232]	@ (80003ac <SerialInitialise+0xfc>)
 80002c4:	69db      	ldr	r3, [r3, #28]
 80002c6:	4a39      	ldr	r2, [pc, #228]	@ (80003ac <SerialInitialise+0xfc>)
 80002c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80002cc:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80002ce:	4b37      	ldr	r3, [pc, #220]	@ (80003ac <SerialInitialise+0xfc>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a36      	ldr	r2, [pc, #216]	@ (80003ac <SerialInitialise+0xfc>)
 80002d4:	f043 0301 	orr.w	r3, r3, #1
 80002d8:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	691a      	ldr	r2, [r3, #16]
 80002de:	4b33      	ldr	r3, [pc, #204]	@ (80003ac <SerialInitialise+0xfc>)
 80002e0:	695b      	ldr	r3, [r3, #20]
 80002e2:	4932      	ldr	r1, [pc, #200]	@ (80003ac <SerialInitialise+0xfc>)
 80002e4:	4313      	orrs	r3, r2
 80002e6:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80002e8:	68bb      	ldr	r3, [r7, #8]
 80002ea:	685b      	ldr	r3, [r3, #4]
 80002ec:	68ba      	ldr	r2, [r7, #8]
 80002ee:	6952      	ldr	r2, [r2, #20]
 80002f0:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80002f2:	68bb      	ldr	r3, [r7, #8]
 80002f4:	685b      	ldr	r3, [r3, #4]
 80002f6:	68ba      	ldr	r2, [r7, #8]
 80002f8:	6992      	ldr	r2, [r2, #24]
 80002fa:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	69d9      	ldr	r1, [r3, #28]
 8000300:	68bb      	ldr	r3, [r7, #8]
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	6a1a      	ldr	r2, [r3, #32]
 8000306:	68bb      	ldr	r3, [r7, #8]
 8000308:	685b      	ldr	r3, [r3, #4]
 800030a:	430a      	orrs	r2, r1
 800030c:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800030e:	68bb      	ldr	r3, [r7, #8]
 8000310:	6a19      	ldr	r1, [r3, #32]
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	685b      	ldr	r3, [r3, #4]
 8000316:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000318:	68bb      	ldr	r3, [r7, #8]
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	430a      	orrs	r2, r1
 800031e:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000320:	68bb      	ldr	r3, [r7, #8]
 8000322:	68da      	ldr	r2, [r3, #12]
 8000324:	4b21      	ldr	r3, [pc, #132]	@ (80003ac <SerialInitialise+0xfc>)
 8000326:	69db      	ldr	r3, [r3, #28]
 8000328:	4920      	ldr	r1, [pc, #128]	@ (80003ac <SerialInitialise+0xfc>)
 800032a:	4313      	orrs	r3, r2
 800032c:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	689a      	ldr	r2, [r3, #8]
 8000332:	4b1e      	ldr	r3, [pc, #120]	@ (80003ac <SerialInitialise+0xfc>)
 8000334:	699b      	ldr	r3, [r3, #24]
 8000336:	491d      	ldr	r1, [pc, #116]	@ (80003ac <SerialInitialise+0xfc>)
 8000338:	4313      	orrs	r3, r2
 800033a:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	330c      	adds	r3, #12
 8000342:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	2b04      	cmp	r3, #4
 8000348:	d822      	bhi.n	8000390 <SerialInitialise+0xe0>
 800034a:	a201      	add	r2, pc, #4	@ (adr r2, 8000350 <SerialInitialise+0xa0>)
 800034c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000350:	08000365 	.word	0x08000365
 8000354:	0800036f 	.word	0x0800036f
 8000358:	08000379 	.word	0x08000379
 800035c:	08000381 	.word	0x08000381
 8000360:	08000389 	.word	0x08000389
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 840;  // 115200 at 8MHz
 8000364:	697b      	ldr	r3, [r7, #20]
 8000366:	f44f 7252 	mov.w	r2, #840	@ 0x348
 800036a:	801a      	strh	r2, [r3, #0]
		break;
 800036c:	e010      	b.n	8000390 <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 420;  // 115200 at 8MHz
 800036e:	697b      	ldr	r3, [r7, #20]
 8000370:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000374:	801a      	strh	r2, [r3, #0]
		break;
 8000376:	e00b      	b.n	8000390 <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 210;  // 115200 at 8MHz
 8000378:	697b      	ldr	r3, [r7, #20]
 800037a:	22d2      	movs	r2, #210	@ 0xd2
 800037c:	801a      	strh	r2, [r3, #0]
		break;
 800037e:	e007      	b.n	8000390 <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 140;  // 115200 at 8MHz
 8000380:	697b      	ldr	r3, [r7, #20]
 8000382:	228c      	movs	r2, #140	@ 0x8c
 8000384:	801a      	strh	r2, [r3, #0]
		break;
 8000386:	e003      	b.n	8000390 <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000388:	697b      	ldr	r3, [r7, #20]
 800038a:	2246      	movs	r2, #70	@ 0x46
 800038c:	801a      	strh	r2, [r3, #0]
		break;
 800038e:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f042 020d 	orr.w	r2, r2, #13
 800039e:	601a      	str	r2, [r3, #0]
}
 80003a0:	bf00      	nop
 80003a2:	371c      	adds	r7, #28
 80003a4:	46bd      	mov	sp, r7
 80003a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003aa:	4770      	bx	lr
 80003ac:	40021000 	.word	0x40021000

080003b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80003b0:	480d      	ldr	r0, [pc, #52]	@ (80003e8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80003b2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80003b4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003b8:	480c      	ldr	r0, [pc, #48]	@ (80003ec <LoopForever+0x6>)
  ldr r1, =_edata
 80003ba:	490d      	ldr	r1, [pc, #52]	@ (80003f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003bc:	4a0d      	ldr	r2, [pc, #52]	@ (80003f4 <LoopForever+0xe>)
  movs r3, #0
 80003be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003c0:	e002      	b.n	80003c8 <LoopCopyDataInit>

080003c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003c6:	3304      	adds	r3, #4

080003c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003cc:	d3f9      	bcc.n	80003c2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ce:	4a0a      	ldr	r2, [pc, #40]	@ (80003f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003d0:	4c0a      	ldr	r4, [pc, #40]	@ (80003fc <LoopForever+0x16>)
  movs r3, #0
 80003d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003d4:	e001      	b.n	80003da <LoopFillZerobss>

080003d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003d8:	3204      	adds	r2, #4

080003da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003dc:	d3fb      	bcc.n	80003d6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003de:	f000 f811 	bl	8000404 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003e2:	f7ff ff3f 	bl	8000264 <main>

080003e6 <LoopForever>:

LoopForever:
  b LoopForever
 80003e6:	e7fe      	b.n	80003e6 <LoopForever>
  ldr   r0, =_estack
 80003e8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003f0:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80003f4:	0800046c 	.word	0x0800046c
  ldr r2, =_sbss
 80003f8:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80003fc:	20000044 	.word	0x20000044

08000400 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000400:	e7fe      	b.n	8000400 <ADC1_2_IRQHandler>
	...

08000404 <__libc_init_array>:
 8000404:	b570      	push	{r4, r5, r6, lr}
 8000406:	4d0d      	ldr	r5, [pc, #52]	@ (800043c <__libc_init_array+0x38>)
 8000408:	4c0d      	ldr	r4, [pc, #52]	@ (8000440 <__libc_init_array+0x3c>)
 800040a:	1b64      	subs	r4, r4, r5
 800040c:	10a4      	asrs	r4, r4, #2
 800040e:	2600      	movs	r6, #0
 8000410:	42a6      	cmp	r6, r4
 8000412:	d109      	bne.n	8000428 <__libc_init_array+0x24>
 8000414:	4d0b      	ldr	r5, [pc, #44]	@ (8000444 <__libc_init_array+0x40>)
 8000416:	4c0c      	ldr	r4, [pc, #48]	@ (8000448 <__libc_init_array+0x44>)
 8000418:	f000 f818 	bl	800044c <_init>
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	10a4      	asrs	r4, r4, #2
 8000420:	2600      	movs	r6, #0
 8000422:	42a6      	cmp	r6, r4
 8000424:	d105      	bne.n	8000432 <__libc_init_array+0x2e>
 8000426:	bd70      	pop	{r4, r5, r6, pc}
 8000428:	f855 3b04 	ldr.w	r3, [r5], #4
 800042c:	4798      	blx	r3
 800042e:	3601      	adds	r6, #1
 8000430:	e7ee      	b.n	8000410 <__libc_init_array+0xc>
 8000432:	f855 3b04 	ldr.w	r3, [r5], #4
 8000436:	4798      	blx	r3
 8000438:	3601      	adds	r6, #1
 800043a:	e7f2      	b.n	8000422 <__libc_init_array+0x1e>
 800043c:	08000464 	.word	0x08000464
 8000440:	08000464 	.word	0x08000464
 8000444:	08000464 	.word	0x08000464
 8000448:	08000468 	.word	0x08000468

0800044c <_init>:
 800044c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800044e:	bf00      	nop
 8000450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000452:	bc08      	pop	{r3}
 8000454:	469e      	mov	lr, r3
 8000456:	4770      	bx	lr

08000458 <_fini>:
 8000458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800045a:	bf00      	nop
 800045c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800045e:	bc08      	pop	{r3}
 8000460:	469e      	mov	lr, r3
 8000462:	4770      	bx	lr
