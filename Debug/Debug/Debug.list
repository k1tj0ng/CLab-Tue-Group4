
Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000db8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08000f58  08000f58  00001f58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f90  08000f90  00002078  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000f90  08000f90  00001f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000f98  08000f98  00002078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f98  08000f98  00001f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f9c  08000f9c  00001f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08000fa0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002078  2**0
                  CONTENTS
 10 .bss          00000168  20000078  20000078  00002078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001e0  200001e0  00002078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000930  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003ea  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  00002dc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000072  00000000  00000000  00002e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015284  00000000  00000000  00002eea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000fdd  00000000  00000000  0001816e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075d93  00000000  00000000  0001914b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008eede  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000006c8  00000000  00000000  0008ef24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0008f5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08000f40 	.word	0x08000f40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08000f40 	.word	0x08000f40

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <finished_transmission>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void finished_transmission(uint32_t bytes_sent) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// This function will be called after a transmission is complete

	volatile uint32_t test = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
	// make a very simple delay
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
 800028c:	2300      	movs	r3, #0
 800028e:	60bb      	str	r3, [r7, #8]
 8000290:	e002      	b.n	8000298 <finished_transmission+0x18>
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	3301      	adds	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	4a05      	ldr	r2, [pc, #20]	@ (80002b0 <finished_transmission+0x30>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d9f8      	bls.n	8000292 <finished_transmission+0x12>
		// waste time !
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	0008fffe 	.word	0x0008fffe

080002b4 <main>:

int main(void) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08a      	sub	sp, #40	@ 0x28
 80002b8:	af00      	add	r7, sp, #0
	SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
 80002ba:	4a0b      	ldr	r2, [pc, #44]	@ (80002e8 <main+0x34>)
 80002bc:	490b      	ldr	r1, [pc, #44]	@ (80002ec <main+0x38>)
 80002be:	2004      	movs	r0, #4
 80002c0:	f000 f816 	bl	80002f0 <SerialInitialise>

    while (1) {
    	char input[32];
		const char terminatingChar = '@';
 80002c4:	2340      	movs	r3, #64	@ 0x40
 80002c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

		SerialInputString(input, terminatingChar, sizeof(input), &USART1_PORT);
 80002ca:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80002ce:	1d38      	adds	r0, r7, #4
 80002d0:	4b06      	ldr	r3, [pc, #24]	@ (80002ec <main+0x38>)
 80002d2:	2220      	movs	r2, #32
 80002d4:	f000 f90b 	bl	80004ee <SerialInputString>
		SerialOutputString((uint8_t *)input, &USART1_PORT);
 80002d8:	1d3b      	adds	r3, r7, #4
 80002da:	4904      	ldr	r1, [pc, #16]	@ (80002ec <main+0x38>)
 80002dc:	4618      	mov	r0, r3
 80002de:	f000 f89f 	bl	8000420 <SerialOutputString>
    while (1) {
 80002e2:	bf00      	nop
 80002e4:	e7ee      	b.n	80002c4 <main+0x10>
 80002e6:	bf00      	nop
 80002e8:	08000281 	.word	0x08000281
 80002ec:	20000000 	.word	0x20000000

080002f0 <SerialInitialise>:


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 80002f0:	b480      	push	{r7}
 80002f2:	b087      	sub	sp, #28
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	60f8      	str	r0, [r7, #12]
 80002f8:	60b9      	str	r1, [r7, #8]
 80002fa:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	687a      	ldr	r2, [r7, #4]
 8000300:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000302:	4b39      	ldr	r3, [pc, #228]	@ (80003e8 <SerialInitialise+0xf8>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	4a38      	ldr	r2, [pc, #224]	@ (80003e8 <SerialInitialise+0xf8>)
 8000308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800030c:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 800030e:	4b36      	ldr	r3, [pc, #216]	@ (80003e8 <SerialInitialise+0xf8>)
 8000310:	699b      	ldr	r3, [r3, #24]
 8000312:	4a35      	ldr	r2, [pc, #212]	@ (80003e8 <SerialInitialise+0xf8>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 800031a:	68bb      	ldr	r3, [r7, #8]
 800031c:	691a      	ldr	r2, [r3, #16]
 800031e:	4b32      	ldr	r3, [pc, #200]	@ (80003e8 <SerialInitialise+0xf8>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4931      	ldr	r1, [pc, #196]	@ (80003e8 <SerialInitialise+0xf8>)
 8000324:	4313      	orrs	r3, r2
 8000326:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	685b      	ldr	r3, [r3, #4]
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	6952      	ldr	r2, [r2, #20]
 8000330:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 8000332:	68bb      	ldr	r3, [r7, #8]
 8000334:	685b      	ldr	r3, [r3, #4]
 8000336:	68ba      	ldr	r2, [r7, #8]
 8000338:	6992      	ldr	r2, [r2, #24]
 800033a:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 800033c:	68bb      	ldr	r3, [r7, #8]
 800033e:	69d9      	ldr	r1, [r3, #28]
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	6a1a      	ldr	r2, [r3, #32]
 8000346:	68bb      	ldr	r3, [r7, #8]
 8000348:	685b      	ldr	r3, [r3, #4]
 800034a:	430a      	orrs	r2, r1
 800034c:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 800034e:	68bb      	ldr	r3, [r7, #8]
 8000350:	6a19      	ldr	r1, [r3, #32]
 8000352:	68bb      	ldr	r3, [r7, #8]
 8000354:	685b      	ldr	r3, [r3, #4]
 8000356:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000358:	68bb      	ldr	r3, [r7, #8]
 800035a:	685b      	ldr	r3, [r3, #4]
 800035c:	430a      	orrs	r2, r1
 800035e:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	68da      	ldr	r2, [r3, #12]
 8000364:	4b20      	ldr	r3, [pc, #128]	@ (80003e8 <SerialInitialise+0xf8>)
 8000366:	69db      	ldr	r3, [r3, #28]
 8000368:	491f      	ldr	r1, [pc, #124]	@ (80003e8 <SerialInitialise+0xf8>)
 800036a:	4313      	orrs	r3, r2
 800036c:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800036e:	68bb      	ldr	r3, [r7, #8]
 8000370:	689a      	ldr	r2, [r3, #8]
 8000372:	4b1d      	ldr	r3, [pc, #116]	@ (80003e8 <SerialInitialise+0xf8>)
 8000374:	699b      	ldr	r3, [r3, #24]
 8000376:	491c      	ldr	r1, [pc, #112]	@ (80003e8 <SerialInitialise+0xf8>)
 8000378:	4313      	orrs	r3, r2
 800037a:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	330c      	adds	r3, #12
 8000382:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	2b04      	cmp	r3, #4
 8000388:	d820      	bhi.n	80003cc <SerialInitialise+0xdc>
 800038a:	a201      	add	r2, pc, #4	@ (adr r2, 8000390 <SerialInitialise+0xa0>)
 800038c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000390:	080003a5 	.word	0x080003a5
 8000394:	080003ad 	.word	0x080003ad
 8000398:	080003b5 	.word	0x080003b5
 800039c:	080003bd 	.word	0x080003bd
 80003a0:	080003c5 	.word	0x080003c5
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003a4:	697b      	ldr	r3, [r7, #20]
 80003a6:	2246      	movs	r2, #70	@ 0x46
 80003a8:	801a      	strh	r2, [r3, #0]
		break;
 80003aa:	e00f      	b.n	80003cc <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	2246      	movs	r2, #70	@ 0x46
 80003b0:	801a      	strh	r2, [r3, #0]
		break;
 80003b2:	e00b      	b.n	80003cc <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	2246      	movs	r2, #70	@ 0x46
 80003b8:	801a      	strh	r2, [r3, #0]
		break;
 80003ba:	e007      	b.n	80003cc <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003bc:	697b      	ldr	r3, [r7, #20]
 80003be:	2246      	movs	r2, #70	@ 0x46
 80003c0:	801a      	strh	r2, [r3, #0]
		break;
 80003c2:	e003      	b.n	80003cc <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 80003c4:	697b      	ldr	r3, [r7, #20]
 80003c6:	2246      	movs	r2, #70	@ 0x46
 80003c8:	801a      	strh	r2, [r3, #0]
		break;
 80003ca:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 80003cc:	68bb      	ldr	r3, [r7, #8]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	681a      	ldr	r2, [r3, #0]
 80003d2:	68bb      	ldr	r3, [r7, #8]
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	f042 020d 	orr.w	r2, r2, #13
 80003da:	601a      	str	r2, [r3, #0]
}
 80003dc:	bf00      	nop
 80003de:	371c      	adds	r7, #28
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000

080003ec <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80003f8:	bf00      	nop
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	681b      	ldr	r3, [r3, #0]
 80003fe:	69db      	ldr	r3, [r3, #28]
 8000400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000404:	2b00      	cmp	r3, #0
 8000406:	d0f8      	beq.n	80003fa <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	79fa      	ldrb	r2, [r7, #7]
 800040e:	b292      	uxth	r2, r2
 8000410:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
	...

08000420 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b088      	sub	sp, #32
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
 8000428:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 800042a:	2300      	movs	r3, #0
 800042c:	61fb      	str	r3, [r7, #28]
	SerialOutputChar('\n', serial_port);
 800042e:	6839      	ldr	r1, [r7, #0]
 8000430:	200a      	movs	r0, #10
 8000432:	f7ff ffdb 	bl	80003ec <SerialOutputChar>
	while (*pt) {
 8000436:	e01c      	b.n	8000472 <SerialOutputString+0x52>
		// SerialOutputChar('\n', serial_port);
		if (*pt != '\n' && *pt != '\r') {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b0a      	cmp	r3, #10
 800043e:	d00d      	beq.n	800045c <SerialOutputString+0x3c>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	2b0d      	cmp	r3, #13
 8000446:	d009      	beq.n	800045c <SerialOutputString+0x3c>
			SerialOutputChar(*pt, serial_port);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	6839      	ldr	r1, [r7, #0]
 800044e:	4618      	mov	r0, r3
 8000450:	f7ff ffcc 	bl	80003ec <SerialOutputChar>
			counter++;
 8000454:	69fb      	ldr	r3, [r7, #28]
 8000456:	3301      	adds	r3, #1
 8000458:	61fb      	str	r3, [r7, #28]
 800045a:	e007      	b.n	800046c <SerialOutputString+0x4c>
		}
		else if (*pt == '\n'){
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	781b      	ldrb	r3, [r3, #0]
 8000460:	2b0a      	cmp	r3, #10
 8000462:	d103      	bne.n	800046c <SerialOutputString+0x4c>
			SerialOutputChar('\n', serial_port);
 8000464:	6839      	ldr	r1, [r7, #0]
 8000466:	200a      	movs	r0, #10
 8000468:	f7ff ffc0 	bl	80003ec <SerialOutputChar>
		}
		pt++;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3301      	adds	r3, #1
 8000470:	607b      	str	r3, [r7, #4]
	while (*pt) {
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	781b      	ldrb	r3, [r3, #0]
 8000476:	2b00      	cmp	r3, #0
 8000478:	d1de      	bne.n	8000438 <SerialOutputString+0x18>
	}

	char buffer[10];
	sprintf(buffer, "%d", counter);
 800047a:	f107 030c 	add.w	r3, r7, #12
 800047e:	69fa      	ldr	r2, [r7, #28]
 8000480:	490e      	ldr	r1, [pc, #56]	@ (80004bc <SerialOutputString+0x9c>)
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f8c4 	bl	8000610 <siprintf>
	char *ptr = buffer;
 8000488:	f107 030c 	add.w	r3, r7, #12
 800048c:	61bb      	str	r3, [r7, #24]
//	SerialOutputChar(*ptr, serial_port);

	while (*ptr) {
 800048e:	e008      	b.n	80004a2 <SerialOutputString+0x82>
		SerialOutputChar(*ptr, serial_port);
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	6839      	ldr	r1, [r7, #0]
 8000496:	4618      	mov	r0, r3
 8000498:	f7ff ffa8 	bl	80003ec <SerialOutputChar>
		ptr++;
 800049c:	69bb      	ldr	r3, [r7, #24]
 800049e:	3301      	adds	r3, #1
 80004a0:	61bb      	str	r3, [r7, #24]
	while (*ptr) {
 80004a2:	69bb      	ldr	r3, [r7, #24]
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d1f2      	bne.n	8000490 <SerialOutputString+0x70>
	}

	serial_port->completion_function(counter);
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004ae:	69f8      	ldr	r0, [r7, #28]
 80004b0:	4798      	blx	r3
}
 80004b2:	bf00      	nop
 80004b4:	3720      	adds	r7, #32
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	bf00      	nop
 80004bc:	08000f58 	.word	0x08000f58

080004c0 <SerialInputChar>:

char SerialInputChar(SerialPort *serial_port) {
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    // Wait until data is received
    while((serial_port->UART->ISR & USART_ISR_RXNE) == 0) {}
 80004c8:	bf00      	nop
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	69db      	ldr	r3, [r3, #28]
 80004d0:	f003 0320 	and.w	r3, r3, #32
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d0f8      	beq.n	80004ca <SerialInputChar+0xa>

    // Return the received character
    return (char)(serial_port->UART->RDR & 0xFF);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80004de:	b29b      	uxth	r3, r3
 80004e0:	b2db      	uxtb	r3, r3
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <SerialInputString>:

void SerialInputString(char *buffer, char terminatingChar, uint32_t max_length, SerialPort *serial_port) {
 80004ee:	b580      	push	{r7, lr}
 80004f0:	b086      	sub	sp, #24
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	60f8      	str	r0, [r7, #12]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	460b      	mov	r3, r1
 80004fc:	72fb      	strb	r3, [r7, #11]
    uint32_t index = 0;
 80004fe:	2300      	movs	r3, #0
 8000500:	617b      	str	r3, [r7, #20]
    char received_char;

    while(index < max_length - 1) {
 8000502:	e014      	b.n	800052e <SerialInputString+0x40>
        received_char = SerialInputChar(serial_port);
 8000504:	6838      	ldr	r0, [r7, #0]
 8000506:	f7ff ffdb 	bl	80004c0 <SerialInputChar>
 800050a:	4603      	mov	r3, r0
 800050c:	74fb      	strb	r3, [r7, #19]

        // Echo back (optional)
        SerialOutputChar(received_char, serial_port);
 800050e:	7cfb      	ldrb	r3, [r7, #19]
 8000510:	6839      	ldr	r1, [r7, #0]
 8000512:	4618      	mov	r0, r3
 8000514:	f7ff ff6a 	bl	80003ec <SerialOutputChar>

        // End on newline or carriage return
        if(received_char == terminatingChar) {
 8000518:	7cfa      	ldrb	r2, [r7, #19]
 800051a:	7afb      	ldrb	r3, [r7, #11]
 800051c:	429a      	cmp	r2, r3
 800051e:	d00c      	beq.n	800053a <SerialInputString+0x4c>
            break;
        }

        buffer[index++] = received_char;
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	617a      	str	r2, [r7, #20]
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	4413      	add	r3, r2
 800052a:	7cfa      	ldrb	r2, [r7, #19]
 800052c:	701a      	strb	r2, [r3, #0]
    while(index < max_length - 1) {
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	3b01      	subs	r3, #1
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	429a      	cmp	r2, r3
 8000536:	d3e5      	bcc.n	8000504 <SerialInputString+0x16>
 8000538:	e000      	b.n	800053c <SerialInputString+0x4e>
            break;
 800053a:	bf00      	nop
    }

    // Null-terminate the string
    buffer[index] = '\0';
 800053c:	68fa      	ldr	r2, [r7, #12]
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	4413      	add	r3, r2
 8000542:	2200      	movs	r2, #0
 8000544:	701a      	strb	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
	...

08000550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000558:	4a14      	ldr	r2, [pc, #80]	@ (80005ac <_sbrk+0x5c>)
 800055a:	4b15      	ldr	r3, [pc, #84]	@ (80005b0 <_sbrk+0x60>)
 800055c:	1ad3      	subs	r3, r2, r3
 800055e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000560:	697b      	ldr	r3, [r7, #20]
 8000562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000564:	4b13      	ldr	r3, [pc, #76]	@ (80005b4 <_sbrk+0x64>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d102      	bne.n	8000572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800056c:	4b11      	ldr	r3, [pc, #68]	@ (80005b4 <_sbrk+0x64>)
 800056e:	4a12      	ldr	r2, [pc, #72]	@ (80005b8 <_sbrk+0x68>)
 8000570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000572:	4b10      	ldr	r3, [pc, #64]	@ (80005b4 <_sbrk+0x64>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	693a      	ldr	r2, [r7, #16]
 800057c:	429a      	cmp	r2, r3
 800057e:	d207      	bcs.n	8000590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000580:	f000 f868 	bl	8000654 <__errno>
 8000584:	4603      	mov	r3, r0
 8000586:	220c      	movs	r2, #12
 8000588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800058a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800058e:	e009      	b.n	80005a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000590:	4b08      	ldr	r3, [pc, #32]	@ (80005b4 <_sbrk+0x64>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000596:	4b07      	ldr	r3, [pc, #28]	@ (80005b4 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	4a05      	ldr	r2, [pc, #20]	@ (80005b4 <_sbrk+0x64>)
 80005a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005a2:	68fb      	ldr	r3, [r7, #12]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3718      	adds	r7, #24
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	2000a000 	.word	0x2000a000
 80005b0:	00000400 	.word	0x00000400
 80005b4:	20000094 	.word	0x20000094
 80005b8:	200001e0 	.word	0x200001e0

080005bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	@ (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ea:	f000 f839 	bl	8000660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff fe61 	bl	80002b4 <main>

080005f2 <LoopForever>:

LoopForever:
  b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000600:	08000fa0 	.word	0x08000fa0
  ldr r2, =_sbss
 8000604:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000608:	200001e0 	.word	0x200001e0

0800060c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC1_2_IRQHandler>
	...

08000610 <siprintf>:
 8000610:	b40e      	push	{r1, r2, r3}
 8000612:	b510      	push	{r4, lr}
 8000614:	b09d      	sub	sp, #116	@ 0x74
 8000616:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000618:	9002      	str	r0, [sp, #8]
 800061a:	9006      	str	r0, [sp, #24]
 800061c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000620:	480a      	ldr	r0, [pc, #40]	@ (800064c <siprintf+0x3c>)
 8000622:	9107      	str	r1, [sp, #28]
 8000624:	9104      	str	r1, [sp, #16]
 8000626:	490a      	ldr	r1, [pc, #40]	@ (8000650 <siprintf+0x40>)
 8000628:	f853 2b04 	ldr.w	r2, [r3], #4
 800062c:	9105      	str	r1, [sp, #20]
 800062e:	2400      	movs	r4, #0
 8000630:	a902      	add	r1, sp, #8
 8000632:	6800      	ldr	r0, [r0, #0]
 8000634:	9301      	str	r3, [sp, #4]
 8000636:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000638:	f000 f894 	bl	8000764 <_svfiprintf_r>
 800063c:	9b02      	ldr	r3, [sp, #8]
 800063e:	701c      	strb	r4, [r3, #0]
 8000640:	b01d      	add	sp, #116	@ 0x74
 8000642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000646:	b003      	add	sp, #12
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000028 	.word	0x20000028
 8000650:	ffff0208 	.word	0xffff0208

08000654 <__errno>:
 8000654:	4b01      	ldr	r3, [pc, #4]	@ (800065c <__errno+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	20000028 	.word	0x20000028

08000660 <__libc_init_array>:
 8000660:	b570      	push	{r4, r5, r6, lr}
 8000662:	4d0d      	ldr	r5, [pc, #52]	@ (8000698 <__libc_init_array+0x38>)
 8000664:	4c0d      	ldr	r4, [pc, #52]	@ (800069c <__libc_init_array+0x3c>)
 8000666:	1b64      	subs	r4, r4, r5
 8000668:	10a4      	asrs	r4, r4, #2
 800066a:	2600      	movs	r6, #0
 800066c:	42a6      	cmp	r6, r4
 800066e:	d109      	bne.n	8000684 <__libc_init_array+0x24>
 8000670:	4d0b      	ldr	r5, [pc, #44]	@ (80006a0 <__libc_init_array+0x40>)
 8000672:	4c0c      	ldr	r4, [pc, #48]	@ (80006a4 <__libc_init_array+0x44>)
 8000674:	f000 fc64 	bl	8000f40 <_init>
 8000678:	1b64      	subs	r4, r4, r5
 800067a:	10a4      	asrs	r4, r4, #2
 800067c:	2600      	movs	r6, #0
 800067e:	42a6      	cmp	r6, r4
 8000680:	d105      	bne.n	800068e <__libc_init_array+0x2e>
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f855 3b04 	ldr.w	r3, [r5], #4
 8000688:	4798      	blx	r3
 800068a:	3601      	adds	r6, #1
 800068c:	e7ee      	b.n	800066c <__libc_init_array+0xc>
 800068e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000692:	4798      	blx	r3
 8000694:	3601      	adds	r6, #1
 8000696:	e7f2      	b.n	800067e <__libc_init_array+0x1e>
 8000698:	08000f98 	.word	0x08000f98
 800069c:	08000f98 	.word	0x08000f98
 80006a0:	08000f98 	.word	0x08000f98
 80006a4:	08000f9c 	.word	0x08000f9c

080006a8 <__retarget_lock_acquire_recursive>:
 80006a8:	4770      	bx	lr

080006aa <__retarget_lock_release_recursive>:
 80006aa:	4770      	bx	lr

080006ac <__ssputs_r>:
 80006ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006b0:	688e      	ldr	r6, [r1, #8]
 80006b2:	461f      	mov	r7, r3
 80006b4:	42be      	cmp	r6, r7
 80006b6:	680b      	ldr	r3, [r1, #0]
 80006b8:	4682      	mov	sl, r0
 80006ba:	460c      	mov	r4, r1
 80006bc:	4690      	mov	r8, r2
 80006be:	d82d      	bhi.n	800071c <__ssputs_r+0x70>
 80006c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80006c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80006c8:	d026      	beq.n	8000718 <__ssputs_r+0x6c>
 80006ca:	6965      	ldr	r5, [r4, #20]
 80006cc:	6909      	ldr	r1, [r1, #16]
 80006ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80006d2:	eba3 0901 	sub.w	r9, r3, r1
 80006d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80006da:	1c7b      	adds	r3, r7, #1
 80006dc:	444b      	add	r3, r9
 80006de:	106d      	asrs	r5, r5, #1
 80006e0:	429d      	cmp	r5, r3
 80006e2:	bf38      	it	cc
 80006e4:	461d      	movcc	r5, r3
 80006e6:	0553      	lsls	r3, r2, #21
 80006e8:	d527      	bpl.n	800073a <__ssputs_r+0x8e>
 80006ea:	4629      	mov	r1, r5
 80006ec:	f000 f958 	bl	80009a0 <_malloc_r>
 80006f0:	4606      	mov	r6, r0
 80006f2:	b360      	cbz	r0, 800074e <__ssputs_r+0xa2>
 80006f4:	6921      	ldr	r1, [r4, #16]
 80006f6:	464a      	mov	r2, r9
 80006f8:	f000 fbc2 	bl	8000e80 <memcpy>
 80006fc:	89a3      	ldrh	r3, [r4, #12]
 80006fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000702:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000706:	81a3      	strh	r3, [r4, #12]
 8000708:	6126      	str	r6, [r4, #16]
 800070a:	6165      	str	r5, [r4, #20]
 800070c:	444e      	add	r6, r9
 800070e:	eba5 0509 	sub.w	r5, r5, r9
 8000712:	6026      	str	r6, [r4, #0]
 8000714:	60a5      	str	r5, [r4, #8]
 8000716:	463e      	mov	r6, r7
 8000718:	42be      	cmp	r6, r7
 800071a:	d900      	bls.n	800071e <__ssputs_r+0x72>
 800071c:	463e      	mov	r6, r7
 800071e:	6820      	ldr	r0, [r4, #0]
 8000720:	4632      	mov	r2, r6
 8000722:	4641      	mov	r1, r8
 8000724:	f000 fb82 	bl	8000e2c <memmove>
 8000728:	68a3      	ldr	r3, [r4, #8]
 800072a:	1b9b      	subs	r3, r3, r6
 800072c:	60a3      	str	r3, [r4, #8]
 800072e:	6823      	ldr	r3, [r4, #0]
 8000730:	4433      	add	r3, r6
 8000732:	6023      	str	r3, [r4, #0]
 8000734:	2000      	movs	r0, #0
 8000736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073a:	462a      	mov	r2, r5
 800073c:	f000 fb48 	bl	8000dd0 <_realloc_r>
 8000740:	4606      	mov	r6, r0
 8000742:	2800      	cmp	r0, #0
 8000744:	d1e0      	bne.n	8000708 <__ssputs_r+0x5c>
 8000746:	6921      	ldr	r1, [r4, #16]
 8000748:	4650      	mov	r0, sl
 800074a:	f000 fba7 	bl	8000e9c <_free_r>
 800074e:	230c      	movs	r3, #12
 8000750:	f8ca 3000 	str.w	r3, [sl]
 8000754:	89a3      	ldrh	r3, [r4, #12]
 8000756:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800075a:	81a3      	strh	r3, [r4, #12]
 800075c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000760:	e7e9      	b.n	8000736 <__ssputs_r+0x8a>
	...

08000764 <_svfiprintf_r>:
 8000764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000768:	4698      	mov	r8, r3
 800076a:	898b      	ldrh	r3, [r1, #12]
 800076c:	061b      	lsls	r3, r3, #24
 800076e:	b09d      	sub	sp, #116	@ 0x74
 8000770:	4607      	mov	r7, r0
 8000772:	460d      	mov	r5, r1
 8000774:	4614      	mov	r4, r2
 8000776:	d510      	bpl.n	800079a <_svfiprintf_r+0x36>
 8000778:	690b      	ldr	r3, [r1, #16]
 800077a:	b973      	cbnz	r3, 800079a <_svfiprintf_r+0x36>
 800077c:	2140      	movs	r1, #64	@ 0x40
 800077e:	f000 f90f 	bl	80009a0 <_malloc_r>
 8000782:	6028      	str	r0, [r5, #0]
 8000784:	6128      	str	r0, [r5, #16]
 8000786:	b930      	cbnz	r0, 8000796 <_svfiprintf_r+0x32>
 8000788:	230c      	movs	r3, #12
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000790:	b01d      	add	sp, #116	@ 0x74
 8000792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000796:	2340      	movs	r3, #64	@ 0x40
 8000798:	616b      	str	r3, [r5, #20]
 800079a:	2300      	movs	r3, #0
 800079c:	9309      	str	r3, [sp, #36]	@ 0x24
 800079e:	2320      	movs	r3, #32
 80007a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80007a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80007a8:	2330      	movs	r3, #48	@ 0x30
 80007aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000948 <_svfiprintf_r+0x1e4>
 80007ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80007b2:	f04f 0901 	mov.w	r9, #1
 80007b6:	4623      	mov	r3, r4
 80007b8:	469a      	mov	sl, r3
 80007ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80007be:	b10a      	cbz	r2, 80007c4 <_svfiprintf_r+0x60>
 80007c0:	2a25      	cmp	r2, #37	@ 0x25
 80007c2:	d1f9      	bne.n	80007b8 <_svfiprintf_r+0x54>
 80007c4:	ebba 0b04 	subs.w	fp, sl, r4
 80007c8:	d00b      	beq.n	80007e2 <_svfiprintf_r+0x7e>
 80007ca:	465b      	mov	r3, fp
 80007cc:	4622      	mov	r2, r4
 80007ce:	4629      	mov	r1, r5
 80007d0:	4638      	mov	r0, r7
 80007d2:	f7ff ff6b 	bl	80006ac <__ssputs_r>
 80007d6:	3001      	adds	r0, #1
 80007d8:	f000 80a7 	beq.w	800092a <_svfiprintf_r+0x1c6>
 80007dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80007de:	445a      	add	r2, fp
 80007e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80007e2:	f89a 3000 	ldrb.w	r3, [sl]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	f000 809f 	beq.w	800092a <_svfiprintf_r+0x1c6>
 80007ec:	2300      	movs	r3, #0
 80007ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80007f6:	f10a 0a01 	add.w	sl, sl, #1
 80007fa:	9304      	str	r3, [sp, #16]
 80007fc:	9307      	str	r3, [sp, #28]
 80007fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000802:	931a      	str	r3, [sp, #104]	@ 0x68
 8000804:	4654      	mov	r4, sl
 8000806:	2205      	movs	r2, #5
 8000808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800080c:	484e      	ldr	r0, [pc, #312]	@ (8000948 <_svfiprintf_r+0x1e4>)
 800080e:	f7ff fce7 	bl	80001e0 <memchr>
 8000812:	9a04      	ldr	r2, [sp, #16]
 8000814:	b9d8      	cbnz	r0, 800084e <_svfiprintf_r+0xea>
 8000816:	06d0      	lsls	r0, r2, #27
 8000818:	bf44      	itt	mi
 800081a:	2320      	movmi	r3, #32
 800081c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000820:	0711      	lsls	r1, r2, #28
 8000822:	bf44      	itt	mi
 8000824:	232b      	movmi	r3, #43	@ 0x2b
 8000826:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800082a:	f89a 3000 	ldrb.w	r3, [sl]
 800082e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000830:	d015      	beq.n	800085e <_svfiprintf_r+0xfa>
 8000832:	9a07      	ldr	r2, [sp, #28]
 8000834:	4654      	mov	r4, sl
 8000836:	2000      	movs	r0, #0
 8000838:	f04f 0c0a 	mov.w	ip, #10
 800083c:	4621      	mov	r1, r4
 800083e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000842:	3b30      	subs	r3, #48	@ 0x30
 8000844:	2b09      	cmp	r3, #9
 8000846:	d94b      	bls.n	80008e0 <_svfiprintf_r+0x17c>
 8000848:	b1b0      	cbz	r0, 8000878 <_svfiprintf_r+0x114>
 800084a:	9207      	str	r2, [sp, #28]
 800084c:	e014      	b.n	8000878 <_svfiprintf_r+0x114>
 800084e:	eba0 0308 	sub.w	r3, r0, r8
 8000852:	fa09 f303 	lsl.w	r3, r9, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	9304      	str	r3, [sp, #16]
 800085a:	46a2      	mov	sl, r4
 800085c:	e7d2      	b.n	8000804 <_svfiprintf_r+0xa0>
 800085e:	9b03      	ldr	r3, [sp, #12]
 8000860:	1d19      	adds	r1, r3, #4
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	9103      	str	r1, [sp, #12]
 8000866:	2b00      	cmp	r3, #0
 8000868:	bfbb      	ittet	lt
 800086a:	425b      	neglt	r3, r3
 800086c:	f042 0202 	orrlt.w	r2, r2, #2
 8000870:	9307      	strge	r3, [sp, #28]
 8000872:	9307      	strlt	r3, [sp, #28]
 8000874:	bfb8      	it	lt
 8000876:	9204      	strlt	r2, [sp, #16]
 8000878:	7823      	ldrb	r3, [r4, #0]
 800087a:	2b2e      	cmp	r3, #46	@ 0x2e
 800087c:	d10a      	bne.n	8000894 <_svfiprintf_r+0x130>
 800087e:	7863      	ldrb	r3, [r4, #1]
 8000880:	2b2a      	cmp	r3, #42	@ 0x2a
 8000882:	d132      	bne.n	80008ea <_svfiprintf_r+0x186>
 8000884:	9b03      	ldr	r3, [sp, #12]
 8000886:	1d1a      	adds	r2, r3, #4
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	9203      	str	r2, [sp, #12]
 800088c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000890:	3402      	adds	r4, #2
 8000892:	9305      	str	r3, [sp, #20]
 8000894:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000958 <_svfiprintf_r+0x1f4>
 8000898:	7821      	ldrb	r1, [r4, #0]
 800089a:	2203      	movs	r2, #3
 800089c:	4650      	mov	r0, sl
 800089e:	f7ff fc9f 	bl	80001e0 <memchr>
 80008a2:	b138      	cbz	r0, 80008b4 <_svfiprintf_r+0x150>
 80008a4:	9b04      	ldr	r3, [sp, #16]
 80008a6:	eba0 000a 	sub.w	r0, r0, sl
 80008aa:	2240      	movs	r2, #64	@ 0x40
 80008ac:	4082      	lsls	r2, r0
 80008ae:	4313      	orrs	r3, r2
 80008b0:	3401      	adds	r4, #1
 80008b2:	9304      	str	r3, [sp, #16]
 80008b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008b8:	4824      	ldr	r0, [pc, #144]	@ (800094c <_svfiprintf_r+0x1e8>)
 80008ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80008be:	2206      	movs	r2, #6
 80008c0:	f7ff fc8e 	bl	80001e0 <memchr>
 80008c4:	2800      	cmp	r0, #0
 80008c6:	d036      	beq.n	8000936 <_svfiprintf_r+0x1d2>
 80008c8:	4b21      	ldr	r3, [pc, #132]	@ (8000950 <_svfiprintf_r+0x1ec>)
 80008ca:	bb1b      	cbnz	r3, 8000914 <_svfiprintf_r+0x1b0>
 80008cc:	9b03      	ldr	r3, [sp, #12]
 80008ce:	3307      	adds	r3, #7
 80008d0:	f023 0307 	bic.w	r3, r3, #7
 80008d4:	3308      	adds	r3, #8
 80008d6:	9303      	str	r3, [sp, #12]
 80008d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80008da:	4433      	add	r3, r6
 80008dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80008de:	e76a      	b.n	80007b6 <_svfiprintf_r+0x52>
 80008e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80008e4:	460c      	mov	r4, r1
 80008e6:	2001      	movs	r0, #1
 80008e8:	e7a8      	b.n	800083c <_svfiprintf_r+0xd8>
 80008ea:	2300      	movs	r3, #0
 80008ec:	3401      	adds	r4, #1
 80008ee:	9305      	str	r3, [sp, #20]
 80008f0:	4619      	mov	r1, r3
 80008f2:	f04f 0c0a 	mov.w	ip, #10
 80008f6:	4620      	mov	r0, r4
 80008f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80008fc:	3a30      	subs	r2, #48	@ 0x30
 80008fe:	2a09      	cmp	r2, #9
 8000900:	d903      	bls.n	800090a <_svfiprintf_r+0x1a6>
 8000902:	2b00      	cmp	r3, #0
 8000904:	d0c6      	beq.n	8000894 <_svfiprintf_r+0x130>
 8000906:	9105      	str	r1, [sp, #20]
 8000908:	e7c4      	b.n	8000894 <_svfiprintf_r+0x130>
 800090a:	fb0c 2101 	mla	r1, ip, r1, r2
 800090e:	4604      	mov	r4, r0
 8000910:	2301      	movs	r3, #1
 8000912:	e7f0      	b.n	80008f6 <_svfiprintf_r+0x192>
 8000914:	ab03      	add	r3, sp, #12
 8000916:	9300      	str	r3, [sp, #0]
 8000918:	462a      	mov	r2, r5
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <_svfiprintf_r+0x1f0>)
 800091c:	a904      	add	r1, sp, #16
 800091e:	4638      	mov	r0, r7
 8000920:	f3af 8000 	nop.w
 8000924:	1c42      	adds	r2, r0, #1
 8000926:	4606      	mov	r6, r0
 8000928:	d1d6      	bne.n	80008d8 <_svfiprintf_r+0x174>
 800092a:	89ab      	ldrh	r3, [r5, #12]
 800092c:	065b      	lsls	r3, r3, #25
 800092e:	f53f af2d 	bmi.w	800078c <_svfiprintf_r+0x28>
 8000932:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000934:	e72c      	b.n	8000790 <_svfiprintf_r+0x2c>
 8000936:	ab03      	add	r3, sp, #12
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	462a      	mov	r2, r5
 800093c:	4b05      	ldr	r3, [pc, #20]	@ (8000954 <_svfiprintf_r+0x1f0>)
 800093e:	a904      	add	r1, sp, #16
 8000940:	4638      	mov	r0, r7
 8000942:	f000 f91b 	bl	8000b7c <_printf_i>
 8000946:	e7ed      	b.n	8000924 <_svfiprintf_r+0x1c0>
 8000948:	08000f5b 	.word	0x08000f5b
 800094c:	08000f65 	.word	0x08000f65
 8000950:	00000000 	.word	0x00000000
 8000954:	080006ad 	.word	0x080006ad
 8000958:	08000f61 	.word	0x08000f61

0800095c <sbrk_aligned>:
 800095c:	b570      	push	{r4, r5, r6, lr}
 800095e:	4e0f      	ldr	r6, [pc, #60]	@ (800099c <sbrk_aligned+0x40>)
 8000960:	460c      	mov	r4, r1
 8000962:	6831      	ldr	r1, [r6, #0]
 8000964:	4605      	mov	r5, r0
 8000966:	b911      	cbnz	r1, 800096e <sbrk_aligned+0x12>
 8000968:	f000 fa7a 	bl	8000e60 <_sbrk_r>
 800096c:	6030      	str	r0, [r6, #0]
 800096e:	4621      	mov	r1, r4
 8000970:	4628      	mov	r0, r5
 8000972:	f000 fa75 	bl	8000e60 <_sbrk_r>
 8000976:	1c43      	adds	r3, r0, #1
 8000978:	d103      	bne.n	8000982 <sbrk_aligned+0x26>
 800097a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800097e:	4620      	mov	r0, r4
 8000980:	bd70      	pop	{r4, r5, r6, pc}
 8000982:	1cc4      	adds	r4, r0, #3
 8000984:	f024 0403 	bic.w	r4, r4, #3
 8000988:	42a0      	cmp	r0, r4
 800098a:	d0f8      	beq.n	800097e <sbrk_aligned+0x22>
 800098c:	1a21      	subs	r1, r4, r0
 800098e:	4628      	mov	r0, r5
 8000990:	f000 fa66 	bl	8000e60 <_sbrk_r>
 8000994:	3001      	adds	r0, #1
 8000996:	d1f2      	bne.n	800097e <sbrk_aligned+0x22>
 8000998:	e7ef      	b.n	800097a <sbrk_aligned+0x1e>
 800099a:	bf00      	nop
 800099c:	200001d4 	.word	0x200001d4

080009a0 <_malloc_r>:
 80009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009a4:	1ccd      	adds	r5, r1, #3
 80009a6:	f025 0503 	bic.w	r5, r5, #3
 80009aa:	3508      	adds	r5, #8
 80009ac:	2d0c      	cmp	r5, #12
 80009ae:	bf38      	it	cc
 80009b0:	250c      	movcc	r5, #12
 80009b2:	2d00      	cmp	r5, #0
 80009b4:	4606      	mov	r6, r0
 80009b6:	db01      	blt.n	80009bc <_malloc_r+0x1c>
 80009b8:	42a9      	cmp	r1, r5
 80009ba:	d904      	bls.n	80009c6 <_malloc_r+0x26>
 80009bc:	230c      	movs	r3, #12
 80009be:	6033      	str	r3, [r6, #0]
 80009c0:	2000      	movs	r0, #0
 80009c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000a9c <_malloc_r+0xfc>
 80009ca:	f000 f9f5 	bl	8000db8 <__malloc_lock>
 80009ce:	f8d8 3000 	ldr.w	r3, [r8]
 80009d2:	461c      	mov	r4, r3
 80009d4:	bb44      	cbnz	r4, 8000a28 <_malloc_r+0x88>
 80009d6:	4629      	mov	r1, r5
 80009d8:	4630      	mov	r0, r6
 80009da:	f7ff ffbf 	bl	800095c <sbrk_aligned>
 80009de:	1c43      	adds	r3, r0, #1
 80009e0:	4604      	mov	r4, r0
 80009e2:	d158      	bne.n	8000a96 <_malloc_r+0xf6>
 80009e4:	f8d8 4000 	ldr.w	r4, [r8]
 80009e8:	4627      	mov	r7, r4
 80009ea:	2f00      	cmp	r7, #0
 80009ec:	d143      	bne.n	8000a76 <_malloc_r+0xd6>
 80009ee:	2c00      	cmp	r4, #0
 80009f0:	d04b      	beq.n	8000a8a <_malloc_r+0xea>
 80009f2:	6823      	ldr	r3, [r4, #0]
 80009f4:	4639      	mov	r1, r7
 80009f6:	4630      	mov	r0, r6
 80009f8:	eb04 0903 	add.w	r9, r4, r3
 80009fc:	f000 fa30 	bl	8000e60 <_sbrk_r>
 8000a00:	4581      	cmp	r9, r0
 8000a02:	d142      	bne.n	8000a8a <_malloc_r+0xea>
 8000a04:	6821      	ldr	r1, [r4, #0]
 8000a06:	1a6d      	subs	r5, r5, r1
 8000a08:	4629      	mov	r1, r5
 8000a0a:	4630      	mov	r0, r6
 8000a0c:	f7ff ffa6 	bl	800095c <sbrk_aligned>
 8000a10:	3001      	adds	r0, #1
 8000a12:	d03a      	beq.n	8000a8a <_malloc_r+0xea>
 8000a14:	6823      	ldr	r3, [r4, #0]
 8000a16:	442b      	add	r3, r5
 8000a18:	6023      	str	r3, [r4, #0]
 8000a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	bb62      	cbnz	r2, 8000a7c <_malloc_r+0xdc>
 8000a22:	f8c8 7000 	str.w	r7, [r8]
 8000a26:	e00f      	b.n	8000a48 <_malloc_r+0xa8>
 8000a28:	6822      	ldr	r2, [r4, #0]
 8000a2a:	1b52      	subs	r2, r2, r5
 8000a2c:	d420      	bmi.n	8000a70 <_malloc_r+0xd0>
 8000a2e:	2a0b      	cmp	r2, #11
 8000a30:	d917      	bls.n	8000a62 <_malloc_r+0xc2>
 8000a32:	1961      	adds	r1, r4, r5
 8000a34:	42a3      	cmp	r3, r4
 8000a36:	6025      	str	r5, [r4, #0]
 8000a38:	bf18      	it	ne
 8000a3a:	6059      	strne	r1, [r3, #4]
 8000a3c:	6863      	ldr	r3, [r4, #4]
 8000a3e:	bf08      	it	eq
 8000a40:	f8c8 1000 	streq.w	r1, [r8]
 8000a44:	5162      	str	r2, [r4, r5]
 8000a46:	604b      	str	r3, [r1, #4]
 8000a48:	4630      	mov	r0, r6
 8000a4a:	f000 f9bb 	bl	8000dc4 <__malloc_unlock>
 8000a4e:	f104 000b 	add.w	r0, r4, #11
 8000a52:	1d23      	adds	r3, r4, #4
 8000a54:	f020 0007 	bic.w	r0, r0, #7
 8000a58:	1ac2      	subs	r2, r0, r3
 8000a5a:	bf1c      	itt	ne
 8000a5c:	1a1b      	subne	r3, r3, r0
 8000a5e:	50a3      	strne	r3, [r4, r2]
 8000a60:	e7af      	b.n	80009c2 <_malloc_r+0x22>
 8000a62:	6862      	ldr	r2, [r4, #4]
 8000a64:	42a3      	cmp	r3, r4
 8000a66:	bf0c      	ite	eq
 8000a68:	f8c8 2000 	streq.w	r2, [r8]
 8000a6c:	605a      	strne	r2, [r3, #4]
 8000a6e:	e7eb      	b.n	8000a48 <_malloc_r+0xa8>
 8000a70:	4623      	mov	r3, r4
 8000a72:	6864      	ldr	r4, [r4, #4]
 8000a74:	e7ae      	b.n	80009d4 <_malloc_r+0x34>
 8000a76:	463c      	mov	r4, r7
 8000a78:	687f      	ldr	r7, [r7, #4]
 8000a7a:	e7b6      	b.n	80009ea <_malloc_r+0x4a>
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	685b      	ldr	r3, [r3, #4]
 8000a80:	42a3      	cmp	r3, r4
 8000a82:	d1fb      	bne.n	8000a7c <_malloc_r+0xdc>
 8000a84:	2300      	movs	r3, #0
 8000a86:	6053      	str	r3, [r2, #4]
 8000a88:	e7de      	b.n	8000a48 <_malloc_r+0xa8>
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	6033      	str	r3, [r6, #0]
 8000a8e:	4630      	mov	r0, r6
 8000a90:	f000 f998 	bl	8000dc4 <__malloc_unlock>
 8000a94:	e794      	b.n	80009c0 <_malloc_r+0x20>
 8000a96:	6005      	str	r5, [r0, #0]
 8000a98:	e7d6      	b.n	8000a48 <_malloc_r+0xa8>
 8000a9a:	bf00      	nop
 8000a9c:	200001d8 	.word	0x200001d8

08000aa0 <_printf_common>:
 8000aa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa4:	4616      	mov	r6, r2
 8000aa6:	4698      	mov	r8, r3
 8000aa8:	688a      	ldr	r2, [r1, #8]
 8000aaa:	690b      	ldr	r3, [r1, #16]
 8000aac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	bfb8      	it	lt
 8000ab4:	4613      	movlt	r3, r2
 8000ab6:	6033      	str	r3, [r6, #0]
 8000ab8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000abc:	4607      	mov	r7, r0
 8000abe:	460c      	mov	r4, r1
 8000ac0:	b10a      	cbz	r2, 8000ac6 <_printf_common+0x26>
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	6033      	str	r3, [r6, #0]
 8000ac6:	6823      	ldr	r3, [r4, #0]
 8000ac8:	0699      	lsls	r1, r3, #26
 8000aca:	bf42      	ittt	mi
 8000acc:	6833      	ldrmi	r3, [r6, #0]
 8000ace:	3302      	addmi	r3, #2
 8000ad0:	6033      	strmi	r3, [r6, #0]
 8000ad2:	6825      	ldr	r5, [r4, #0]
 8000ad4:	f015 0506 	ands.w	r5, r5, #6
 8000ad8:	d106      	bne.n	8000ae8 <_printf_common+0x48>
 8000ada:	f104 0a19 	add.w	sl, r4, #25
 8000ade:	68e3      	ldr	r3, [r4, #12]
 8000ae0:	6832      	ldr	r2, [r6, #0]
 8000ae2:	1a9b      	subs	r3, r3, r2
 8000ae4:	42ab      	cmp	r3, r5
 8000ae6:	dc26      	bgt.n	8000b36 <_printf_common+0x96>
 8000ae8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000aec:	6822      	ldr	r2, [r4, #0]
 8000aee:	3b00      	subs	r3, #0
 8000af0:	bf18      	it	ne
 8000af2:	2301      	movne	r3, #1
 8000af4:	0692      	lsls	r2, r2, #26
 8000af6:	d42b      	bmi.n	8000b50 <_printf_common+0xb0>
 8000af8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000afc:	4641      	mov	r1, r8
 8000afe:	4638      	mov	r0, r7
 8000b00:	47c8      	blx	r9
 8000b02:	3001      	adds	r0, #1
 8000b04:	d01e      	beq.n	8000b44 <_printf_common+0xa4>
 8000b06:	6823      	ldr	r3, [r4, #0]
 8000b08:	6922      	ldr	r2, [r4, #16]
 8000b0a:	f003 0306 	and.w	r3, r3, #6
 8000b0e:	2b04      	cmp	r3, #4
 8000b10:	bf02      	ittt	eq
 8000b12:	68e5      	ldreq	r5, [r4, #12]
 8000b14:	6833      	ldreq	r3, [r6, #0]
 8000b16:	1aed      	subeq	r5, r5, r3
 8000b18:	68a3      	ldr	r3, [r4, #8]
 8000b1a:	bf0c      	ite	eq
 8000b1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000b20:	2500      	movne	r5, #0
 8000b22:	4293      	cmp	r3, r2
 8000b24:	bfc4      	itt	gt
 8000b26:	1a9b      	subgt	r3, r3, r2
 8000b28:	18ed      	addgt	r5, r5, r3
 8000b2a:	2600      	movs	r6, #0
 8000b2c:	341a      	adds	r4, #26
 8000b2e:	42b5      	cmp	r5, r6
 8000b30:	d11a      	bne.n	8000b68 <_printf_common+0xc8>
 8000b32:	2000      	movs	r0, #0
 8000b34:	e008      	b.n	8000b48 <_printf_common+0xa8>
 8000b36:	2301      	movs	r3, #1
 8000b38:	4652      	mov	r2, sl
 8000b3a:	4641      	mov	r1, r8
 8000b3c:	4638      	mov	r0, r7
 8000b3e:	47c8      	blx	r9
 8000b40:	3001      	adds	r0, #1
 8000b42:	d103      	bne.n	8000b4c <_printf_common+0xac>
 8000b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4c:	3501      	adds	r5, #1
 8000b4e:	e7c6      	b.n	8000ade <_printf_common+0x3e>
 8000b50:	18e1      	adds	r1, r4, r3
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	2030      	movs	r0, #48	@ 0x30
 8000b56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000b5a:	4422      	add	r2, r4
 8000b5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000b60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000b64:	3302      	adds	r3, #2
 8000b66:	e7c7      	b.n	8000af8 <_printf_common+0x58>
 8000b68:	2301      	movs	r3, #1
 8000b6a:	4622      	mov	r2, r4
 8000b6c:	4641      	mov	r1, r8
 8000b6e:	4638      	mov	r0, r7
 8000b70:	47c8      	blx	r9
 8000b72:	3001      	adds	r0, #1
 8000b74:	d0e6      	beq.n	8000b44 <_printf_common+0xa4>
 8000b76:	3601      	adds	r6, #1
 8000b78:	e7d9      	b.n	8000b2e <_printf_common+0x8e>
	...

08000b7c <_printf_i>:
 8000b7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	7e0f      	ldrb	r7, [r1, #24]
 8000b82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000b84:	2f78      	cmp	r7, #120	@ 0x78
 8000b86:	4691      	mov	r9, r2
 8000b88:	4680      	mov	r8, r0
 8000b8a:	460c      	mov	r4, r1
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000b92:	d807      	bhi.n	8000ba4 <_printf_i+0x28>
 8000b94:	2f62      	cmp	r7, #98	@ 0x62
 8000b96:	d80a      	bhi.n	8000bae <_printf_i+0x32>
 8000b98:	2f00      	cmp	r7, #0
 8000b9a:	f000 80d1 	beq.w	8000d40 <_printf_i+0x1c4>
 8000b9e:	2f58      	cmp	r7, #88	@ 0x58
 8000ba0:	f000 80b8 	beq.w	8000d14 <_printf_i+0x198>
 8000ba4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000ba8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000bac:	e03a      	b.n	8000c24 <_printf_i+0xa8>
 8000bae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000bb2:	2b15      	cmp	r3, #21
 8000bb4:	d8f6      	bhi.n	8000ba4 <_printf_i+0x28>
 8000bb6:	a101      	add	r1, pc, #4	@ (adr r1, 8000bbc <_printf_i+0x40>)
 8000bb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000bbc:	08000c15 	.word	0x08000c15
 8000bc0:	08000c29 	.word	0x08000c29
 8000bc4:	08000ba5 	.word	0x08000ba5
 8000bc8:	08000ba5 	.word	0x08000ba5
 8000bcc:	08000ba5 	.word	0x08000ba5
 8000bd0:	08000ba5 	.word	0x08000ba5
 8000bd4:	08000c29 	.word	0x08000c29
 8000bd8:	08000ba5 	.word	0x08000ba5
 8000bdc:	08000ba5 	.word	0x08000ba5
 8000be0:	08000ba5 	.word	0x08000ba5
 8000be4:	08000ba5 	.word	0x08000ba5
 8000be8:	08000d27 	.word	0x08000d27
 8000bec:	08000c53 	.word	0x08000c53
 8000bf0:	08000ce1 	.word	0x08000ce1
 8000bf4:	08000ba5 	.word	0x08000ba5
 8000bf8:	08000ba5 	.word	0x08000ba5
 8000bfc:	08000d49 	.word	0x08000d49
 8000c00:	08000ba5 	.word	0x08000ba5
 8000c04:	08000c53 	.word	0x08000c53
 8000c08:	08000ba5 	.word	0x08000ba5
 8000c0c:	08000ba5 	.word	0x08000ba5
 8000c10:	08000ce9 	.word	0x08000ce9
 8000c14:	6833      	ldr	r3, [r6, #0]
 8000c16:	1d1a      	adds	r2, r3, #4
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6032      	str	r2, [r6, #0]
 8000c1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000c20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000c24:	2301      	movs	r3, #1
 8000c26:	e09c      	b.n	8000d62 <_printf_i+0x1e6>
 8000c28:	6833      	ldr	r3, [r6, #0]
 8000c2a:	6820      	ldr	r0, [r4, #0]
 8000c2c:	1d19      	adds	r1, r3, #4
 8000c2e:	6031      	str	r1, [r6, #0]
 8000c30:	0606      	lsls	r6, r0, #24
 8000c32:	d501      	bpl.n	8000c38 <_printf_i+0xbc>
 8000c34:	681d      	ldr	r5, [r3, #0]
 8000c36:	e003      	b.n	8000c40 <_printf_i+0xc4>
 8000c38:	0645      	lsls	r5, r0, #25
 8000c3a:	d5fb      	bpl.n	8000c34 <_printf_i+0xb8>
 8000c3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000c40:	2d00      	cmp	r5, #0
 8000c42:	da03      	bge.n	8000c4c <_printf_i+0xd0>
 8000c44:	232d      	movs	r3, #45	@ 0x2d
 8000c46:	426d      	negs	r5, r5
 8000c48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000c4c:	4858      	ldr	r0, [pc, #352]	@ (8000db0 <_printf_i+0x234>)
 8000c4e:	230a      	movs	r3, #10
 8000c50:	e011      	b.n	8000c76 <_printf_i+0xfa>
 8000c52:	6821      	ldr	r1, [r4, #0]
 8000c54:	6833      	ldr	r3, [r6, #0]
 8000c56:	0608      	lsls	r0, r1, #24
 8000c58:	f853 5b04 	ldr.w	r5, [r3], #4
 8000c5c:	d402      	bmi.n	8000c64 <_printf_i+0xe8>
 8000c5e:	0649      	lsls	r1, r1, #25
 8000c60:	bf48      	it	mi
 8000c62:	b2ad      	uxthmi	r5, r5
 8000c64:	2f6f      	cmp	r7, #111	@ 0x6f
 8000c66:	4852      	ldr	r0, [pc, #328]	@ (8000db0 <_printf_i+0x234>)
 8000c68:	6033      	str	r3, [r6, #0]
 8000c6a:	bf14      	ite	ne
 8000c6c:	230a      	movne	r3, #10
 8000c6e:	2308      	moveq	r3, #8
 8000c70:	2100      	movs	r1, #0
 8000c72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000c76:	6866      	ldr	r6, [r4, #4]
 8000c78:	60a6      	str	r6, [r4, #8]
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	db05      	blt.n	8000c8a <_printf_i+0x10e>
 8000c7e:	6821      	ldr	r1, [r4, #0]
 8000c80:	432e      	orrs	r6, r5
 8000c82:	f021 0104 	bic.w	r1, r1, #4
 8000c86:	6021      	str	r1, [r4, #0]
 8000c88:	d04b      	beq.n	8000d22 <_printf_i+0x1a6>
 8000c8a:	4616      	mov	r6, r2
 8000c8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8000c90:	fb03 5711 	mls	r7, r3, r1, r5
 8000c94:	5dc7      	ldrb	r7, [r0, r7]
 8000c96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000c9a:	462f      	mov	r7, r5
 8000c9c:	42bb      	cmp	r3, r7
 8000c9e:	460d      	mov	r5, r1
 8000ca0:	d9f4      	bls.n	8000c8c <_printf_i+0x110>
 8000ca2:	2b08      	cmp	r3, #8
 8000ca4:	d10b      	bne.n	8000cbe <_printf_i+0x142>
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	07df      	lsls	r7, r3, #31
 8000caa:	d508      	bpl.n	8000cbe <_printf_i+0x142>
 8000cac:	6923      	ldr	r3, [r4, #16]
 8000cae:	6861      	ldr	r1, [r4, #4]
 8000cb0:	4299      	cmp	r1, r3
 8000cb2:	bfde      	ittt	le
 8000cb4:	2330      	movle	r3, #48	@ 0x30
 8000cb6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000cba:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000cbe:	1b92      	subs	r2, r2, r6
 8000cc0:	6122      	str	r2, [r4, #16]
 8000cc2:	f8cd a000 	str.w	sl, [sp]
 8000cc6:	464b      	mov	r3, r9
 8000cc8:	aa03      	add	r2, sp, #12
 8000cca:	4621      	mov	r1, r4
 8000ccc:	4640      	mov	r0, r8
 8000cce:	f7ff fee7 	bl	8000aa0 <_printf_common>
 8000cd2:	3001      	adds	r0, #1
 8000cd4:	d14a      	bne.n	8000d6c <_printf_i+0x1f0>
 8000cd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cda:	b004      	add	sp, #16
 8000cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce0:	6823      	ldr	r3, [r4, #0]
 8000ce2:	f043 0320 	orr.w	r3, r3, #32
 8000ce6:	6023      	str	r3, [r4, #0]
 8000ce8:	4832      	ldr	r0, [pc, #200]	@ (8000db4 <_printf_i+0x238>)
 8000cea:	2778      	movs	r7, #120	@ 0x78
 8000cec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	6831      	ldr	r1, [r6, #0]
 8000cf4:	061f      	lsls	r7, r3, #24
 8000cf6:	f851 5b04 	ldr.w	r5, [r1], #4
 8000cfa:	d402      	bmi.n	8000d02 <_printf_i+0x186>
 8000cfc:	065f      	lsls	r7, r3, #25
 8000cfe:	bf48      	it	mi
 8000d00:	b2ad      	uxthmi	r5, r5
 8000d02:	6031      	str	r1, [r6, #0]
 8000d04:	07d9      	lsls	r1, r3, #31
 8000d06:	bf44      	itt	mi
 8000d08:	f043 0320 	orrmi.w	r3, r3, #32
 8000d0c:	6023      	strmi	r3, [r4, #0]
 8000d0e:	b11d      	cbz	r5, 8000d18 <_printf_i+0x19c>
 8000d10:	2310      	movs	r3, #16
 8000d12:	e7ad      	b.n	8000c70 <_printf_i+0xf4>
 8000d14:	4826      	ldr	r0, [pc, #152]	@ (8000db0 <_printf_i+0x234>)
 8000d16:	e7e9      	b.n	8000cec <_printf_i+0x170>
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	f023 0320 	bic.w	r3, r3, #32
 8000d1e:	6023      	str	r3, [r4, #0]
 8000d20:	e7f6      	b.n	8000d10 <_printf_i+0x194>
 8000d22:	4616      	mov	r6, r2
 8000d24:	e7bd      	b.n	8000ca2 <_printf_i+0x126>
 8000d26:	6833      	ldr	r3, [r6, #0]
 8000d28:	6825      	ldr	r5, [r4, #0]
 8000d2a:	6961      	ldr	r1, [r4, #20]
 8000d2c:	1d18      	adds	r0, r3, #4
 8000d2e:	6030      	str	r0, [r6, #0]
 8000d30:	062e      	lsls	r6, r5, #24
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	d501      	bpl.n	8000d3a <_printf_i+0x1be>
 8000d36:	6019      	str	r1, [r3, #0]
 8000d38:	e002      	b.n	8000d40 <_printf_i+0x1c4>
 8000d3a:	0668      	lsls	r0, r5, #25
 8000d3c:	d5fb      	bpl.n	8000d36 <_printf_i+0x1ba>
 8000d3e:	8019      	strh	r1, [r3, #0]
 8000d40:	2300      	movs	r3, #0
 8000d42:	6123      	str	r3, [r4, #16]
 8000d44:	4616      	mov	r6, r2
 8000d46:	e7bc      	b.n	8000cc2 <_printf_i+0x146>
 8000d48:	6833      	ldr	r3, [r6, #0]
 8000d4a:	1d1a      	adds	r2, r3, #4
 8000d4c:	6032      	str	r2, [r6, #0]
 8000d4e:	681e      	ldr	r6, [r3, #0]
 8000d50:	6862      	ldr	r2, [r4, #4]
 8000d52:	2100      	movs	r1, #0
 8000d54:	4630      	mov	r0, r6
 8000d56:	f7ff fa43 	bl	80001e0 <memchr>
 8000d5a:	b108      	cbz	r0, 8000d60 <_printf_i+0x1e4>
 8000d5c:	1b80      	subs	r0, r0, r6
 8000d5e:	6060      	str	r0, [r4, #4]
 8000d60:	6863      	ldr	r3, [r4, #4]
 8000d62:	6123      	str	r3, [r4, #16]
 8000d64:	2300      	movs	r3, #0
 8000d66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000d6a:	e7aa      	b.n	8000cc2 <_printf_i+0x146>
 8000d6c:	6923      	ldr	r3, [r4, #16]
 8000d6e:	4632      	mov	r2, r6
 8000d70:	4649      	mov	r1, r9
 8000d72:	4640      	mov	r0, r8
 8000d74:	47d0      	blx	sl
 8000d76:	3001      	adds	r0, #1
 8000d78:	d0ad      	beq.n	8000cd6 <_printf_i+0x15a>
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	079b      	lsls	r3, r3, #30
 8000d7e:	d413      	bmi.n	8000da8 <_printf_i+0x22c>
 8000d80:	68e0      	ldr	r0, [r4, #12]
 8000d82:	9b03      	ldr	r3, [sp, #12]
 8000d84:	4298      	cmp	r0, r3
 8000d86:	bfb8      	it	lt
 8000d88:	4618      	movlt	r0, r3
 8000d8a:	e7a6      	b.n	8000cda <_printf_i+0x15e>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	4632      	mov	r2, r6
 8000d90:	4649      	mov	r1, r9
 8000d92:	4640      	mov	r0, r8
 8000d94:	47d0      	blx	sl
 8000d96:	3001      	adds	r0, #1
 8000d98:	d09d      	beq.n	8000cd6 <_printf_i+0x15a>
 8000d9a:	3501      	adds	r5, #1
 8000d9c:	68e3      	ldr	r3, [r4, #12]
 8000d9e:	9903      	ldr	r1, [sp, #12]
 8000da0:	1a5b      	subs	r3, r3, r1
 8000da2:	42ab      	cmp	r3, r5
 8000da4:	dcf2      	bgt.n	8000d8c <_printf_i+0x210>
 8000da6:	e7eb      	b.n	8000d80 <_printf_i+0x204>
 8000da8:	2500      	movs	r5, #0
 8000daa:	f104 0619 	add.w	r6, r4, #25
 8000dae:	e7f5      	b.n	8000d9c <_printf_i+0x220>
 8000db0:	08000f6c 	.word	0x08000f6c
 8000db4:	08000f7d 	.word	0x08000f7d

08000db8 <__malloc_lock>:
 8000db8:	4801      	ldr	r0, [pc, #4]	@ (8000dc0 <__malloc_lock+0x8>)
 8000dba:	f7ff bc75 	b.w	80006a8 <__retarget_lock_acquire_recursive>
 8000dbe:	bf00      	nop
 8000dc0:	200001d0 	.word	0x200001d0

08000dc4 <__malloc_unlock>:
 8000dc4:	4801      	ldr	r0, [pc, #4]	@ (8000dcc <__malloc_unlock+0x8>)
 8000dc6:	f7ff bc70 	b.w	80006aa <__retarget_lock_release_recursive>
 8000dca:	bf00      	nop
 8000dcc:	200001d0 	.word	0x200001d0

08000dd0 <_realloc_r>:
 8000dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000dd4:	4607      	mov	r7, r0
 8000dd6:	4614      	mov	r4, r2
 8000dd8:	460d      	mov	r5, r1
 8000dda:	b921      	cbnz	r1, 8000de6 <_realloc_r+0x16>
 8000ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000de0:	4611      	mov	r1, r2
 8000de2:	f7ff bddd 	b.w	80009a0 <_malloc_r>
 8000de6:	b92a      	cbnz	r2, 8000df4 <_realloc_r+0x24>
 8000de8:	f000 f858 	bl	8000e9c <_free_r>
 8000dec:	4625      	mov	r5, r4
 8000dee:	4628      	mov	r0, r5
 8000df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000df4:	f000 f89c 	bl	8000f30 <_malloc_usable_size_r>
 8000df8:	4284      	cmp	r4, r0
 8000dfa:	4606      	mov	r6, r0
 8000dfc:	d802      	bhi.n	8000e04 <_realloc_r+0x34>
 8000dfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8000e02:	d8f4      	bhi.n	8000dee <_realloc_r+0x1e>
 8000e04:	4621      	mov	r1, r4
 8000e06:	4638      	mov	r0, r7
 8000e08:	f7ff fdca 	bl	80009a0 <_malloc_r>
 8000e0c:	4680      	mov	r8, r0
 8000e0e:	b908      	cbnz	r0, 8000e14 <_realloc_r+0x44>
 8000e10:	4645      	mov	r5, r8
 8000e12:	e7ec      	b.n	8000dee <_realloc_r+0x1e>
 8000e14:	42b4      	cmp	r4, r6
 8000e16:	4622      	mov	r2, r4
 8000e18:	4629      	mov	r1, r5
 8000e1a:	bf28      	it	cs
 8000e1c:	4632      	movcs	r2, r6
 8000e1e:	f000 f82f 	bl	8000e80 <memcpy>
 8000e22:	4629      	mov	r1, r5
 8000e24:	4638      	mov	r0, r7
 8000e26:	f000 f839 	bl	8000e9c <_free_r>
 8000e2a:	e7f1      	b.n	8000e10 <_realloc_r+0x40>

08000e2c <memmove>:
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	b510      	push	{r4, lr}
 8000e30:	eb01 0402 	add.w	r4, r1, r2
 8000e34:	d902      	bls.n	8000e3c <memmove+0x10>
 8000e36:	4284      	cmp	r4, r0
 8000e38:	4623      	mov	r3, r4
 8000e3a:	d807      	bhi.n	8000e4c <memmove+0x20>
 8000e3c:	1e43      	subs	r3, r0, #1
 8000e3e:	42a1      	cmp	r1, r4
 8000e40:	d008      	beq.n	8000e54 <memmove+0x28>
 8000e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8000e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8000e4a:	e7f8      	b.n	8000e3e <memmove+0x12>
 8000e4c:	4402      	add	r2, r0
 8000e4e:	4601      	mov	r1, r0
 8000e50:	428a      	cmp	r2, r1
 8000e52:	d100      	bne.n	8000e56 <memmove+0x2a>
 8000e54:	bd10      	pop	{r4, pc}
 8000e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8000e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8000e5e:	e7f7      	b.n	8000e50 <memmove+0x24>

08000e60 <_sbrk_r>:
 8000e60:	b538      	push	{r3, r4, r5, lr}
 8000e62:	4d06      	ldr	r5, [pc, #24]	@ (8000e7c <_sbrk_r+0x1c>)
 8000e64:	2300      	movs	r3, #0
 8000e66:	4604      	mov	r4, r0
 8000e68:	4608      	mov	r0, r1
 8000e6a:	602b      	str	r3, [r5, #0]
 8000e6c:	f7ff fb70 	bl	8000550 <_sbrk>
 8000e70:	1c43      	adds	r3, r0, #1
 8000e72:	d102      	bne.n	8000e7a <_sbrk_r+0x1a>
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	b103      	cbz	r3, 8000e7a <_sbrk_r+0x1a>
 8000e78:	6023      	str	r3, [r4, #0]
 8000e7a:	bd38      	pop	{r3, r4, r5, pc}
 8000e7c:	200001dc 	.word	0x200001dc

08000e80 <memcpy>:
 8000e80:	440a      	add	r2, r1
 8000e82:	4291      	cmp	r1, r2
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000e88:	d100      	bne.n	8000e8c <memcpy+0xc>
 8000e8a:	4770      	bx	lr
 8000e8c:	b510      	push	{r4, lr}
 8000e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000e92:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000e96:	4291      	cmp	r1, r2
 8000e98:	d1f9      	bne.n	8000e8e <memcpy+0xe>
 8000e9a:	bd10      	pop	{r4, pc}

08000e9c <_free_r>:
 8000e9c:	b538      	push	{r3, r4, r5, lr}
 8000e9e:	4605      	mov	r5, r0
 8000ea0:	2900      	cmp	r1, #0
 8000ea2:	d041      	beq.n	8000f28 <_free_r+0x8c>
 8000ea4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ea8:	1f0c      	subs	r4, r1, #4
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	bfb8      	it	lt
 8000eae:	18e4      	addlt	r4, r4, r3
 8000eb0:	f7ff ff82 	bl	8000db8 <__malloc_lock>
 8000eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f2c <_free_r+0x90>)
 8000eb6:	6813      	ldr	r3, [r2, #0]
 8000eb8:	b933      	cbnz	r3, 8000ec8 <_free_r+0x2c>
 8000eba:	6063      	str	r3, [r4, #4]
 8000ebc:	6014      	str	r4, [r2, #0]
 8000ebe:	4628      	mov	r0, r5
 8000ec0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ec4:	f7ff bf7e 	b.w	8000dc4 <__malloc_unlock>
 8000ec8:	42a3      	cmp	r3, r4
 8000eca:	d908      	bls.n	8000ede <_free_r+0x42>
 8000ecc:	6820      	ldr	r0, [r4, #0]
 8000ece:	1821      	adds	r1, r4, r0
 8000ed0:	428b      	cmp	r3, r1
 8000ed2:	bf01      	itttt	eq
 8000ed4:	6819      	ldreq	r1, [r3, #0]
 8000ed6:	685b      	ldreq	r3, [r3, #4]
 8000ed8:	1809      	addeq	r1, r1, r0
 8000eda:	6021      	streq	r1, [r4, #0]
 8000edc:	e7ed      	b.n	8000eba <_free_r+0x1e>
 8000ede:	461a      	mov	r2, r3
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	b10b      	cbz	r3, 8000ee8 <_free_r+0x4c>
 8000ee4:	42a3      	cmp	r3, r4
 8000ee6:	d9fa      	bls.n	8000ede <_free_r+0x42>
 8000ee8:	6811      	ldr	r1, [r2, #0]
 8000eea:	1850      	adds	r0, r2, r1
 8000eec:	42a0      	cmp	r0, r4
 8000eee:	d10b      	bne.n	8000f08 <_free_r+0x6c>
 8000ef0:	6820      	ldr	r0, [r4, #0]
 8000ef2:	4401      	add	r1, r0
 8000ef4:	1850      	adds	r0, r2, r1
 8000ef6:	4283      	cmp	r3, r0
 8000ef8:	6011      	str	r1, [r2, #0]
 8000efa:	d1e0      	bne.n	8000ebe <_free_r+0x22>
 8000efc:	6818      	ldr	r0, [r3, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	6053      	str	r3, [r2, #4]
 8000f02:	4408      	add	r0, r1
 8000f04:	6010      	str	r0, [r2, #0]
 8000f06:	e7da      	b.n	8000ebe <_free_r+0x22>
 8000f08:	d902      	bls.n	8000f10 <_free_r+0x74>
 8000f0a:	230c      	movs	r3, #12
 8000f0c:	602b      	str	r3, [r5, #0]
 8000f0e:	e7d6      	b.n	8000ebe <_free_r+0x22>
 8000f10:	6820      	ldr	r0, [r4, #0]
 8000f12:	1821      	adds	r1, r4, r0
 8000f14:	428b      	cmp	r3, r1
 8000f16:	bf04      	itt	eq
 8000f18:	6819      	ldreq	r1, [r3, #0]
 8000f1a:	685b      	ldreq	r3, [r3, #4]
 8000f1c:	6063      	str	r3, [r4, #4]
 8000f1e:	bf04      	itt	eq
 8000f20:	1809      	addeq	r1, r1, r0
 8000f22:	6021      	streq	r1, [r4, #0]
 8000f24:	6054      	str	r4, [r2, #4]
 8000f26:	e7ca      	b.n	8000ebe <_free_r+0x22>
 8000f28:	bd38      	pop	{r3, r4, r5, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200001d8 	.word	0x200001d8

08000f30 <_malloc_usable_size_r>:
 8000f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000f34:	1f18      	subs	r0, r3, #4
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bfbc      	itt	lt
 8000f3a:	580b      	ldrlt	r3, [r1, r0]
 8000f3c:	18c0      	addlt	r0, r0, r3
 8000f3e:	4770      	bx	lr

08000f40 <_init>:
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	bf00      	nop
 8000f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f46:	bc08      	pop	{r3}
 8000f48:	469e      	mov	lr, r3
 8000f4a:	4770      	bx	lr

08000f4c <_fini>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr
