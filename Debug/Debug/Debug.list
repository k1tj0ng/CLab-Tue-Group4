
Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000430  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080005c4  080005c4  000015c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080005d8  080005d8  0000202c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080005d8  080005d8  0000202c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080005d8  080005d8  0000202c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005d8  080005d8  000015d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080005dc  080005dc  000015dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  080005e0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000202c  2**0
                  CONTENTS
 10 .bss          00000044  2000002c  2000002c  0000202c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  0000202c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f5d  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003f5  00000000  00000000  00002fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b0  00000000  00000000  000033b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000077  00000000  00000000  00003460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000d89  00000000  00000000  000034d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000cd1  00000000  00000000  00004260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00076375  00000000  00000000  00004f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0007b2a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000001e0  00000000  00000000  0007b2ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0007b4cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005ac 	.word	0x080005ac

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	080005ac 	.word	0x080005ac

080001d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	db0b      	blt.n	80001fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001e6:	79fb      	ldrb	r3, [r7, #7]
 80001e8:	f003 021f 	and.w	r2, r3, #31
 80001ec:	4907      	ldr	r1, [pc, #28]	@ (800020c <__NVIC_EnableIRQ+0x38>)
 80001ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f2:	095b      	lsrs	r3, r3, #5
 80001f4:	2001      	movs	r0, #1
 80001f6:	fa00 f202 	lsl.w	r2, r0, r2
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e000e100 	.word	0xe000e100

08000210 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	6039      	str	r1, [r7, #0]
 800021a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000220:	2b00      	cmp	r3, #0
 8000222:	db0a      	blt.n	800023a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	b2da      	uxtb	r2, r3
 8000228:	490c      	ldr	r1, [pc, #48]	@ (800025c <__NVIC_SetPriority+0x4c>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	0112      	lsls	r2, r2, #4
 8000230:	b2d2      	uxtb	r2, r2
 8000232:	440b      	add	r3, r1
 8000234:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000238:	e00a      	b.n	8000250 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	b2da      	uxtb	r2, r3
 800023e:	4908      	ldr	r1, [pc, #32]	@ (8000260 <__NVIC_SetPriority+0x50>)
 8000240:	79fb      	ldrb	r3, [r7, #7]
 8000242:	f003 030f 	and.w	r3, r3, #15
 8000246:	3b04      	subs	r3, #4
 8000248:	0112      	lsls	r2, r2, #4
 800024a:	b2d2      	uxtb	r2, r2
 800024c:	440b      	add	r3, r1
 800024e:	761a      	strb	r2, [r3, #24]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	e000e100 	.word	0xe000e100
 8000260:	e000ed00 	.word	0xe000ed00

08000264 <main>:
unsigned char TERMINATING_CHAR = '#';
int i = 0;
int str_len = 0;

int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	SerialInitialise(BAUD_115200, &USART1_PORT, 0x00);
 8000268:	2200      	movs	r2, #0
 800026a:	4905      	ldr	r1, [pc, #20]	@ (8000280 <main+0x1c>)
 800026c:	2004      	movs	r0, #4
 800026e:	f000 f895 	bl	800039c <SerialInitialise>
	enableLEDs();
 8000272:	f000 f807 	bl	8000284 <enableLEDs>
	enableInterrupts();
 8000276:	f000 f81f 	bl	80002b8 <enableInterrupts>

//	char terminatingChar = '#';

//	SerialInputString(string, terminatingChar, sizeof(string), &USART1_PORT);

	for(;;)
 800027a:	bf00      	nop
 800027c:	e7fd      	b.n	800027a <main+0x16>
 800027e:	bf00      	nop
 8000280:	20000004 	.word	0x20000004

08000284 <enableLEDs>:
	{}
}

void enableLEDs()
{
 8000284:	b480      	push	{r7}
 8000286:	b083      	sub	sp, #12
 8000288:	af00      	add	r7, sp, #0
	// Enable clock for Port E (LEDs)
	RCC->AHBENR |= RCC_AHBENR_GPIOEEN;
 800028a:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <enableLEDs+0x2c>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	4a08      	ldr	r2, [pc, #32]	@ (80002b0 <enableLEDs+0x2c>)
 8000290:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000294:	6153      	str	r3, [r2, #20]

	// Get the most significant 16 bits of port mode register as that is where the mode for the LEDs are defined
	uint16_t* portMode = ((uint16_t*)&(GPIOE->MODER))+1;
 8000296:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <enableLEDs+0x30>)
 8000298:	607b      	str	r3, [r7, #4]

	// Set the mode of the port pins to output since they are LEDs
	*portMode = LED_OUTPUT;
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f245 5255 	movw	r2, #21845	@ 0x5555
 80002a0:	801a      	strh	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40021000 	.word	0x40021000
 80002b4:	48001002 	.word	0x48001002

080002b8 <enableInterrupts>:

void enableInterrupts()
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002bc:	b672      	cpsid	i
}
 80002be:	bf00      	nop
	__disable_irq();

	// Generate an interrupt upon receiving data
	USART1->CR1 |= USART_CR1_RXNEIE_Msk;
 80002c0:	4b08      	ldr	r3, [pc, #32]	@ (80002e4 <enableInterrupts+0x2c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a07      	ldr	r2, [pc, #28]	@ (80002e4 <enableInterrupts+0x2c>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6013      	str	r3, [r2, #0]

	// Set priority and enable interrupts
	NVIC_SetPriority(USART1_IRQn, 1);
 80002cc:	2101      	movs	r1, #1
 80002ce:	2025      	movs	r0, #37	@ 0x25
 80002d0:	f7ff ff9e 	bl	8000210 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART1_IRQn);
 80002d4:	2025      	movs	r0, #37	@ 0x25
 80002d6:	f7ff ff7d 	bl	80001d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80002da:	b662      	cpsie	i
}
 80002dc:	bf00      	nop

	__enable_irq();
}
 80002de:	bf00      	nop
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40013800 	.word	0x40013800

080002e8 <USART1_EXTI25_IRQHandler>:

void USART1_EXTI25_IRQHandler()
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
	// Check for overrun or frame errors
	if ((USART1->ISR & USART_ISR_FE_Msk) && (USART1->ISR & USART_ISR_ORE_Msk))
 80002ee:	4b24      	ldr	r3, [pc, #144]	@ (8000380 <USART1_EXTI25_IRQHandler+0x98>)
 80002f0:	69db      	ldr	r3, [r3, #28]
 80002f2:	f003 0302 	and.w	r3, r3, #2
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d005      	beq.n	8000306 <USART1_EXTI25_IRQHandler+0x1e>
 80002fa:	4b21      	ldr	r3, [pc, #132]	@ (8000380 <USART1_EXTI25_IRQHandler+0x98>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f003 0308 	and.w	r3, r3, #8
 8000302:	2b00      	cmp	r3, #0
 8000304:	d136      	bne.n	8000374 <USART1_EXTI25_IRQHandler+0x8c>
	{
		return;
	}

	// If we have stored the maximum amount, stop
	if (i == BUFFER)
 8000306:	4b1f      	ldr	r3, [pc, #124]	@ (8000384 <USART1_EXTI25_IRQHandler+0x9c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b20      	cmp	r3, #32
 800030c:	d034      	beq.n	8000378 <USART1_EXTI25_IRQHandler+0x90>
	{
		return;
	}

	if (USART1->ISR & USART_ISR_RXNE_Msk)
 800030e:	4b1c      	ldr	r3, [pc, #112]	@ (8000380 <USART1_EXTI25_IRQHandler+0x98>)
 8000310:	69db      	ldr	r3, [r3, #28]
 8000312:	f003 0320 	and.w	r3, r3, #32
 8000316:	2b00      	cmp	r3, #0
 8000318:	d02f      	beq.n	800037a <USART1_EXTI25_IRQHandler+0x92>
		// Read data
//		SerialOutputString((uint8_t*)"Message received: ", &USART1_PORT);
//		SerialOutputString((uint8_t*)string, &USART1_PORT);
//		unsigned char data = (uint8_t) USART1->RDR;

		unsigned char data = (uint8_t) USART1->RDR;
 800031a:	4b19      	ldr	r3, [pc, #100]	@ (8000380 <USART1_EXTI25_IRQHandler+0x98>)
 800031c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800031e:	b29b      	uxth	r3, r3
 8000320:	71fb      	strb	r3, [r7, #7]
//		SerialOutputString((uint8_t*)"Message received: ", &USART1_PORT);
		SerialOutputChar((uint8_t *)data, &USART1_PORT);
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	4918      	ldr	r1, [pc, #96]	@ (8000388 <USART1_EXTI25_IRQHandler+0xa0>)
 8000326:	4618      	mov	r0, r3
 8000328:	f000 f8b8 	bl	800049c <SerialOutputChar>
		string[i] = data;
 800032c:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <USART1_EXTI25_IRQHandler+0x9c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4916      	ldr	r1, [pc, #88]	@ (800038c <USART1_EXTI25_IRQHandler+0xa4>)
 8000332:	79fa      	ldrb	r2, [r7, #7]
 8000334:	54ca      	strb	r2, [r1, r3]
		i++;
 8000336:	4b13      	ldr	r3, [pc, #76]	@ (8000384 <USART1_EXTI25_IRQHandler+0x9c>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	3301      	adds	r3, #1
 800033c:	4a11      	ldr	r2, [pc, #68]	@ (8000384 <USART1_EXTI25_IRQHandler+0x9c>)
 800033e:	6013      	str	r3, [r2, #0]
		str_len++;
 8000340:	4b13      	ldr	r3, [pc, #76]	@ (8000390 <USART1_EXTI25_IRQHandler+0xa8>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	3301      	adds	r3, #1
 8000346:	4a12      	ldr	r2, [pc, #72]	@ (8000390 <USART1_EXTI25_IRQHandler+0xa8>)
 8000348:	6013      	str	r3, [r2, #0]
		if (data == TERMINATING_CHAR){
 800034a:	4b12      	ldr	r3, [pc, #72]	@ (8000394 <USART1_EXTI25_IRQHandler+0xac>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	79fa      	ldrb	r2, [r7, #7]
 8000350:	429a      	cmp	r2, r3
 8000352:	d112      	bne.n	800037a <USART1_EXTI25_IRQHandler+0x92>
			str_len--;
 8000354:	4b0e      	ldr	r3, [pc, #56]	@ (8000390 <USART1_EXTI25_IRQHandler+0xa8>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	3b01      	subs	r3, #1
 800035a:	4a0d      	ldr	r2, [pc, #52]	@ (8000390 <USART1_EXTI25_IRQHandler+0xa8>)
 800035c:	6013      	str	r3, [r2, #0]

			SerialOutputString((uint8_t*)"\nThe length is: %d", &USART1_PORT);
 800035e:	490a      	ldr	r1, [pc, #40]	@ (8000388 <USART1_EXTI25_IRQHandler+0xa0>)
 8000360:	480d      	ldr	r0, [pc, #52]	@ (8000398 <USART1_EXTI25_IRQHandler+0xb0>)
 8000362:	f000 f8b4 	bl	80004ce <SerialOutputString>

//			char strLenBuffer[10] = IntToStr(str_len)
			SerialOutputString((uint8_t*)str_len, &USART1_PORT);
 8000366:	4b0a      	ldr	r3, [pc, #40]	@ (8000390 <USART1_EXTI25_IRQHandler+0xa8>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	4907      	ldr	r1, [pc, #28]	@ (8000388 <USART1_EXTI25_IRQHandler+0xa0>)
 800036c:	4618      	mov	r0, r3
 800036e:	f000 f8ae 	bl	80004ce <SerialOutputString>
 8000372:	e002      	b.n	800037a <USART1_EXTI25_IRQHandler+0x92>
		return;
 8000374:	bf00      	nop
 8000376:	e000      	b.n	800037a <USART1_EXTI25_IRQHandler+0x92>
		return;
 8000378:	bf00      	nop
//
//		// Toggle LEDs
//		uint8_t* lights = ((uint8_t*)&(GPIOE->ODR)) + 1;
//		*lights = !(*lights);
	}
}
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}
 8000380:	40013800 	.word	0x40013800
 8000384:	20000068 	.word	0x20000068
 8000388:	20000004 	.word	0x20000004
 800038c:	20000048 	.word	0x20000048
 8000390:	2000006c 	.word	0x2000006c
 8000394:	20000000 	.word	0x20000000
 8000398:	080005c4 	.word	0x080005c4

0800039c <SerialInitialise>:
		};

// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 800039c:	b480      	push	{r7}
 800039e:	b087      	sub	sp, #28
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80003ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000498 <SerialInitialise+0xfc>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a39      	ldr	r2, [pc, #228]	@ (8000498 <SerialInitialise+0xfc>)
 80003b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003b8:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80003ba:	4b37      	ldr	r3, [pc, #220]	@ (8000498 <SerialInitialise+0xfc>)
 80003bc:	699b      	ldr	r3, [r3, #24]
 80003be:	4a36      	ldr	r2, [pc, #216]	@ (8000498 <SerialInitialise+0xfc>)
 80003c0:	f043 0301 	orr.w	r3, r3, #1
 80003c4:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	691a      	ldr	r2, [r3, #16]
 80003ca:	4b33      	ldr	r3, [pc, #204]	@ (8000498 <SerialInitialise+0xfc>)
 80003cc:	695b      	ldr	r3, [r3, #20]
 80003ce:	4932      	ldr	r1, [pc, #200]	@ (8000498 <SerialInitialise+0xfc>)
 80003d0:	4313      	orrs	r3, r2
 80003d2:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	685b      	ldr	r3, [r3, #4]
 80003d8:	68ba      	ldr	r2, [r7, #8]
 80003da:	6952      	ldr	r2, [r2, #20]
 80003dc:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 80003de:	68bb      	ldr	r3, [r7, #8]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	68ba      	ldr	r2, [r7, #8]
 80003e4:	6992      	ldr	r2, [r2, #24]
 80003e6:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80003e8:	68bb      	ldr	r3, [r7, #8]
 80003ea:	69d9      	ldr	r1, [r3, #28]
 80003ec:	68bb      	ldr	r3, [r7, #8]
 80003ee:	685b      	ldr	r3, [r3, #4]
 80003f0:	6a1a      	ldr	r2, [r3, #32]
 80003f2:	68bb      	ldr	r3, [r7, #8]
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	430a      	orrs	r2, r1
 80003f8:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80003fa:	68bb      	ldr	r3, [r7, #8]
 80003fc:	6a19      	ldr	r1, [r3, #32]
 80003fe:	68bb      	ldr	r3, [r7, #8]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	430a      	orrs	r2, r1
 800040a:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 800040c:	68bb      	ldr	r3, [r7, #8]
 800040e:	68da      	ldr	r2, [r3, #12]
 8000410:	4b21      	ldr	r3, [pc, #132]	@ (8000498 <SerialInitialise+0xfc>)
 8000412:	69db      	ldr	r3, [r3, #28]
 8000414:	4920      	ldr	r1, [pc, #128]	@ (8000498 <SerialInitialise+0xfc>)
 8000416:	4313      	orrs	r3, r2
 8000418:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 800041a:	68bb      	ldr	r3, [r7, #8]
 800041c:	689a      	ldr	r2, [r3, #8]
 800041e:	4b1e      	ldr	r3, [pc, #120]	@ (8000498 <SerialInitialise+0xfc>)
 8000420:	699b      	ldr	r3, [r3, #24]
 8000422:	491d      	ldr	r1, [pc, #116]	@ (8000498 <SerialInitialise+0xfc>)
 8000424:	4313      	orrs	r3, r2
 8000426:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	330c      	adds	r3, #12
 800042e:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	2b04      	cmp	r3, #4
 8000434:	d822      	bhi.n	800047c <SerialInitialise+0xe0>
 8000436:	a201      	add	r2, pc, #4	@ (adr r2, 800043c <SerialInitialise+0xa0>)
 8000438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800043c:	08000451 	.word	0x08000451
 8000440:	0800045b 	.word	0x0800045b
 8000444:	08000465 	.word	0x08000465
 8000448:	0800046d 	.word	0x0800046d
 800044c:	08000475 	.word	0x08000475
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 840;  // 115200 at 8MHz
 8000450:	697b      	ldr	r3, [r7, #20]
 8000452:	f44f 7252 	mov.w	r2, #840	@ 0x348
 8000456:	801a      	strh	r2, [r3, #0]
		break;
 8000458:	e010      	b.n	800047c <SerialInitialise+0xe0>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 420;  // 115200 at 8MHz
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8000460:	801a      	strh	r2, [r3, #0]
		break;
 8000462:	e00b      	b.n	800047c <SerialInitialise+0xe0>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 210;  // 115200 at 8MHz
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	22d2      	movs	r2, #210	@ 0xd2
 8000468:	801a      	strh	r2, [r3, #0]
		break;
 800046a:	e007      	b.n	800047c <SerialInitialise+0xe0>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 140;  // 115200 at 8MHz
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	228c      	movs	r2, #140	@ 0x8c
 8000470:	801a      	strh	r2, [r3, #0]
		break;
 8000472:	e003      	b.n	800047c <SerialInitialise+0xe0>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	2246      	movs	r2, #70	@ 0x46
 8000478:	801a      	strh	r2, [r3, #0]
		break;
 800047a:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 800047c:	68bb      	ldr	r3, [r7, #8]
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	681a      	ldr	r2, [r3, #0]
 8000482:	68bb      	ldr	r3, [r7, #8]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f042 020d 	orr.w	r2, r2, #13
 800048a:	601a      	str	r2, [r3, #0]
}
 800048c:	bf00      	nop
 800048e:	371c      	adds	r7, #28
 8000490:	46bd      	mov	sp, r7
 8000492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000496:	4770      	bx	lr
 8000498:	40021000 	.word	0x40021000

0800049c <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	4603      	mov	r3, r0
 80004a4:	6039      	str	r1, [r7, #0]
 80004a6:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 80004a8:	bf00      	nop
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	681b      	ldr	r3, [r3, #0]
 80004ae:	69db      	ldr	r3, [r3, #28]
 80004b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d0f8      	beq.n	80004aa <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	79fa      	ldrb	r2, [r7, #7]
 80004be:	b292      	uxth	r2, r2
 80004c0:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b084      	sub	sp, #16
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
	while(*pt) {
 80004dc:	e00b      	b.n	80004f6 <SerialOutputString+0x28>
		SerialOutputChar(*pt, serial_port);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	6839      	ldr	r1, [r7, #0]
 80004e4:	4618      	mov	r0, r3
 80004e6:	f7ff ffd9 	bl	800049c <SerialOutputChar>
		counter++;
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3301      	adds	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
		pt++;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3301      	adds	r3, #1
 80004f4:	607b      	str	r3, [r7, #4]
	while(*pt) {
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d1ef      	bne.n	80004de <SerialOutputString+0x10>
	}

	serial_port->completion_function(counter);
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000502:	68f8      	ldr	r0, [r7, #12]
 8000504:	4798      	blx	r3
}
 8000506:	bf00      	nop
 8000508:	3710      	adds	r7, #16
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
	...

08000510 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	@ (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000514:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000518:	480c      	ldr	r0, [pc, #48]	@ (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 800051a:	490d      	ldr	r1, [pc, #52]	@ (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 800051c:	4a0d      	ldr	r2, [pc, #52]	@ (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000520:	e002      	b.n	8000528 <LoopCopyDataInit>

08000522 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000522:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000524:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000526:	3304      	adds	r3, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000528:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800052a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800052c:	d3f9      	bcc.n	8000522 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052e:	4a0a      	ldr	r2, [pc, #40]	@ (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000530:	4c0a      	ldr	r4, [pc, #40]	@ (800055c <LoopForever+0x16>)
  movs r3, #0
 8000532:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000534:	e001      	b.n	800053a <LoopFillZerobss>

08000536 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000536:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000538:	3204      	adds	r2, #4

0800053a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800053a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800053c:	d3fb      	bcc.n	8000536 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800053e:	f000 f811 	bl	8000564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000542:	f7ff fe8f 	bl	8000264 <main>

08000546 <LoopForever>:

LoopForever:
  b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000554:	080005e0 	.word	0x080005e0
  ldr r2, =_sbss
 8000558:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800055c:	20000070 	.word	0x20000070

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>
	...

08000564 <__libc_init_array>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	4d0d      	ldr	r5, [pc, #52]	@ (800059c <__libc_init_array+0x38>)
 8000568:	4c0d      	ldr	r4, [pc, #52]	@ (80005a0 <__libc_init_array+0x3c>)
 800056a:	1b64      	subs	r4, r4, r5
 800056c:	10a4      	asrs	r4, r4, #2
 800056e:	2600      	movs	r6, #0
 8000570:	42a6      	cmp	r6, r4
 8000572:	d109      	bne.n	8000588 <__libc_init_array+0x24>
 8000574:	4d0b      	ldr	r5, [pc, #44]	@ (80005a4 <__libc_init_array+0x40>)
 8000576:	4c0c      	ldr	r4, [pc, #48]	@ (80005a8 <__libc_init_array+0x44>)
 8000578:	f000 f818 	bl	80005ac <_init>
 800057c:	1b64      	subs	r4, r4, r5
 800057e:	10a4      	asrs	r4, r4, #2
 8000580:	2600      	movs	r6, #0
 8000582:	42a6      	cmp	r6, r4
 8000584:	d105      	bne.n	8000592 <__libc_init_array+0x2e>
 8000586:	bd70      	pop	{r4, r5, r6, pc}
 8000588:	f855 3b04 	ldr.w	r3, [r5], #4
 800058c:	4798      	blx	r3
 800058e:	3601      	adds	r6, #1
 8000590:	e7ee      	b.n	8000570 <__libc_init_array+0xc>
 8000592:	f855 3b04 	ldr.w	r3, [r5], #4
 8000596:	4798      	blx	r3
 8000598:	3601      	adds	r6, #1
 800059a:	e7f2      	b.n	8000582 <__libc_init_array+0x1e>
 800059c:	080005d8 	.word	0x080005d8
 80005a0:	080005d8 	.word	0x080005d8
 80005a4:	080005d8 	.word	0x080005d8
 80005a8:	080005dc 	.word	0x080005dc

080005ac <_init>:
 80005ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ae:	bf00      	nop
 80005b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b2:	bc08      	pop	{r3}
 80005b4:	469e      	mov	lr, r3
 80005b6:	4770      	bx	lr

080005b8 <_fini>:
 80005b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ba:	bf00      	nop
 80005bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005be:	bc08      	pop	{r3}
 80005c0:	469e      	mov	lr, r3
 80005c2:	4770      	bx	lr
