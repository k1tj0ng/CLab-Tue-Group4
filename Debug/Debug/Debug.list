
Debug.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f18  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080010b8  080010b8  000020b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001154  08001154  0000307c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001154  08001154  00002154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800115c  0800115c  0000307c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800115c  0800115c  0000215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001160  08001160  00002160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08001164  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000307c  2**0
                  CONTENTS
 10 .bss          000001f8  2000007c  2000007c  0000307c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000274  20000274  0000307c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001603  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000700  00000000  00000000  000046af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000110  00000000  00000000  00004db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000b6  00000000  00000000  00004ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000077d  00000000  00000000  00004f76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001777  00000000  00000000  000056f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000763c3  00000000  00000000  00006e6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0007d22d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000082c  00000000  00000000  0007d270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0007da9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080010a0 	.word	0x080010a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080010a0 	.word	0x080010a0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <finished_transmission>:

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

void finished_transmission(uint32_t bytes_sent) {
 8000280:	b480      	push	{r7}
 8000282:	b085      	sub	sp, #20
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
	// This function will be called after a transmission is complete

	volatile uint32_t test = 0;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
	// make a very simple delay
	for (volatile uint32_t i = 0; i < 0x8ffff; i++) {
 800028c:	2300      	movs	r3, #0
 800028e:	60bb      	str	r3, [r7, #8]
 8000290:	e002      	b.n	8000298 <finished_transmission+0x18>
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	3301      	adds	r3, #1
 8000296:	60bb      	str	r3, [r7, #8]
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	4a05      	ldr	r2, [pc, #20]	@ (80002b0 <finished_transmission+0x30>)
 800029c:	4293      	cmp	r3, r2
 800029e:	d9f8      	bls.n	8000292 <finished_transmission+0x12>
		// waste time !
	}
}
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	3714      	adds	r7, #20
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	0008fffe 	.word	0x0008fffe

080002b4 <message_received>:
    }

    // Add other UART interrupt handling if needed (e.g., TX complete)
}

void message_received(char *message, uint32_t length) {
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
    // Process the received message here
    SerialOutputString((uint8_t*)"Message received: ", &USART1_PORT);
 80002be:	4908      	ldr	r1, [pc, #32]	@ (80002e0 <message_received+0x2c>)
 80002c0:	4808      	ldr	r0, [pc, #32]	@ (80002e4 <message_received+0x30>)
 80002c2:	f000 f8e1 	bl	8000488 <SerialOutputString>
    SerialOutputString((uint8_t*)message, &USART1_PORT);
 80002c6:	4906      	ldr	r1, [pc, #24]	@ (80002e0 <message_received+0x2c>)
 80002c8:	6878      	ldr	r0, [r7, #4]
 80002ca:	f000 f8dd 	bl	8000488 <SerialOutputString>
    SerialOutputString((uint8_t*)"\r\n", &USART1_PORT);
 80002ce:	4904      	ldr	r1, [pc, #16]	@ (80002e0 <message_received+0x2c>)
 80002d0:	4805      	ldr	r0, [pc, #20]	@ (80002e8 <message_received+0x34>)
 80002d2:	f000 f8d9 	bl	8000488 <SerialOutputString>
}
 80002d6:	bf00      	nop
 80002d8:	3708      	adds	r7, #8
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000000 	.word	0x20000000
 80002e4:	080010b8 	.word	0x080010b8
 80002e8:	080010cc 	.word	0x080010cc

080002ec <main>:


int main(void) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
	  SerialInitialise(BAUD_115200, &USART1_PORT, &finished_transmission);
 80002f2:	4a13      	ldr	r2, [pc, #76]	@ (8000340 <main+0x54>)
 80002f4:	4913      	ldr	r1, [pc, #76]	@ (8000344 <main+0x58>)
 80002f6:	2004      	movs	r0, #4
 80002f8:	f000 f82e 	bl	8000358 <SerialInitialise>

	    // Initialize interrupt-based reception with '@' as terminator
	    SerialInterruptInit(&USART1_PORT, '@');
 80002fc:	2140      	movs	r1, #64	@ 0x40
 80002fe:	4811      	ldr	r0, [pc, #68]	@ (8000344 <main+0x58>)
 8000300:	f000 f990 	bl	8000624 <SerialInterruptInit>

	    // Optional: Set a callback for message processing
	    SerialInterruptSetCallback(message_received);
 8000304:	4810      	ldr	r0, [pc, #64]	@ (8000348 <main+0x5c>)
 8000306:	f000 f9c1 	bl	800068c <SerialInterruptSetCallback>

	    // Send welcome message
	    SerialOutputString((uint8_t*)"Serial system ready. Type a message ending with @\r\n", &USART1_PORT);
 800030a:	490e      	ldr	r1, [pc, #56]	@ (8000344 <main+0x58>)
 800030c:	480f      	ldr	r0, [pc, #60]	@ (800034c <main+0x60>)
 800030e:	f000 f8bb 	bl	8000488 <SerialOutputString>

	    char input[32];

	    while (1) {
	        // Method 1: Use polling to check for messages (for simple applications)
	        if (SerialInterruptCheckMessage(input, sizeof(input))) {
 8000312:	463b      	mov	r3, r7
 8000314:	2120      	movs	r1, #32
 8000316:	4618      	mov	r0, r3
 8000318:	f000 f9c8 	bl	80006ac <SerialInterruptCheckMessage>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d0f7      	beq.n	8000312 <main+0x26>
	            // Message received, echo it back
	            SerialOutputString((uint8_t*)"\r\nPolling: You sent: ", &USART1_PORT);
 8000322:	4908      	ldr	r1, [pc, #32]	@ (8000344 <main+0x58>)
 8000324:	480a      	ldr	r0, [pc, #40]	@ (8000350 <main+0x64>)
 8000326:	f000 f8af 	bl	8000488 <SerialOutputString>
	            SerialOutputString((uint8_t*)input, &USART1_PORT);
 800032a:	463b      	mov	r3, r7
 800032c:	4905      	ldr	r1, [pc, #20]	@ (8000344 <main+0x58>)
 800032e:	4618      	mov	r0, r3
 8000330:	f000 f8aa 	bl	8000488 <SerialOutputString>
	            SerialOutputString((uint8_t*)"\r\n", &USART1_PORT);
 8000334:	4903      	ldr	r1, [pc, #12]	@ (8000344 <main+0x58>)
 8000336:	4807      	ldr	r0, [pc, #28]	@ (8000354 <main+0x68>)
 8000338:	f000 f8a6 	bl	8000488 <SerialOutputString>
	        if (SerialInterruptCheckMessage(input, sizeof(input))) {
 800033c:	e7e9      	b.n	8000312 <main+0x26>
 800033e:	bf00      	nop
 8000340:	08000281 	.word	0x08000281
 8000344:	20000000 	.word	0x20000000
 8000348:	080002b5 	.word	0x080002b5
 800034c:	080010d0 	.word	0x080010d0
 8000350:	08001104 	.word	0x08001104
 8000354:	080010cc 	.word	0x080010cc

08000358 <SerialInitialise>:


// InitialiseSerial - Initialise the serial port
// Input: baudRate is from an enumerated set

void SerialInitialise(uint32_t baudRate, SerialPort *serial_port, void (*completion_function)(uint32_t)) {
 8000358:	b480      	push	{r7}
 800035a:	b087      	sub	sp, #28
 800035c:	af00      	add	r7, sp, #0
 800035e:	60f8      	str	r0, [r7, #12]
 8000360:	60b9      	str	r1, [r7, #8]
 8000362:	607a      	str	r2, [r7, #4]

	serial_port->completion_function = completion_function;
 8000364:	68bb      	ldr	r3, [r7, #8]
 8000366:	687a      	ldr	r2, [r7, #4]
 8000368:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable clock power, system configuration clock and GPIOC
	// common to all UARTs
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800036a:	4b39      	ldr	r3, [pc, #228]	@ (8000450 <SerialInitialise+0xf8>)
 800036c:	69db      	ldr	r3, [r3, #28]
 800036e:	4a38      	ldr	r2, [pc, #224]	@ (8000450 <SerialInitialise+0xf8>)
 8000370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000374:	61d3      	str	r3, [r2, #28]
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000376:	4b36      	ldr	r3, [pc, #216]	@ (8000450 <SerialInitialise+0xf8>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	4a35      	ldr	r2, [pc, #212]	@ (8000450 <SerialInitialise+0xf8>)
 800037c:	f043 0301 	orr.w	r3, r3, #1
 8000380:	6193      	str	r3, [r2, #24]

	// enable the GPIO which is on the AHB bus
	RCC->AHBENR |= serial_port->MaskAHBENR;
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	691a      	ldr	r2, [r3, #16]
 8000386:	4b32      	ldr	r3, [pc, #200]	@ (8000450 <SerialInitialise+0xf8>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4931      	ldr	r1, [pc, #196]	@ (8000450 <SerialInitialise+0xf8>)
 800038c:	4313      	orrs	r3, r2
 800038e:	614b      	str	r3, [r1, #20]

	// set pin mode to alternate function for the specific GPIO pins
	serial_port->GPIO->MODER = serial_port->SerialPinModeValue;
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	685b      	ldr	r3, [r3, #4]
 8000394:	68ba      	ldr	r2, [r7, #8]
 8000396:	6952      	ldr	r2, [r2, #20]
 8000398:	601a      	str	r2, [r3, #0]

	// enable high speed clock for specific GPIO pins
	serial_port->GPIO->OSPEEDR = serial_port->SerialPinSpeedValue;
 800039a:	68bb      	ldr	r3, [r7, #8]
 800039c:	685b      	ldr	r3, [r3, #4]
 800039e:	68ba      	ldr	r2, [r7, #8]
 80003a0:	6992      	ldr	r2, [r2, #24]
 80003a2:	609a      	str	r2, [r3, #8]

	// set alternate function to enable USART to external pins
	serial_port->GPIO->AFR[0] |= serial_port->SerialPinAlternatePinValueLow;
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	69d9      	ldr	r1, [r3, #28]
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	685b      	ldr	r3, [r3, #4]
 80003ac:	6a1a      	ldr	r2, [r3, #32]
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	430a      	orrs	r2, r1
 80003b4:	621a      	str	r2, [r3, #32]
	serial_port->GPIO->AFR[1] |= serial_port->SerialPinAlternatePinValueHigh;
 80003b6:	68bb      	ldr	r3, [r7, #8]
 80003b8:	6a19      	ldr	r1, [r3, #32]
 80003ba:	68bb      	ldr	r3, [r7, #8]
 80003bc:	685b      	ldr	r3, [r3, #4]
 80003be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	685b      	ldr	r3, [r3, #4]
 80003c4:	430a      	orrs	r2, r1
 80003c6:	625a      	str	r2, [r3, #36]	@ 0x24

	// enable the device based on the bits defined in the serial port definition
	RCC->APB1ENR |= serial_port->MaskAPB1ENR;
 80003c8:	68bb      	ldr	r3, [r7, #8]
 80003ca:	68da      	ldr	r2, [r3, #12]
 80003cc:	4b20      	ldr	r3, [pc, #128]	@ (8000450 <SerialInitialise+0xf8>)
 80003ce:	69db      	ldr	r3, [r3, #28]
 80003d0:	491f      	ldr	r1, [pc, #124]	@ (8000450 <SerialInitialise+0xf8>)
 80003d2:	4313      	orrs	r3, r2
 80003d4:	61cb      	str	r3, [r1, #28]
	RCC->APB2ENR |= serial_port->MaskAPB2ENR;
 80003d6:	68bb      	ldr	r3, [r7, #8]
 80003d8:	689a      	ldr	r2, [r3, #8]
 80003da:	4b1d      	ldr	r3, [pc, #116]	@ (8000450 <SerialInitialise+0xf8>)
 80003dc:	699b      	ldr	r3, [r3, #24]
 80003de:	491c      	ldr	r1, [pc, #112]	@ (8000450 <SerialInitialise+0xf8>)
 80003e0:	4313      	orrs	r3, r2
 80003e2:	618b      	str	r3, [r1, #24]

	// Get a pointer to the 16 bits of the BRR register that we want to change
	uint16_t *baud_rate_config = (uint16_t*)&serial_port->UART->BRR; // only 16 bits used!
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	330c      	adds	r3, #12
 80003ea:	617b      	str	r3, [r7, #20]

	// Baud rate calculation from datasheet
	switch(baudRate){
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	2b04      	cmp	r3, #4
 80003f0:	d820      	bhi.n	8000434 <SerialInitialise+0xdc>
 80003f2:	a201      	add	r2, pc, #4	@ (adr r2, 80003f8 <SerialInitialise+0xa0>)
 80003f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003f8:	0800040d 	.word	0x0800040d
 80003fc:	08000415 	.word	0x08000415
 8000400:	0800041d 	.word	0x0800041d
 8000404:	08000425 	.word	0x08000425
 8000408:	0800042d 	.word	0x0800042d
	case BAUD_9600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800040c:	697b      	ldr	r3, [r7, #20]
 800040e:	2246      	movs	r2, #70	@ 0x46
 8000410:	801a      	strh	r2, [r3, #0]
		break;
 8000412:	e00f      	b.n	8000434 <SerialInitialise+0xdc>
	case BAUD_19200:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	2246      	movs	r2, #70	@ 0x46
 8000418:	801a      	strh	r2, [r3, #0]
		break;
 800041a:	e00b      	b.n	8000434 <SerialInitialise+0xdc>
	case BAUD_38400:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	2246      	movs	r2, #70	@ 0x46
 8000420:	801a      	strh	r2, [r3, #0]
		break;
 8000422:	e007      	b.n	8000434 <SerialInitialise+0xdc>
	case BAUD_57600:
		// NEED TO FIX THIS !
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	2246      	movs	r2, #70	@ 0x46
 8000428:	801a      	strh	r2, [r3, #0]
		break;
 800042a:	e003      	b.n	8000434 <SerialInitialise+0xdc>
	case BAUD_115200:
		*baud_rate_config = 0x46;  // 115200 at 8MHz
 800042c:	697b      	ldr	r3, [r7, #20]
 800042e:	2246      	movs	r2, #70	@ 0x46
 8000430:	801a      	strh	r2, [r3, #0]
		break;
 8000432:	bf00      	nop
	}


	// enable serial port for tx and rx
	serial_port->UART->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	f042 020d 	orr.w	r2, r2, #13
 8000442:	601a      	str	r2, [r3, #0]
}
 8000444:	bf00      	nop
 8000446:	371c      	adds	r7, #28
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <SerialOutputChar>:

void SerialOutputChar(uint8_t data, SerialPort *serial_port) {
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	4603      	mov	r3, r0
 800045c:	6039      	str	r1, [r7, #0]
 800045e:	71fb      	strb	r3, [r7, #7]

	while((serial_port->UART->ISR & USART_ISR_TXE) == 0){
 8000460:	bf00      	nop
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	69db      	ldr	r3, [r3, #28]
 8000468:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800046c:	2b00      	cmp	r3, #0
 800046e:	d0f8      	beq.n	8000462 <SerialOutputChar+0xe>
	}

	serial_port->UART->TDR = data;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	79fa      	ldrb	r2, [r7, #7]
 8000476:	b292      	uxth	r2, r2
 8000478:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <SerialOutputString>:



void SerialOutputString(uint8_t *pt, SerialPort *serial_port) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b088      	sub	sp, #32
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]

	uint32_t counter = 0;
 8000492:	2300      	movs	r3, #0
 8000494:	61fb      	str	r3, [r7, #28]
	SerialOutputChar('\n', serial_port);
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	200a      	movs	r0, #10
 800049a:	f7ff ffdb 	bl	8000454 <SerialOutputChar>
	while (*pt) {
 800049e:	e01c      	b.n	80004da <SerialOutputString+0x52>
		// SerialOutputChar('\n', serial_port);
		if (*pt != '\n' && *pt != '\r') {
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	2b0a      	cmp	r3, #10
 80004a6:	d00d      	beq.n	80004c4 <SerialOutputString+0x3c>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2b0d      	cmp	r3, #13
 80004ae:	d009      	beq.n	80004c4 <SerialOutputString+0x3c>
			SerialOutputChar(*pt, serial_port);
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	6839      	ldr	r1, [r7, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff ffcc 	bl	8000454 <SerialOutputChar>
			counter++;
 80004bc:	69fb      	ldr	r3, [r7, #28]
 80004be:	3301      	adds	r3, #1
 80004c0:	61fb      	str	r3, [r7, #28]
 80004c2:	e007      	b.n	80004d4 <SerialOutputString+0x4c>
		}
		else if (*pt == '\n'){
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b0a      	cmp	r3, #10
 80004ca:	d103      	bne.n	80004d4 <SerialOutputString+0x4c>
			SerialOutputChar('\n', serial_port);
 80004cc:	6839      	ldr	r1, [r7, #0]
 80004ce:	200a      	movs	r0, #10
 80004d0:	f7ff ffc0 	bl	8000454 <SerialOutputChar>
		}
		pt++;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	3301      	adds	r3, #1
 80004d8:	607b      	str	r3, [r7, #4]
	while (*pt) {
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d1de      	bne.n	80004a0 <SerialOutputString+0x18>
	}

	char buffer[10];
	sprintf(buffer, "%d", counter);
 80004e2:	f107 030c 	add.w	r3, r7, #12
 80004e6:	69fa      	ldr	r2, [r7, #28]
 80004e8:	490e      	ldr	r1, [pc, #56]	@ (8000524 <SerialOutputString+0x9c>)
 80004ea:	4618      	mov	r0, r3
 80004ec:	f000 f940 	bl	8000770 <siprintf>
	char *ptr = buffer;
 80004f0:	f107 030c 	add.w	r3, r7, #12
 80004f4:	61bb      	str	r3, [r7, #24]
//	SerialOutputChar(*ptr, serial_port);

	while (*ptr) {
 80004f6:	e008      	b.n	800050a <SerialOutputString+0x82>
		SerialOutputChar(*ptr, serial_port);
 80004f8:	69bb      	ldr	r3, [r7, #24]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	6839      	ldr	r1, [r7, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f7ff ffa8 	bl	8000454 <SerialOutputChar>
		ptr++;
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	3301      	adds	r3, #1
 8000508:	61bb      	str	r3, [r7, #24]
	while (*ptr) {
 800050a:	69bb      	ldr	r3, [r7, #24]
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	d1f2      	bne.n	80004f8 <SerialOutputString+0x70>
	}

	serial_port->completion_function(counter);
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000516:	69f8      	ldr	r0, [r7, #28]
 8000518:	4798      	blx	r3
}
 800051a:	bf00      	nop
 800051c:	3720      	adds	r7, #32
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	0800111c 	.word	0x0800111c

08000528 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b086      	sub	sp, #24
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000530:	4a14      	ldr	r2, [pc, #80]	@ (8000584 <_sbrk+0x5c>)
 8000532:	4b15      	ldr	r3, [pc, #84]	@ (8000588 <_sbrk+0x60>)
 8000534:	1ad3      	subs	r3, r2, r3
 8000536:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000538:	697b      	ldr	r3, [r7, #20]
 800053a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800053c:	4b13      	ldr	r3, [pc, #76]	@ (800058c <_sbrk+0x64>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000544:	4b11      	ldr	r3, [pc, #68]	@ (800058c <_sbrk+0x64>)
 8000546:	4a12      	ldr	r2, [pc, #72]	@ (8000590 <_sbrk+0x68>)
 8000548:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054a:	4b10      	ldr	r3, [pc, #64]	@ (800058c <_sbrk+0x64>)
 800054c:	681a      	ldr	r2, [r3, #0]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4413      	add	r3, r2
 8000552:	693a      	ldr	r2, [r7, #16]
 8000554:	429a      	cmp	r2, r3
 8000556:	d207      	bcs.n	8000568 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000558:	f000 f92c 	bl	80007b4 <__errno>
 800055c:	4603      	mov	r3, r0
 800055e:	220c      	movs	r2, #12
 8000560:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000566:	e009      	b.n	800057c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000568:	4b08      	ldr	r3, [pc, #32]	@ (800058c <_sbrk+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800056e:	4b07      	ldr	r3, [pc, #28]	@ (800058c <_sbrk+0x64>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	4413      	add	r3, r2
 8000576:	4a05      	ldr	r2, [pc, #20]	@ (800058c <_sbrk+0x64>)
 8000578:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057a:	68fb      	ldr	r3, [r7, #12]
}
 800057c:	4618      	mov	r0, r3
 800057e:	3718      	adds	r7, #24
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	2000a000 	.word	0x2000a000
 8000588:	00000400 	.word	0x00000400
 800058c:	20000098 	.word	0x20000098
 8000590:	20000278 	.word	0x20000278

08000594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800059e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	db0b      	blt.n	80005be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	f003 021f 	and.w	r2, r3, #31
 80005ac:	4907      	ldr	r1, [pc, #28]	@ (80005cc <__NVIC_EnableIRQ+0x38>)
 80005ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b2:	095b      	lsrs	r3, r3, #5
 80005b4:	2001      	movs	r0, #1
 80005b6:	fa00 f202 	lsl.w	r2, r0, r2
 80005ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000e100 	.word	0xe000e100

080005d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	6039      	str	r1, [r7, #0]
 80005da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	db0a      	blt.n	80005fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	490c      	ldr	r1, [pc, #48]	@ (800061c <__NVIC_SetPriority+0x4c>)
 80005ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ee:	0112      	lsls	r2, r2, #4
 80005f0:	b2d2      	uxtb	r2, r2
 80005f2:	440b      	add	r3, r1
 80005f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005f8:	e00a      	b.n	8000610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4908      	ldr	r1, [pc, #32]	@ (8000620 <__NVIC_SetPriority+0x50>)
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	3b04      	subs	r3, #4
 8000608:	0112      	lsls	r2, r2, #4
 800060a:	b2d2      	uxtb	r2, r2
 800060c:	440b      	add	r3, r1
 800060e:	761a      	strb	r2, [r3, #24]
}
 8000610:	bf00      	nop
 8000612:	370c      	adds	r7, #12
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000e100 	.word	0xe000e100
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <SerialInterruptInit>:
static SerialPort *current_serial_port = NULL;

// Optional callback function for when message is complete
static void (*message_callback)(char*, uint32_t) = NULL;

void SerialInterruptInit(SerialPort *serial_port, char terminator) {
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	460b      	mov	r3, r1
 800062e:	70fb      	strb	r3, [r7, #3]
    // Store the serial port for later use
    current_serial_port = serial_port;
 8000630:	4a11      	ldr	r2, [pc, #68]	@ (8000678 <SerialInterruptInit+0x54>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6013      	str	r3, [r2, #0]

    // Set the terminator character
    terminator_char = terminator;
 8000636:	4a11      	ldr	r2, [pc, #68]	@ (800067c <SerialInterruptInit+0x58>)
 8000638:	78fb      	ldrb	r3, [r7, #3]
 800063a:	7013      	strb	r3, [r2, #0]

    // Reset buffer state
    rx_index = 0;
 800063c:	4b10      	ldr	r3, [pc, #64]	@ (8000680 <SerialInterruptInit+0x5c>)
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
    rx_complete = 0;
 8000642:	4b10      	ldr	r3, [pc, #64]	@ (8000684 <SerialInterruptInit+0x60>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]

    // Enable RXNE interrupt (Receive register not empty)
    serial_port->UART->CR1 |= USART_CR1_RXNEIE;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f042 0220 	orr.w	r2, r2, #32
 8000656:	601a      	str	r2, [r3, #0]

    // Enable USART interrupt in NVIC
    if (serial_port->UART == USART1) {
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a0a      	ldr	r2, [pc, #40]	@ (8000688 <SerialInterruptInit+0x64>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <SerialInterruptInit+0x4c>
        NVIC_SetPriority(USART1_IRQn, 3);
 8000662:	2103      	movs	r1, #3
 8000664:	2025      	movs	r0, #37	@ 0x25
 8000666:	f7ff ffb3 	bl	80005d0 <__NVIC_SetPriority>
        NVIC_EnableIRQ(USART1_IRQn);
 800066a:	2025      	movs	r0, #37	@ 0x25
 800066c:	f7ff ff92 	bl	8000594 <__NVIC_EnableIRQ>
    // Add more UARTs as needed:
    // else if (serial_port->UART == USART2) {
    //     NVIC_SetPriority(USART2_IRQn, 3);
    //     NVIC_EnableIRQ(USART2_IRQn);
    // }
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000124 	.word	0x20000124
 800067c:	20000028 	.word	0x20000028
 8000680:	2000011c 	.word	0x2000011c
 8000684:	20000120 	.word	0x20000120
 8000688:	40013800 	.word	0x40013800

0800068c <SerialInterruptSetCallback>:

void SerialInterruptSetTerminator(char terminator) {
    terminator_char = terminator;
}

void SerialInterruptSetCallback(void (*rx_callback)(char*, uint32_t)) {
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
    message_callback = rx_callback;
 8000694:	4a04      	ldr	r2, [pc, #16]	@ (80006a8 <SerialInterruptSetCallback+0x1c>)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	6013      	str	r3, [r2, #0]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	20000128 	.word	0x20000128

080006ac <SerialInterruptCheckMessage>:

uint8_t SerialInterruptCheckMessage(char *buffer, uint32_t buffer_size) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
    if (rx_complete) {
 80006b6:	4b16      	ldr	r3, [pc, #88]	@ (8000710 <SerialInterruptCheckMessage+0x64>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d021      	beq.n	8000704 <SerialInterruptCheckMessage+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
        // Critical section - disable interrupts
        __disable_irq();

        // Copy data from the receive buffer to the output buffer
        uint32_t len = (rx_index < buffer_size - 1) ? rx_index : buffer_size - 1;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1e5a      	subs	r2, r3, #1
 80006c8:	4b12      	ldr	r3, [pc, #72]	@ (8000714 <SerialInterruptCheckMessage+0x68>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d802      	bhi.n	80006d6 <SerialInterruptCheckMessage+0x2a>
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	3b01      	subs	r3, #1
 80006d4:	e001      	b.n	80006da <SerialInterruptCheckMessage+0x2e>
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <SerialInterruptCheckMessage+0x68>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	60fb      	str	r3, [r7, #12]
        memcpy(buffer, (const char*)rx_buffer, len);
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	490e      	ldr	r1, [pc, #56]	@ (8000718 <SerialInterruptCheckMessage+0x6c>)
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 f893 	bl	800080c <memcpy>
        buffer[len] = '\0'; // Ensure null termination
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	4413      	add	r3, r2
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]

        // Reset receive buffer
        rx_index = 0;
 80006f0:	4b08      	ldr	r3, [pc, #32]	@ (8000714 <SerialInterruptCheckMessage+0x68>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	601a      	str	r2, [r3, #0]
        rx_complete = 0;
 80006f6:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <SerialInterruptCheckMessage+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80006fc:	b662      	cpsie	i
}
 80006fe:	bf00      	nop

        // Re-enable interrupts
        __enable_irq();

        return 1; // Data was available
 8000700:	2301      	movs	r3, #1
 8000702:	e000      	b.n	8000706 <SerialInterruptCheckMessage+0x5a>
    }

    return 0; // No data available
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3710      	adds	r7, #16
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000120 	.word	0x20000120
 8000714:	2000011c 	.word	0x2000011c
 8000718:	2000009c 	.word	0x2000009c

0800071c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800071c:	480d      	ldr	r0, [pc, #52]	@ (8000754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800071e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000720:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000724:	480c      	ldr	r0, [pc, #48]	@ (8000758 <LoopForever+0x6>)
  ldr r1, =_edata
 8000726:	490d      	ldr	r1, [pc, #52]	@ (800075c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000728:	4a0d      	ldr	r2, [pc, #52]	@ (8000760 <LoopForever+0xe>)
  movs r3, #0
 800072a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800072c:	e002      	b.n	8000734 <LoopCopyDataInit>

0800072e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800072e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000732:	3304      	adds	r3, #4

08000734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000738:	d3f9      	bcc.n	800072e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800073a:	4a0a      	ldr	r2, [pc, #40]	@ (8000764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800073c:	4c0a      	ldr	r4, [pc, #40]	@ (8000768 <LoopForever+0x16>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000740:	e001      	b.n	8000746 <LoopFillZerobss>

08000742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000744:	3204      	adds	r2, #4

08000746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000748:	d3fb      	bcc.n	8000742 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800074a:	f000 f839 	bl	80007c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800074e:	f7ff fdcd 	bl	80002ec <main>

08000752 <LoopForever>:

LoopForever:
  b LoopForever
 8000752:	e7fe      	b.n	8000752 <LoopForever>
  ldr   r0, =_estack
 8000754:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800075c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000760:	08001164 	.word	0x08001164
  ldr r2, =_sbss
 8000764:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000768:	20000274 	.word	0x20000274

0800076c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800076c:	e7fe      	b.n	800076c <ADC1_2_IRQHandler>
	...

08000770 <siprintf>:
 8000770:	b40e      	push	{r1, r2, r3}
 8000772:	b510      	push	{r4, lr}
 8000774:	b09d      	sub	sp, #116	@ 0x74
 8000776:	ab1f      	add	r3, sp, #124	@ 0x7c
 8000778:	9002      	str	r0, [sp, #8]
 800077a:	9006      	str	r0, [sp, #24]
 800077c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8000780:	480a      	ldr	r0, [pc, #40]	@ (80007ac <siprintf+0x3c>)
 8000782:	9107      	str	r1, [sp, #28]
 8000784:	9104      	str	r1, [sp, #16]
 8000786:	490a      	ldr	r1, [pc, #40]	@ (80007b0 <siprintf+0x40>)
 8000788:	f853 2b04 	ldr.w	r2, [r3], #4
 800078c:	9105      	str	r1, [sp, #20]
 800078e:	2400      	movs	r4, #0
 8000790:	a902      	add	r1, sp, #8
 8000792:	6800      	ldr	r0, [r0, #0]
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	941b      	str	r4, [sp, #108]	@ 0x6c
 8000798:	f000 f8ec 	bl	8000974 <_svfiprintf_r>
 800079c:	9b02      	ldr	r3, [sp, #8]
 800079e:	701c      	strb	r4, [r3, #0]
 80007a0:	b01d      	add	sp, #116	@ 0x74
 80007a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007a6:	b003      	add	sp, #12
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	2000002c 	.word	0x2000002c
 80007b0:	ffff0208 	.word	0xffff0208

080007b4 <__errno>:
 80007b4:	4b01      	ldr	r3, [pc, #4]	@ (80007bc <__errno+0x8>)
 80007b6:	6818      	ldr	r0, [r3, #0]
 80007b8:	4770      	bx	lr
 80007ba:	bf00      	nop
 80007bc:	2000002c 	.word	0x2000002c

080007c0 <__libc_init_array>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	4d0d      	ldr	r5, [pc, #52]	@ (80007f8 <__libc_init_array+0x38>)
 80007c4:	4c0d      	ldr	r4, [pc, #52]	@ (80007fc <__libc_init_array+0x3c>)
 80007c6:	1b64      	subs	r4, r4, r5
 80007c8:	10a4      	asrs	r4, r4, #2
 80007ca:	2600      	movs	r6, #0
 80007cc:	42a6      	cmp	r6, r4
 80007ce:	d109      	bne.n	80007e4 <__libc_init_array+0x24>
 80007d0:	4d0b      	ldr	r5, [pc, #44]	@ (8000800 <__libc_init_array+0x40>)
 80007d2:	4c0c      	ldr	r4, [pc, #48]	@ (8000804 <__libc_init_array+0x44>)
 80007d4:	f000 fc64 	bl	80010a0 <_init>
 80007d8:	1b64      	subs	r4, r4, r5
 80007da:	10a4      	asrs	r4, r4, #2
 80007dc:	2600      	movs	r6, #0
 80007de:	42a6      	cmp	r6, r4
 80007e0:	d105      	bne.n	80007ee <__libc_init_array+0x2e>
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80007e8:	4798      	blx	r3
 80007ea:	3601      	adds	r6, #1
 80007ec:	e7ee      	b.n	80007cc <__libc_init_array+0xc>
 80007ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80007f2:	4798      	blx	r3
 80007f4:	3601      	adds	r6, #1
 80007f6:	e7f2      	b.n	80007de <__libc_init_array+0x1e>
 80007f8:	0800115c 	.word	0x0800115c
 80007fc:	0800115c 	.word	0x0800115c
 8000800:	0800115c 	.word	0x0800115c
 8000804:	08001160 	.word	0x08001160

08000808 <__retarget_lock_acquire_recursive>:
 8000808:	4770      	bx	lr

0800080a <__retarget_lock_release_recursive>:
 800080a:	4770      	bx	lr

0800080c <memcpy>:
 800080c:	440a      	add	r2, r1
 800080e:	4291      	cmp	r1, r2
 8000810:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8000814:	d100      	bne.n	8000818 <memcpy+0xc>
 8000816:	4770      	bx	lr
 8000818:	b510      	push	{r4, lr}
 800081a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800081e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000822:	4291      	cmp	r1, r2
 8000824:	d1f9      	bne.n	800081a <memcpy+0xe>
 8000826:	bd10      	pop	{r4, pc}

08000828 <_free_r>:
 8000828:	b538      	push	{r3, r4, r5, lr}
 800082a:	4605      	mov	r5, r0
 800082c:	2900      	cmp	r1, #0
 800082e:	d041      	beq.n	80008b4 <_free_r+0x8c>
 8000830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000834:	1f0c      	subs	r4, r1, #4
 8000836:	2b00      	cmp	r3, #0
 8000838:	bfb8      	it	lt
 800083a:	18e4      	addlt	r4, r4, r3
 800083c:	f000 fbc4 	bl	8000fc8 <__malloc_lock>
 8000840:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <_free_r+0x90>)
 8000842:	6813      	ldr	r3, [r2, #0]
 8000844:	b933      	cbnz	r3, 8000854 <_free_r+0x2c>
 8000846:	6063      	str	r3, [r4, #4]
 8000848:	6014      	str	r4, [r2, #0]
 800084a:	4628      	mov	r0, r5
 800084c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000850:	f000 bbc0 	b.w	8000fd4 <__malloc_unlock>
 8000854:	42a3      	cmp	r3, r4
 8000856:	d908      	bls.n	800086a <_free_r+0x42>
 8000858:	6820      	ldr	r0, [r4, #0]
 800085a:	1821      	adds	r1, r4, r0
 800085c:	428b      	cmp	r3, r1
 800085e:	bf01      	itttt	eq
 8000860:	6819      	ldreq	r1, [r3, #0]
 8000862:	685b      	ldreq	r3, [r3, #4]
 8000864:	1809      	addeq	r1, r1, r0
 8000866:	6021      	streq	r1, [r4, #0]
 8000868:	e7ed      	b.n	8000846 <_free_r+0x1e>
 800086a:	461a      	mov	r2, r3
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	b10b      	cbz	r3, 8000874 <_free_r+0x4c>
 8000870:	42a3      	cmp	r3, r4
 8000872:	d9fa      	bls.n	800086a <_free_r+0x42>
 8000874:	6811      	ldr	r1, [r2, #0]
 8000876:	1850      	adds	r0, r2, r1
 8000878:	42a0      	cmp	r0, r4
 800087a:	d10b      	bne.n	8000894 <_free_r+0x6c>
 800087c:	6820      	ldr	r0, [r4, #0]
 800087e:	4401      	add	r1, r0
 8000880:	1850      	adds	r0, r2, r1
 8000882:	4283      	cmp	r3, r0
 8000884:	6011      	str	r1, [r2, #0]
 8000886:	d1e0      	bne.n	800084a <_free_r+0x22>
 8000888:	6818      	ldr	r0, [r3, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	6053      	str	r3, [r2, #4]
 800088e:	4408      	add	r0, r1
 8000890:	6010      	str	r0, [r2, #0]
 8000892:	e7da      	b.n	800084a <_free_r+0x22>
 8000894:	d902      	bls.n	800089c <_free_r+0x74>
 8000896:	230c      	movs	r3, #12
 8000898:	602b      	str	r3, [r5, #0]
 800089a:	e7d6      	b.n	800084a <_free_r+0x22>
 800089c:	6820      	ldr	r0, [r4, #0]
 800089e:	1821      	adds	r1, r4, r0
 80008a0:	428b      	cmp	r3, r1
 80008a2:	bf04      	itt	eq
 80008a4:	6819      	ldreq	r1, [r3, #0]
 80008a6:	685b      	ldreq	r3, [r3, #4]
 80008a8:	6063      	str	r3, [r4, #4]
 80008aa:	bf04      	itt	eq
 80008ac:	1809      	addeq	r1, r1, r0
 80008ae:	6021      	streq	r1, [r4, #0]
 80008b0:	6054      	str	r4, [r2, #4]
 80008b2:	e7ca      	b.n	800084a <_free_r+0x22>
 80008b4:	bd38      	pop	{r3, r4, r5, pc}
 80008b6:	bf00      	nop
 80008b8:	20000270 	.word	0x20000270

080008bc <__ssputs_r>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	688e      	ldr	r6, [r1, #8]
 80008c2:	461f      	mov	r7, r3
 80008c4:	42be      	cmp	r6, r7
 80008c6:	680b      	ldr	r3, [r1, #0]
 80008c8:	4682      	mov	sl, r0
 80008ca:	460c      	mov	r4, r1
 80008cc:	4690      	mov	r8, r2
 80008ce:	d82d      	bhi.n	800092c <__ssputs_r+0x70>
 80008d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80008d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80008d8:	d026      	beq.n	8000928 <__ssputs_r+0x6c>
 80008da:	6965      	ldr	r5, [r4, #20]
 80008dc:	6909      	ldr	r1, [r1, #16]
 80008de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80008e2:	eba3 0901 	sub.w	r9, r3, r1
 80008e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80008ea:	1c7b      	adds	r3, r7, #1
 80008ec:	444b      	add	r3, r9
 80008ee:	106d      	asrs	r5, r5, #1
 80008f0:	429d      	cmp	r5, r3
 80008f2:	bf38      	it	cc
 80008f4:	461d      	movcc	r5, r3
 80008f6:	0553      	lsls	r3, r2, #21
 80008f8:	d527      	bpl.n	800094a <__ssputs_r+0x8e>
 80008fa:	4629      	mov	r1, r5
 80008fc:	f000 f958 	bl	8000bb0 <_malloc_r>
 8000900:	4606      	mov	r6, r0
 8000902:	b360      	cbz	r0, 800095e <__ssputs_r+0xa2>
 8000904:	6921      	ldr	r1, [r4, #16]
 8000906:	464a      	mov	r2, r9
 8000908:	f7ff ff80 	bl	800080c <memcpy>
 800090c:	89a3      	ldrh	r3, [r4, #12]
 800090e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8000912:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000916:	81a3      	strh	r3, [r4, #12]
 8000918:	6126      	str	r6, [r4, #16]
 800091a:	6165      	str	r5, [r4, #20]
 800091c:	444e      	add	r6, r9
 800091e:	eba5 0509 	sub.w	r5, r5, r9
 8000922:	6026      	str	r6, [r4, #0]
 8000924:	60a5      	str	r5, [r4, #8]
 8000926:	463e      	mov	r6, r7
 8000928:	42be      	cmp	r6, r7
 800092a:	d900      	bls.n	800092e <__ssputs_r+0x72>
 800092c:	463e      	mov	r6, r7
 800092e:	6820      	ldr	r0, [r4, #0]
 8000930:	4632      	mov	r2, r6
 8000932:	4641      	mov	r1, r8
 8000934:	f000 fb82 	bl	800103c <memmove>
 8000938:	68a3      	ldr	r3, [r4, #8]
 800093a:	1b9b      	subs	r3, r3, r6
 800093c:	60a3      	str	r3, [r4, #8]
 800093e:	6823      	ldr	r3, [r4, #0]
 8000940:	4433      	add	r3, r6
 8000942:	6023      	str	r3, [r4, #0]
 8000944:	2000      	movs	r0, #0
 8000946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800094a:	462a      	mov	r2, r5
 800094c:	f000 fb48 	bl	8000fe0 <_realloc_r>
 8000950:	4606      	mov	r6, r0
 8000952:	2800      	cmp	r0, #0
 8000954:	d1e0      	bne.n	8000918 <__ssputs_r+0x5c>
 8000956:	6921      	ldr	r1, [r4, #16]
 8000958:	4650      	mov	r0, sl
 800095a:	f7ff ff65 	bl	8000828 <_free_r>
 800095e:	230c      	movs	r3, #12
 8000960:	f8ca 3000 	str.w	r3, [sl]
 8000964:	89a3      	ldrh	r3, [r4, #12]
 8000966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800096a:	81a3      	strh	r3, [r4, #12]
 800096c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000970:	e7e9      	b.n	8000946 <__ssputs_r+0x8a>
	...

08000974 <_svfiprintf_r>:
 8000974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000978:	4698      	mov	r8, r3
 800097a:	898b      	ldrh	r3, [r1, #12]
 800097c:	061b      	lsls	r3, r3, #24
 800097e:	b09d      	sub	sp, #116	@ 0x74
 8000980:	4607      	mov	r7, r0
 8000982:	460d      	mov	r5, r1
 8000984:	4614      	mov	r4, r2
 8000986:	d510      	bpl.n	80009aa <_svfiprintf_r+0x36>
 8000988:	690b      	ldr	r3, [r1, #16]
 800098a:	b973      	cbnz	r3, 80009aa <_svfiprintf_r+0x36>
 800098c:	2140      	movs	r1, #64	@ 0x40
 800098e:	f000 f90f 	bl	8000bb0 <_malloc_r>
 8000992:	6028      	str	r0, [r5, #0]
 8000994:	6128      	str	r0, [r5, #16]
 8000996:	b930      	cbnz	r0, 80009a6 <_svfiprintf_r+0x32>
 8000998:	230c      	movs	r3, #12
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009a0:	b01d      	add	sp, #116	@ 0x74
 80009a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009a6:	2340      	movs	r3, #64	@ 0x40
 80009a8:	616b      	str	r3, [r5, #20]
 80009aa:	2300      	movs	r3, #0
 80009ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80009ae:	2320      	movs	r3, #32
 80009b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80009b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80009b8:	2330      	movs	r3, #48	@ 0x30
 80009ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8000b58 <_svfiprintf_r+0x1e4>
 80009be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80009c2:	f04f 0901 	mov.w	r9, #1
 80009c6:	4623      	mov	r3, r4
 80009c8:	469a      	mov	sl, r3
 80009ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80009ce:	b10a      	cbz	r2, 80009d4 <_svfiprintf_r+0x60>
 80009d0:	2a25      	cmp	r2, #37	@ 0x25
 80009d2:	d1f9      	bne.n	80009c8 <_svfiprintf_r+0x54>
 80009d4:	ebba 0b04 	subs.w	fp, sl, r4
 80009d8:	d00b      	beq.n	80009f2 <_svfiprintf_r+0x7e>
 80009da:	465b      	mov	r3, fp
 80009dc:	4622      	mov	r2, r4
 80009de:	4629      	mov	r1, r5
 80009e0:	4638      	mov	r0, r7
 80009e2:	f7ff ff6b 	bl	80008bc <__ssputs_r>
 80009e6:	3001      	adds	r0, #1
 80009e8:	f000 80a7 	beq.w	8000b3a <_svfiprintf_r+0x1c6>
 80009ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80009ee:	445a      	add	r2, fp
 80009f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80009f2:	f89a 3000 	ldrb.w	r3, [sl]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f000 809f 	beq.w	8000b3a <_svfiprintf_r+0x1c6>
 80009fc:	2300      	movs	r3, #0
 80009fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000a06:	f10a 0a01 	add.w	sl, sl, #1
 8000a0a:	9304      	str	r3, [sp, #16]
 8000a0c:	9307      	str	r3, [sp, #28]
 8000a0e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000a12:	931a      	str	r3, [sp, #104]	@ 0x68
 8000a14:	4654      	mov	r4, sl
 8000a16:	2205      	movs	r2, #5
 8000a18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a1c:	484e      	ldr	r0, [pc, #312]	@ (8000b58 <_svfiprintf_r+0x1e4>)
 8000a1e:	f7ff fbdf 	bl	80001e0 <memchr>
 8000a22:	9a04      	ldr	r2, [sp, #16]
 8000a24:	b9d8      	cbnz	r0, 8000a5e <_svfiprintf_r+0xea>
 8000a26:	06d0      	lsls	r0, r2, #27
 8000a28:	bf44      	itt	mi
 8000a2a:	2320      	movmi	r3, #32
 8000a2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a30:	0711      	lsls	r1, r2, #28
 8000a32:	bf44      	itt	mi
 8000a34:	232b      	movmi	r3, #43	@ 0x2b
 8000a36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000a3a:	f89a 3000 	ldrb.w	r3, [sl]
 8000a3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a40:	d015      	beq.n	8000a6e <_svfiprintf_r+0xfa>
 8000a42:	9a07      	ldr	r2, [sp, #28]
 8000a44:	4654      	mov	r4, sl
 8000a46:	2000      	movs	r0, #0
 8000a48:	f04f 0c0a 	mov.w	ip, #10
 8000a4c:	4621      	mov	r1, r4
 8000a4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000a52:	3b30      	subs	r3, #48	@ 0x30
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	d94b      	bls.n	8000af0 <_svfiprintf_r+0x17c>
 8000a58:	b1b0      	cbz	r0, 8000a88 <_svfiprintf_r+0x114>
 8000a5a:	9207      	str	r2, [sp, #28]
 8000a5c:	e014      	b.n	8000a88 <_svfiprintf_r+0x114>
 8000a5e:	eba0 0308 	sub.w	r3, r0, r8
 8000a62:	fa09 f303 	lsl.w	r3, r9, r3
 8000a66:	4313      	orrs	r3, r2
 8000a68:	9304      	str	r3, [sp, #16]
 8000a6a:	46a2      	mov	sl, r4
 8000a6c:	e7d2      	b.n	8000a14 <_svfiprintf_r+0xa0>
 8000a6e:	9b03      	ldr	r3, [sp, #12]
 8000a70:	1d19      	adds	r1, r3, #4
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	9103      	str	r1, [sp, #12]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	bfbb      	ittet	lt
 8000a7a:	425b      	neglt	r3, r3
 8000a7c:	f042 0202 	orrlt.w	r2, r2, #2
 8000a80:	9307      	strge	r3, [sp, #28]
 8000a82:	9307      	strlt	r3, [sp, #28]
 8000a84:	bfb8      	it	lt
 8000a86:	9204      	strlt	r2, [sp, #16]
 8000a88:	7823      	ldrb	r3, [r4, #0]
 8000a8a:	2b2e      	cmp	r3, #46	@ 0x2e
 8000a8c:	d10a      	bne.n	8000aa4 <_svfiprintf_r+0x130>
 8000a8e:	7863      	ldrb	r3, [r4, #1]
 8000a90:	2b2a      	cmp	r3, #42	@ 0x2a
 8000a92:	d132      	bne.n	8000afa <_svfiprintf_r+0x186>
 8000a94:	9b03      	ldr	r3, [sp, #12]
 8000a96:	1d1a      	adds	r2, r3, #4
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	9203      	str	r2, [sp, #12]
 8000a9c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000aa0:	3402      	adds	r4, #2
 8000aa2:	9305      	str	r3, [sp, #20]
 8000aa4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8000b68 <_svfiprintf_r+0x1f4>
 8000aa8:	7821      	ldrb	r1, [r4, #0]
 8000aaa:	2203      	movs	r2, #3
 8000aac:	4650      	mov	r0, sl
 8000aae:	f7ff fb97 	bl	80001e0 <memchr>
 8000ab2:	b138      	cbz	r0, 8000ac4 <_svfiprintf_r+0x150>
 8000ab4:	9b04      	ldr	r3, [sp, #16]
 8000ab6:	eba0 000a 	sub.w	r0, r0, sl
 8000aba:	2240      	movs	r2, #64	@ 0x40
 8000abc:	4082      	lsls	r2, r0
 8000abe:	4313      	orrs	r3, r2
 8000ac0:	3401      	adds	r4, #1
 8000ac2:	9304      	str	r3, [sp, #16]
 8000ac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000ac8:	4824      	ldr	r0, [pc, #144]	@ (8000b5c <_svfiprintf_r+0x1e8>)
 8000aca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000ace:	2206      	movs	r2, #6
 8000ad0:	f7ff fb86 	bl	80001e0 <memchr>
 8000ad4:	2800      	cmp	r0, #0
 8000ad6:	d036      	beq.n	8000b46 <_svfiprintf_r+0x1d2>
 8000ad8:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <_svfiprintf_r+0x1ec>)
 8000ada:	bb1b      	cbnz	r3, 8000b24 <_svfiprintf_r+0x1b0>
 8000adc:	9b03      	ldr	r3, [sp, #12]
 8000ade:	3307      	adds	r3, #7
 8000ae0:	f023 0307 	bic.w	r3, r3, #7
 8000ae4:	3308      	adds	r3, #8
 8000ae6:	9303      	str	r3, [sp, #12]
 8000ae8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000aea:	4433      	add	r3, r6
 8000aec:	9309      	str	r3, [sp, #36]	@ 0x24
 8000aee:	e76a      	b.n	80009c6 <_svfiprintf_r+0x52>
 8000af0:	fb0c 3202 	mla	r2, ip, r2, r3
 8000af4:	460c      	mov	r4, r1
 8000af6:	2001      	movs	r0, #1
 8000af8:	e7a8      	b.n	8000a4c <_svfiprintf_r+0xd8>
 8000afa:	2300      	movs	r3, #0
 8000afc:	3401      	adds	r4, #1
 8000afe:	9305      	str	r3, [sp, #20]
 8000b00:	4619      	mov	r1, r3
 8000b02:	f04f 0c0a 	mov.w	ip, #10
 8000b06:	4620      	mov	r0, r4
 8000b08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000b0c:	3a30      	subs	r2, #48	@ 0x30
 8000b0e:	2a09      	cmp	r2, #9
 8000b10:	d903      	bls.n	8000b1a <_svfiprintf_r+0x1a6>
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d0c6      	beq.n	8000aa4 <_svfiprintf_r+0x130>
 8000b16:	9105      	str	r1, [sp, #20]
 8000b18:	e7c4      	b.n	8000aa4 <_svfiprintf_r+0x130>
 8000b1a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000b1e:	4604      	mov	r4, r0
 8000b20:	2301      	movs	r3, #1
 8000b22:	e7f0      	b.n	8000b06 <_svfiprintf_r+0x192>
 8000b24:	ab03      	add	r3, sp, #12
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	462a      	mov	r2, r5
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <_svfiprintf_r+0x1f0>)
 8000b2c:	a904      	add	r1, sp, #16
 8000b2e:	4638      	mov	r0, r7
 8000b30:	f3af 8000 	nop.w
 8000b34:	1c42      	adds	r2, r0, #1
 8000b36:	4606      	mov	r6, r0
 8000b38:	d1d6      	bne.n	8000ae8 <_svfiprintf_r+0x174>
 8000b3a:	89ab      	ldrh	r3, [r5, #12]
 8000b3c:	065b      	lsls	r3, r3, #25
 8000b3e:	f53f af2d 	bmi.w	800099c <_svfiprintf_r+0x28>
 8000b42:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000b44:	e72c      	b.n	80009a0 <_svfiprintf_r+0x2c>
 8000b46:	ab03      	add	r3, sp, #12
 8000b48:	9300      	str	r3, [sp, #0]
 8000b4a:	462a      	mov	r2, r5
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <_svfiprintf_r+0x1f0>)
 8000b4e:	a904      	add	r1, sp, #16
 8000b50:	4638      	mov	r0, r7
 8000b52:	f000 f91b 	bl	8000d8c <_printf_i>
 8000b56:	e7ed      	b.n	8000b34 <_svfiprintf_r+0x1c0>
 8000b58:	0800111f 	.word	0x0800111f
 8000b5c:	08001129 	.word	0x08001129
 8000b60:	00000000 	.word	0x00000000
 8000b64:	080008bd 	.word	0x080008bd
 8000b68:	08001125 	.word	0x08001125

08000b6c <sbrk_aligned>:
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	4e0f      	ldr	r6, [pc, #60]	@ (8000bac <sbrk_aligned+0x40>)
 8000b70:	460c      	mov	r4, r1
 8000b72:	6831      	ldr	r1, [r6, #0]
 8000b74:	4605      	mov	r5, r0
 8000b76:	b911      	cbnz	r1, 8000b7e <sbrk_aligned+0x12>
 8000b78:	f000 fa7a 	bl	8001070 <_sbrk_r>
 8000b7c:	6030      	str	r0, [r6, #0]
 8000b7e:	4621      	mov	r1, r4
 8000b80:	4628      	mov	r0, r5
 8000b82:	f000 fa75 	bl	8001070 <_sbrk_r>
 8000b86:	1c43      	adds	r3, r0, #1
 8000b88:	d103      	bne.n	8000b92 <sbrk_aligned+0x26>
 8000b8a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b8e:	4620      	mov	r0, r4
 8000b90:	bd70      	pop	{r4, r5, r6, pc}
 8000b92:	1cc4      	adds	r4, r0, #3
 8000b94:	f024 0403 	bic.w	r4, r4, #3
 8000b98:	42a0      	cmp	r0, r4
 8000b9a:	d0f8      	beq.n	8000b8e <sbrk_aligned+0x22>
 8000b9c:	1a21      	subs	r1, r4, r0
 8000b9e:	4628      	mov	r0, r5
 8000ba0:	f000 fa66 	bl	8001070 <_sbrk_r>
 8000ba4:	3001      	adds	r0, #1
 8000ba6:	d1f2      	bne.n	8000b8e <sbrk_aligned+0x22>
 8000ba8:	e7ef      	b.n	8000b8a <sbrk_aligned+0x1e>
 8000baa:	bf00      	nop
 8000bac:	2000026c 	.word	0x2000026c

08000bb0 <_malloc_r>:
 8000bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bb4:	1ccd      	adds	r5, r1, #3
 8000bb6:	f025 0503 	bic.w	r5, r5, #3
 8000bba:	3508      	adds	r5, #8
 8000bbc:	2d0c      	cmp	r5, #12
 8000bbe:	bf38      	it	cc
 8000bc0:	250c      	movcc	r5, #12
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	4606      	mov	r6, r0
 8000bc6:	db01      	blt.n	8000bcc <_malloc_r+0x1c>
 8000bc8:	42a9      	cmp	r1, r5
 8000bca:	d904      	bls.n	8000bd6 <_malloc_r+0x26>
 8000bcc:	230c      	movs	r3, #12
 8000bce:	6033      	str	r3, [r6, #0]
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bd6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000cac <_malloc_r+0xfc>
 8000bda:	f000 f9f5 	bl	8000fc8 <__malloc_lock>
 8000bde:	f8d8 3000 	ldr.w	r3, [r8]
 8000be2:	461c      	mov	r4, r3
 8000be4:	bb44      	cbnz	r4, 8000c38 <_malloc_r+0x88>
 8000be6:	4629      	mov	r1, r5
 8000be8:	4630      	mov	r0, r6
 8000bea:	f7ff ffbf 	bl	8000b6c <sbrk_aligned>
 8000bee:	1c43      	adds	r3, r0, #1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	d158      	bne.n	8000ca6 <_malloc_r+0xf6>
 8000bf4:	f8d8 4000 	ldr.w	r4, [r8]
 8000bf8:	4627      	mov	r7, r4
 8000bfa:	2f00      	cmp	r7, #0
 8000bfc:	d143      	bne.n	8000c86 <_malloc_r+0xd6>
 8000bfe:	2c00      	cmp	r4, #0
 8000c00:	d04b      	beq.n	8000c9a <_malloc_r+0xea>
 8000c02:	6823      	ldr	r3, [r4, #0]
 8000c04:	4639      	mov	r1, r7
 8000c06:	4630      	mov	r0, r6
 8000c08:	eb04 0903 	add.w	r9, r4, r3
 8000c0c:	f000 fa30 	bl	8001070 <_sbrk_r>
 8000c10:	4581      	cmp	r9, r0
 8000c12:	d142      	bne.n	8000c9a <_malloc_r+0xea>
 8000c14:	6821      	ldr	r1, [r4, #0]
 8000c16:	1a6d      	subs	r5, r5, r1
 8000c18:	4629      	mov	r1, r5
 8000c1a:	4630      	mov	r0, r6
 8000c1c:	f7ff ffa6 	bl	8000b6c <sbrk_aligned>
 8000c20:	3001      	adds	r0, #1
 8000c22:	d03a      	beq.n	8000c9a <_malloc_r+0xea>
 8000c24:	6823      	ldr	r3, [r4, #0]
 8000c26:	442b      	add	r3, r5
 8000c28:	6023      	str	r3, [r4, #0]
 8000c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c2e:	685a      	ldr	r2, [r3, #4]
 8000c30:	bb62      	cbnz	r2, 8000c8c <_malloc_r+0xdc>
 8000c32:	f8c8 7000 	str.w	r7, [r8]
 8000c36:	e00f      	b.n	8000c58 <_malloc_r+0xa8>
 8000c38:	6822      	ldr	r2, [r4, #0]
 8000c3a:	1b52      	subs	r2, r2, r5
 8000c3c:	d420      	bmi.n	8000c80 <_malloc_r+0xd0>
 8000c3e:	2a0b      	cmp	r2, #11
 8000c40:	d917      	bls.n	8000c72 <_malloc_r+0xc2>
 8000c42:	1961      	adds	r1, r4, r5
 8000c44:	42a3      	cmp	r3, r4
 8000c46:	6025      	str	r5, [r4, #0]
 8000c48:	bf18      	it	ne
 8000c4a:	6059      	strne	r1, [r3, #4]
 8000c4c:	6863      	ldr	r3, [r4, #4]
 8000c4e:	bf08      	it	eq
 8000c50:	f8c8 1000 	streq.w	r1, [r8]
 8000c54:	5162      	str	r2, [r4, r5]
 8000c56:	604b      	str	r3, [r1, #4]
 8000c58:	4630      	mov	r0, r6
 8000c5a:	f000 f9bb 	bl	8000fd4 <__malloc_unlock>
 8000c5e:	f104 000b 	add.w	r0, r4, #11
 8000c62:	1d23      	adds	r3, r4, #4
 8000c64:	f020 0007 	bic.w	r0, r0, #7
 8000c68:	1ac2      	subs	r2, r0, r3
 8000c6a:	bf1c      	itt	ne
 8000c6c:	1a1b      	subne	r3, r3, r0
 8000c6e:	50a3      	strne	r3, [r4, r2]
 8000c70:	e7af      	b.n	8000bd2 <_malloc_r+0x22>
 8000c72:	6862      	ldr	r2, [r4, #4]
 8000c74:	42a3      	cmp	r3, r4
 8000c76:	bf0c      	ite	eq
 8000c78:	f8c8 2000 	streq.w	r2, [r8]
 8000c7c:	605a      	strne	r2, [r3, #4]
 8000c7e:	e7eb      	b.n	8000c58 <_malloc_r+0xa8>
 8000c80:	4623      	mov	r3, r4
 8000c82:	6864      	ldr	r4, [r4, #4]
 8000c84:	e7ae      	b.n	8000be4 <_malloc_r+0x34>
 8000c86:	463c      	mov	r4, r7
 8000c88:	687f      	ldr	r7, [r7, #4]
 8000c8a:	e7b6      	b.n	8000bfa <_malloc_r+0x4a>
 8000c8c:	461a      	mov	r2, r3
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	d1fb      	bne.n	8000c8c <_malloc_r+0xdc>
 8000c94:	2300      	movs	r3, #0
 8000c96:	6053      	str	r3, [r2, #4]
 8000c98:	e7de      	b.n	8000c58 <_malloc_r+0xa8>
 8000c9a:	230c      	movs	r3, #12
 8000c9c:	6033      	str	r3, [r6, #0]
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	f000 f998 	bl	8000fd4 <__malloc_unlock>
 8000ca4:	e794      	b.n	8000bd0 <_malloc_r+0x20>
 8000ca6:	6005      	str	r5, [r0, #0]
 8000ca8:	e7d6      	b.n	8000c58 <_malloc_r+0xa8>
 8000caa:	bf00      	nop
 8000cac:	20000270 	.word	0x20000270

08000cb0 <_printf_common>:
 8000cb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cb4:	4616      	mov	r6, r2
 8000cb6:	4698      	mov	r8, r3
 8000cb8:	688a      	ldr	r2, [r1, #8]
 8000cba:	690b      	ldr	r3, [r1, #16]
 8000cbc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	bfb8      	it	lt
 8000cc4:	4613      	movlt	r3, r2
 8000cc6:	6033      	str	r3, [r6, #0]
 8000cc8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ccc:	4607      	mov	r7, r0
 8000cce:	460c      	mov	r4, r1
 8000cd0:	b10a      	cbz	r2, 8000cd6 <_printf_common+0x26>
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	6033      	str	r3, [r6, #0]
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	0699      	lsls	r1, r3, #26
 8000cda:	bf42      	ittt	mi
 8000cdc:	6833      	ldrmi	r3, [r6, #0]
 8000cde:	3302      	addmi	r3, #2
 8000ce0:	6033      	strmi	r3, [r6, #0]
 8000ce2:	6825      	ldr	r5, [r4, #0]
 8000ce4:	f015 0506 	ands.w	r5, r5, #6
 8000ce8:	d106      	bne.n	8000cf8 <_printf_common+0x48>
 8000cea:	f104 0a19 	add.w	sl, r4, #25
 8000cee:	68e3      	ldr	r3, [r4, #12]
 8000cf0:	6832      	ldr	r2, [r6, #0]
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	42ab      	cmp	r3, r5
 8000cf6:	dc26      	bgt.n	8000d46 <_printf_common+0x96>
 8000cf8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000cfc:	6822      	ldr	r2, [r4, #0]
 8000cfe:	3b00      	subs	r3, #0
 8000d00:	bf18      	it	ne
 8000d02:	2301      	movne	r3, #1
 8000d04:	0692      	lsls	r2, r2, #26
 8000d06:	d42b      	bmi.n	8000d60 <_printf_common+0xb0>
 8000d08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000d0c:	4641      	mov	r1, r8
 8000d0e:	4638      	mov	r0, r7
 8000d10:	47c8      	blx	r9
 8000d12:	3001      	adds	r0, #1
 8000d14:	d01e      	beq.n	8000d54 <_printf_common+0xa4>
 8000d16:	6823      	ldr	r3, [r4, #0]
 8000d18:	6922      	ldr	r2, [r4, #16]
 8000d1a:	f003 0306 	and.w	r3, r3, #6
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	bf02      	ittt	eq
 8000d22:	68e5      	ldreq	r5, [r4, #12]
 8000d24:	6833      	ldreq	r3, [r6, #0]
 8000d26:	1aed      	subeq	r5, r5, r3
 8000d28:	68a3      	ldr	r3, [r4, #8]
 8000d2a:	bf0c      	ite	eq
 8000d2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d30:	2500      	movne	r5, #0
 8000d32:	4293      	cmp	r3, r2
 8000d34:	bfc4      	itt	gt
 8000d36:	1a9b      	subgt	r3, r3, r2
 8000d38:	18ed      	addgt	r5, r5, r3
 8000d3a:	2600      	movs	r6, #0
 8000d3c:	341a      	adds	r4, #26
 8000d3e:	42b5      	cmp	r5, r6
 8000d40:	d11a      	bne.n	8000d78 <_printf_common+0xc8>
 8000d42:	2000      	movs	r0, #0
 8000d44:	e008      	b.n	8000d58 <_printf_common+0xa8>
 8000d46:	2301      	movs	r3, #1
 8000d48:	4652      	mov	r2, sl
 8000d4a:	4641      	mov	r1, r8
 8000d4c:	4638      	mov	r0, r7
 8000d4e:	47c8      	blx	r9
 8000d50:	3001      	adds	r0, #1
 8000d52:	d103      	bne.n	8000d5c <_printf_common+0xac>
 8000d54:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5c:	3501      	adds	r5, #1
 8000d5e:	e7c6      	b.n	8000cee <_printf_common+0x3e>
 8000d60:	18e1      	adds	r1, r4, r3
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	2030      	movs	r0, #48	@ 0x30
 8000d66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000d6a:	4422      	add	r2, r4
 8000d6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000d70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000d74:	3302      	adds	r3, #2
 8000d76:	e7c7      	b.n	8000d08 <_printf_common+0x58>
 8000d78:	2301      	movs	r3, #1
 8000d7a:	4622      	mov	r2, r4
 8000d7c:	4641      	mov	r1, r8
 8000d7e:	4638      	mov	r0, r7
 8000d80:	47c8      	blx	r9
 8000d82:	3001      	adds	r0, #1
 8000d84:	d0e6      	beq.n	8000d54 <_printf_common+0xa4>
 8000d86:	3601      	adds	r6, #1
 8000d88:	e7d9      	b.n	8000d3e <_printf_common+0x8e>
	...

08000d8c <_printf_i>:
 8000d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d90:	7e0f      	ldrb	r7, [r1, #24]
 8000d92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d94:	2f78      	cmp	r7, #120	@ 0x78
 8000d96:	4691      	mov	r9, r2
 8000d98:	4680      	mov	r8, r0
 8000d9a:	460c      	mov	r4, r1
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000da2:	d807      	bhi.n	8000db4 <_printf_i+0x28>
 8000da4:	2f62      	cmp	r7, #98	@ 0x62
 8000da6:	d80a      	bhi.n	8000dbe <_printf_i+0x32>
 8000da8:	2f00      	cmp	r7, #0
 8000daa:	f000 80d1 	beq.w	8000f50 <_printf_i+0x1c4>
 8000dae:	2f58      	cmp	r7, #88	@ 0x58
 8000db0:	f000 80b8 	beq.w	8000f24 <_printf_i+0x198>
 8000db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000db8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000dbc:	e03a      	b.n	8000e34 <_printf_i+0xa8>
 8000dbe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000dc2:	2b15      	cmp	r3, #21
 8000dc4:	d8f6      	bhi.n	8000db4 <_printf_i+0x28>
 8000dc6:	a101      	add	r1, pc, #4	@ (adr r1, 8000dcc <_printf_i+0x40>)
 8000dc8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000dcc:	08000e25 	.word	0x08000e25
 8000dd0:	08000e39 	.word	0x08000e39
 8000dd4:	08000db5 	.word	0x08000db5
 8000dd8:	08000db5 	.word	0x08000db5
 8000ddc:	08000db5 	.word	0x08000db5
 8000de0:	08000db5 	.word	0x08000db5
 8000de4:	08000e39 	.word	0x08000e39
 8000de8:	08000db5 	.word	0x08000db5
 8000dec:	08000db5 	.word	0x08000db5
 8000df0:	08000db5 	.word	0x08000db5
 8000df4:	08000db5 	.word	0x08000db5
 8000df8:	08000f37 	.word	0x08000f37
 8000dfc:	08000e63 	.word	0x08000e63
 8000e00:	08000ef1 	.word	0x08000ef1
 8000e04:	08000db5 	.word	0x08000db5
 8000e08:	08000db5 	.word	0x08000db5
 8000e0c:	08000f59 	.word	0x08000f59
 8000e10:	08000db5 	.word	0x08000db5
 8000e14:	08000e63 	.word	0x08000e63
 8000e18:	08000db5 	.word	0x08000db5
 8000e1c:	08000db5 	.word	0x08000db5
 8000e20:	08000ef9 	.word	0x08000ef9
 8000e24:	6833      	ldr	r3, [r6, #0]
 8000e26:	1d1a      	adds	r2, r3, #4
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6032      	str	r2, [r6, #0]
 8000e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000e30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000e34:	2301      	movs	r3, #1
 8000e36:	e09c      	b.n	8000f72 <_printf_i+0x1e6>
 8000e38:	6833      	ldr	r3, [r6, #0]
 8000e3a:	6820      	ldr	r0, [r4, #0]
 8000e3c:	1d19      	adds	r1, r3, #4
 8000e3e:	6031      	str	r1, [r6, #0]
 8000e40:	0606      	lsls	r6, r0, #24
 8000e42:	d501      	bpl.n	8000e48 <_printf_i+0xbc>
 8000e44:	681d      	ldr	r5, [r3, #0]
 8000e46:	e003      	b.n	8000e50 <_printf_i+0xc4>
 8000e48:	0645      	lsls	r5, r0, #25
 8000e4a:	d5fb      	bpl.n	8000e44 <_printf_i+0xb8>
 8000e4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000e50:	2d00      	cmp	r5, #0
 8000e52:	da03      	bge.n	8000e5c <_printf_i+0xd0>
 8000e54:	232d      	movs	r3, #45	@ 0x2d
 8000e56:	426d      	negs	r5, r5
 8000e58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000e5c:	4858      	ldr	r0, [pc, #352]	@ (8000fc0 <_printf_i+0x234>)
 8000e5e:	230a      	movs	r3, #10
 8000e60:	e011      	b.n	8000e86 <_printf_i+0xfa>
 8000e62:	6821      	ldr	r1, [r4, #0]
 8000e64:	6833      	ldr	r3, [r6, #0]
 8000e66:	0608      	lsls	r0, r1, #24
 8000e68:	f853 5b04 	ldr.w	r5, [r3], #4
 8000e6c:	d402      	bmi.n	8000e74 <_printf_i+0xe8>
 8000e6e:	0649      	lsls	r1, r1, #25
 8000e70:	bf48      	it	mi
 8000e72:	b2ad      	uxthmi	r5, r5
 8000e74:	2f6f      	cmp	r7, #111	@ 0x6f
 8000e76:	4852      	ldr	r0, [pc, #328]	@ (8000fc0 <_printf_i+0x234>)
 8000e78:	6033      	str	r3, [r6, #0]
 8000e7a:	bf14      	ite	ne
 8000e7c:	230a      	movne	r3, #10
 8000e7e:	2308      	moveq	r3, #8
 8000e80:	2100      	movs	r1, #0
 8000e82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000e86:	6866      	ldr	r6, [r4, #4]
 8000e88:	60a6      	str	r6, [r4, #8]
 8000e8a:	2e00      	cmp	r6, #0
 8000e8c:	db05      	blt.n	8000e9a <_printf_i+0x10e>
 8000e8e:	6821      	ldr	r1, [r4, #0]
 8000e90:	432e      	orrs	r6, r5
 8000e92:	f021 0104 	bic.w	r1, r1, #4
 8000e96:	6021      	str	r1, [r4, #0]
 8000e98:	d04b      	beq.n	8000f32 <_printf_i+0x1a6>
 8000e9a:	4616      	mov	r6, r2
 8000e9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ea0:	fb03 5711 	mls	r7, r3, r1, r5
 8000ea4:	5dc7      	ldrb	r7, [r0, r7]
 8000ea6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000eaa:	462f      	mov	r7, r5
 8000eac:	42bb      	cmp	r3, r7
 8000eae:	460d      	mov	r5, r1
 8000eb0:	d9f4      	bls.n	8000e9c <_printf_i+0x110>
 8000eb2:	2b08      	cmp	r3, #8
 8000eb4:	d10b      	bne.n	8000ece <_printf_i+0x142>
 8000eb6:	6823      	ldr	r3, [r4, #0]
 8000eb8:	07df      	lsls	r7, r3, #31
 8000eba:	d508      	bpl.n	8000ece <_printf_i+0x142>
 8000ebc:	6923      	ldr	r3, [r4, #16]
 8000ebe:	6861      	ldr	r1, [r4, #4]
 8000ec0:	4299      	cmp	r1, r3
 8000ec2:	bfde      	ittt	le
 8000ec4:	2330      	movle	r3, #48	@ 0x30
 8000ec6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000eca:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000ece:	1b92      	subs	r2, r2, r6
 8000ed0:	6122      	str	r2, [r4, #16]
 8000ed2:	f8cd a000 	str.w	sl, [sp]
 8000ed6:	464b      	mov	r3, r9
 8000ed8:	aa03      	add	r2, sp, #12
 8000eda:	4621      	mov	r1, r4
 8000edc:	4640      	mov	r0, r8
 8000ede:	f7ff fee7 	bl	8000cb0 <_printf_common>
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	d14a      	bne.n	8000f7c <_printf_i+0x1f0>
 8000ee6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eea:	b004      	add	sp, #16
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef0:	6823      	ldr	r3, [r4, #0]
 8000ef2:	f043 0320 	orr.w	r3, r3, #32
 8000ef6:	6023      	str	r3, [r4, #0]
 8000ef8:	4832      	ldr	r0, [pc, #200]	@ (8000fc4 <_printf_i+0x238>)
 8000efa:	2778      	movs	r7, #120	@ 0x78
 8000efc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	6831      	ldr	r1, [r6, #0]
 8000f04:	061f      	lsls	r7, r3, #24
 8000f06:	f851 5b04 	ldr.w	r5, [r1], #4
 8000f0a:	d402      	bmi.n	8000f12 <_printf_i+0x186>
 8000f0c:	065f      	lsls	r7, r3, #25
 8000f0e:	bf48      	it	mi
 8000f10:	b2ad      	uxthmi	r5, r5
 8000f12:	6031      	str	r1, [r6, #0]
 8000f14:	07d9      	lsls	r1, r3, #31
 8000f16:	bf44      	itt	mi
 8000f18:	f043 0320 	orrmi.w	r3, r3, #32
 8000f1c:	6023      	strmi	r3, [r4, #0]
 8000f1e:	b11d      	cbz	r5, 8000f28 <_printf_i+0x19c>
 8000f20:	2310      	movs	r3, #16
 8000f22:	e7ad      	b.n	8000e80 <_printf_i+0xf4>
 8000f24:	4826      	ldr	r0, [pc, #152]	@ (8000fc0 <_printf_i+0x234>)
 8000f26:	e7e9      	b.n	8000efc <_printf_i+0x170>
 8000f28:	6823      	ldr	r3, [r4, #0]
 8000f2a:	f023 0320 	bic.w	r3, r3, #32
 8000f2e:	6023      	str	r3, [r4, #0]
 8000f30:	e7f6      	b.n	8000f20 <_printf_i+0x194>
 8000f32:	4616      	mov	r6, r2
 8000f34:	e7bd      	b.n	8000eb2 <_printf_i+0x126>
 8000f36:	6833      	ldr	r3, [r6, #0]
 8000f38:	6825      	ldr	r5, [r4, #0]
 8000f3a:	6961      	ldr	r1, [r4, #20]
 8000f3c:	1d18      	adds	r0, r3, #4
 8000f3e:	6030      	str	r0, [r6, #0]
 8000f40:	062e      	lsls	r6, r5, #24
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	d501      	bpl.n	8000f4a <_printf_i+0x1be>
 8000f46:	6019      	str	r1, [r3, #0]
 8000f48:	e002      	b.n	8000f50 <_printf_i+0x1c4>
 8000f4a:	0668      	lsls	r0, r5, #25
 8000f4c:	d5fb      	bpl.n	8000f46 <_printf_i+0x1ba>
 8000f4e:	8019      	strh	r1, [r3, #0]
 8000f50:	2300      	movs	r3, #0
 8000f52:	6123      	str	r3, [r4, #16]
 8000f54:	4616      	mov	r6, r2
 8000f56:	e7bc      	b.n	8000ed2 <_printf_i+0x146>
 8000f58:	6833      	ldr	r3, [r6, #0]
 8000f5a:	1d1a      	adds	r2, r3, #4
 8000f5c:	6032      	str	r2, [r6, #0]
 8000f5e:	681e      	ldr	r6, [r3, #0]
 8000f60:	6862      	ldr	r2, [r4, #4]
 8000f62:	2100      	movs	r1, #0
 8000f64:	4630      	mov	r0, r6
 8000f66:	f7ff f93b 	bl	80001e0 <memchr>
 8000f6a:	b108      	cbz	r0, 8000f70 <_printf_i+0x1e4>
 8000f6c:	1b80      	subs	r0, r0, r6
 8000f6e:	6060      	str	r0, [r4, #4]
 8000f70:	6863      	ldr	r3, [r4, #4]
 8000f72:	6123      	str	r3, [r4, #16]
 8000f74:	2300      	movs	r3, #0
 8000f76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f7a:	e7aa      	b.n	8000ed2 <_printf_i+0x146>
 8000f7c:	6923      	ldr	r3, [r4, #16]
 8000f7e:	4632      	mov	r2, r6
 8000f80:	4649      	mov	r1, r9
 8000f82:	4640      	mov	r0, r8
 8000f84:	47d0      	blx	sl
 8000f86:	3001      	adds	r0, #1
 8000f88:	d0ad      	beq.n	8000ee6 <_printf_i+0x15a>
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	079b      	lsls	r3, r3, #30
 8000f8e:	d413      	bmi.n	8000fb8 <_printf_i+0x22c>
 8000f90:	68e0      	ldr	r0, [r4, #12]
 8000f92:	9b03      	ldr	r3, [sp, #12]
 8000f94:	4298      	cmp	r0, r3
 8000f96:	bfb8      	it	lt
 8000f98:	4618      	movlt	r0, r3
 8000f9a:	e7a6      	b.n	8000eea <_printf_i+0x15e>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	4632      	mov	r2, r6
 8000fa0:	4649      	mov	r1, r9
 8000fa2:	4640      	mov	r0, r8
 8000fa4:	47d0      	blx	sl
 8000fa6:	3001      	adds	r0, #1
 8000fa8:	d09d      	beq.n	8000ee6 <_printf_i+0x15a>
 8000faa:	3501      	adds	r5, #1
 8000fac:	68e3      	ldr	r3, [r4, #12]
 8000fae:	9903      	ldr	r1, [sp, #12]
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	42ab      	cmp	r3, r5
 8000fb4:	dcf2      	bgt.n	8000f9c <_printf_i+0x210>
 8000fb6:	e7eb      	b.n	8000f90 <_printf_i+0x204>
 8000fb8:	2500      	movs	r5, #0
 8000fba:	f104 0619 	add.w	r6, r4, #25
 8000fbe:	e7f5      	b.n	8000fac <_printf_i+0x220>
 8000fc0:	08001130 	.word	0x08001130
 8000fc4:	08001141 	.word	0x08001141

08000fc8 <__malloc_lock>:
 8000fc8:	4801      	ldr	r0, [pc, #4]	@ (8000fd0 <__malloc_lock+0x8>)
 8000fca:	f7ff bc1d 	b.w	8000808 <__retarget_lock_acquire_recursive>
 8000fce:	bf00      	nop
 8000fd0:	20000264 	.word	0x20000264

08000fd4 <__malloc_unlock>:
 8000fd4:	4801      	ldr	r0, [pc, #4]	@ (8000fdc <__malloc_unlock+0x8>)
 8000fd6:	f7ff bc18 	b.w	800080a <__retarget_lock_release_recursive>
 8000fda:	bf00      	nop
 8000fdc:	20000264 	.word	0x20000264

08000fe0 <_realloc_r>:
 8000fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe4:	4607      	mov	r7, r0
 8000fe6:	4614      	mov	r4, r2
 8000fe8:	460d      	mov	r5, r1
 8000fea:	b921      	cbnz	r1, 8000ff6 <_realloc_r+0x16>
 8000fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ff0:	4611      	mov	r1, r2
 8000ff2:	f7ff bddd 	b.w	8000bb0 <_malloc_r>
 8000ff6:	b92a      	cbnz	r2, 8001004 <_realloc_r+0x24>
 8000ff8:	f7ff fc16 	bl	8000828 <_free_r>
 8000ffc:	4625      	mov	r5, r4
 8000ffe:	4628      	mov	r0, r5
 8001000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001004:	f000 f844 	bl	8001090 <_malloc_usable_size_r>
 8001008:	4284      	cmp	r4, r0
 800100a:	4606      	mov	r6, r0
 800100c:	d802      	bhi.n	8001014 <_realloc_r+0x34>
 800100e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001012:	d8f4      	bhi.n	8000ffe <_realloc_r+0x1e>
 8001014:	4621      	mov	r1, r4
 8001016:	4638      	mov	r0, r7
 8001018:	f7ff fdca 	bl	8000bb0 <_malloc_r>
 800101c:	4680      	mov	r8, r0
 800101e:	b908      	cbnz	r0, 8001024 <_realloc_r+0x44>
 8001020:	4645      	mov	r5, r8
 8001022:	e7ec      	b.n	8000ffe <_realloc_r+0x1e>
 8001024:	42b4      	cmp	r4, r6
 8001026:	4622      	mov	r2, r4
 8001028:	4629      	mov	r1, r5
 800102a:	bf28      	it	cs
 800102c:	4632      	movcs	r2, r6
 800102e:	f7ff fbed 	bl	800080c <memcpy>
 8001032:	4629      	mov	r1, r5
 8001034:	4638      	mov	r0, r7
 8001036:	f7ff fbf7 	bl	8000828 <_free_r>
 800103a:	e7f1      	b.n	8001020 <_realloc_r+0x40>

0800103c <memmove>:
 800103c:	4288      	cmp	r0, r1
 800103e:	b510      	push	{r4, lr}
 8001040:	eb01 0402 	add.w	r4, r1, r2
 8001044:	d902      	bls.n	800104c <memmove+0x10>
 8001046:	4284      	cmp	r4, r0
 8001048:	4623      	mov	r3, r4
 800104a:	d807      	bhi.n	800105c <memmove+0x20>
 800104c:	1e43      	subs	r3, r0, #1
 800104e:	42a1      	cmp	r1, r4
 8001050:	d008      	beq.n	8001064 <memmove+0x28>
 8001052:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001056:	f803 2f01 	strb.w	r2, [r3, #1]!
 800105a:	e7f8      	b.n	800104e <memmove+0x12>
 800105c:	4402      	add	r2, r0
 800105e:	4601      	mov	r1, r0
 8001060:	428a      	cmp	r2, r1
 8001062:	d100      	bne.n	8001066 <memmove+0x2a>
 8001064:	bd10      	pop	{r4, pc}
 8001066:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800106a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800106e:	e7f7      	b.n	8001060 <memmove+0x24>

08001070 <_sbrk_r>:
 8001070:	b538      	push	{r3, r4, r5, lr}
 8001072:	4d06      	ldr	r5, [pc, #24]	@ (800108c <_sbrk_r+0x1c>)
 8001074:	2300      	movs	r3, #0
 8001076:	4604      	mov	r4, r0
 8001078:	4608      	mov	r0, r1
 800107a:	602b      	str	r3, [r5, #0]
 800107c:	f7ff fa54 	bl	8000528 <_sbrk>
 8001080:	1c43      	adds	r3, r0, #1
 8001082:	d102      	bne.n	800108a <_sbrk_r+0x1a>
 8001084:	682b      	ldr	r3, [r5, #0]
 8001086:	b103      	cbz	r3, 800108a <_sbrk_r+0x1a>
 8001088:	6023      	str	r3, [r4, #0]
 800108a:	bd38      	pop	{r3, r4, r5, pc}
 800108c:	20000268 	.word	0x20000268

08001090 <_malloc_usable_size_r>:
 8001090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001094:	1f18      	subs	r0, r3, #4
 8001096:	2b00      	cmp	r3, #0
 8001098:	bfbc      	itt	lt
 800109a:	580b      	ldrlt	r3, [r1, r0]
 800109c:	18c0      	addlt	r0, r0, r3
 800109e:	4770      	bx	lr

080010a0 <_init>:
 80010a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a2:	bf00      	nop
 80010a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010a6:	bc08      	pop	{r3}
 80010a8:	469e      	mov	lr, r3
 80010aa:	4770      	bx	lr

080010ac <_fini>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	bf00      	nop
 80010b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80010b2:	bc08      	pop	{r3}
 80010b4:	469e      	mov	lr, r3
 80010b6:	4770      	bx	lr
